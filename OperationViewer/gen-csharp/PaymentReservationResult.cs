/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PaymentReservationResult : TBase
  {
    private string _orderId;
    private string _confirmUrl;
    private Dictionary<string, string> _extras;

    public string OrderId
    {
      get
      {
        return _orderId;
      }
      set
      {
        __isset.orderId = true;
        this._orderId = value;
      }
    }

    public string ConfirmUrl
    {
      get
      {
        return _confirmUrl;
      }
      set
      {
        __isset.confirmUrl = true;
        this._confirmUrl = value;
      }
    }

    public Dictionary<string, string> Extras
    {
      get
      {
        return _extras;
      }
      set
      {
        __isset.extras = true;
        this._extras = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orderId;
      public bool confirmUrl;
      public bool extras;
    }

    public PaymentReservationResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              OrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ConfirmUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Extras = new Dictionary<string, string>();
                TMap _map29 = iprot.ReadMapBegin();
                for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                {
                  string _key31;
                  string _val32;
                  _key31 = iprot.ReadString();
                  _val32 = iprot.ReadString();
                  Extras[_key31] = _val32;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PaymentReservationResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (OrderId != null && __isset.orderId) {
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
      }
      if (ConfirmUrl != null && __isset.confirmUrl) {
        field.Name = "confirmUrl";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ConfirmUrl);
        oprot.WriteFieldEnd();
      }
      if (Extras != null && __isset.extras) {
        field.Name = "extras";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Extras.Count));
          foreach (string _iter33 in Extras.Keys)
          {
            oprot.WriteString(_iter33);
            oprot.WriteString(Extras[_iter33]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PaymentReservationResult(");
      sb.Append("OrderId: ");
      sb.Append(OrderId);
      sb.Append(",ConfirmUrl: ");
      sb.Append(ConfirmUrl);
      sb.Append(",Extras: ");
      sb.Append(Extras);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
