/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WapInvitation : TBase
  {
    private WapInvitationType _type;
    private string _inviteeEmail;
    private string _inviterMid;
    private string _roomMid;

    /// <summary>
    /// 
    /// <seealso cref="WapInvitationType"/>
    /// </summary>
    public WapInvitationType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string InviteeEmail
    {
      get
      {
        return _inviteeEmail;
      }
      set
      {
        __isset.inviteeEmail = true;
        this._inviteeEmail = value;
      }
    }

    public string InviterMid
    {
      get
      {
        return _inviterMid;
      }
      set
      {
        __isset.inviterMid = true;
        this._inviterMid = value;
      }
    }

    public string RoomMid
    {
      get
      {
        return _roomMid;
      }
      set
      {
        __isset.roomMid = true;
        this._roomMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool inviteeEmail;
      public bool inviterMid;
      public bool roomMid;
    }

    public WapInvitation() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (WapInvitationType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              InviteeEmail = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              InviterMid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              RoomMid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("WapInvitation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (InviteeEmail != null && __isset.inviteeEmail) {
        field.Name = "inviteeEmail";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InviteeEmail);
        oprot.WriteFieldEnd();
      }
      if (InviterMid != null && __isset.inviterMid) {
        field.Name = "inviterMid";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InviterMid);
        oprot.WriteFieldEnd();
      }
      if (RoomMid != null && __isset.roomMid) {
        field.Name = "roomMid";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RoomMid);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("WapInvitation(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",InviteeEmail: ");
      sb.Append(InviteeEmail);
      sb.Append(",InviterMid: ");
      sb.Append(InviterMid);
      sb.Append(",RoomMid: ");
      sb.Append(RoomMid);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
