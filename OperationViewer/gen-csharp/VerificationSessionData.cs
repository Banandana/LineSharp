/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VerificationSessionData : TBase
  {
    private string _sessionId;
    private VerificationMethod _method;
    private string _callback;
    private string _normalizedPhone;
    private string _countryCode;
    private string _nationalSignificantNumber;
    private List<VerificationMethod> _availableVerificationMethods;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="VerificationMethod"/>
    /// </summary>
    public VerificationMethod Method
    {
      get
      {
        return _method;
      }
      set
      {
        __isset.method = true;
        this._method = value;
      }
    }

    public string Callback
    {
      get
      {
        return _callback;
      }
      set
      {
        __isset.callback = true;
        this._callback = value;
      }
    }

    public string NormalizedPhone
    {
      get
      {
        return _normalizedPhone;
      }
      set
      {
        __isset.normalizedPhone = true;
        this._normalizedPhone = value;
      }
    }

    public string CountryCode
    {
      get
      {
        return _countryCode;
      }
      set
      {
        __isset.countryCode = true;
        this._countryCode = value;
      }
    }

    public string NationalSignificantNumber
    {
      get
      {
        return _nationalSignificantNumber;
      }
      set
      {
        __isset.nationalSignificantNumber = true;
        this._nationalSignificantNumber = value;
      }
    }

    public List<VerificationMethod> AvailableVerificationMethods
    {
      get
      {
        return _availableVerificationMethods;
      }
      set
      {
        __isset.availableVerificationMethods = true;
        this._availableVerificationMethods = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool method;
      public bool callback;
      public bool normalizedPhone;
      public bool countryCode;
      public bool nationalSignificantNumber;
      public bool availableVerificationMethods;
    }

    public VerificationSessionData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SessionId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Method = (VerificationMethod)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Callback = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              NormalizedPhone = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              CountryCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              NationalSignificantNumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                AvailableVerificationMethods = new List<VerificationMethod>();
                TList _list85 = iprot.ReadListBegin();
                for( int _i86 = 0; _i86 < _list85.Count; ++_i86)
                {
                  VerificationMethod _elem87 = (VerificationMethod)0;
                  _elem87 = (VerificationMethod)iprot.ReadI32();
                  AvailableVerificationMethods.Add(_elem87);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("VerificationSessionData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SessionId != null && __isset.sessionId) {
        field.Name = "sessionId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SessionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.method) {
        field.Name = "method";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Method);
        oprot.WriteFieldEnd();
      }
      if (Callback != null && __isset.callback) {
        field.Name = "callback";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Callback);
        oprot.WriteFieldEnd();
      }
      if (NormalizedPhone != null && __isset.normalizedPhone) {
        field.Name = "normalizedPhone";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NormalizedPhone);
        oprot.WriteFieldEnd();
      }
      if (CountryCode != null && __isset.countryCode) {
        field.Name = "countryCode";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CountryCode);
        oprot.WriteFieldEnd();
      }
      if (NationalSignificantNumber != null && __isset.nationalSignificantNumber) {
        field.Name = "nationalSignificantNumber";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NationalSignificantNumber);
        oprot.WriteFieldEnd();
      }
      if (AvailableVerificationMethods != null && __isset.availableVerificationMethods) {
        field.Name = "availableVerificationMethods";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, AvailableVerificationMethods.Count));
          foreach (VerificationMethod _iter88 in AvailableVerificationMethods)
          {
            oprot.WriteI32((int)_iter88);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("VerificationSessionData(");
      sb.Append("SessionId: ");
      sb.Append(SessionId);
      sb.Append(",Method: ");
      sb.Append(Method);
      sb.Append(",Callback: ");
      sb.Append(Callback);
      sb.Append(",NormalizedPhone: ");
      sb.Append(NormalizedPhone);
      sb.Append(",CountryCode: ");
      sb.Append(CountryCode);
      sb.Append(",NationalSignificantNumber: ");
      sb.Append(NationalSignificantNumber);
      sb.Append(",AvailableVerificationMethods: ");
      sb.Append(AvailableVerificationMethods);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
