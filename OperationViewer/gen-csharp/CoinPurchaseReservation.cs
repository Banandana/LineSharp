/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CoinPurchaseReservation : TBase
  {
    private string _productId;
    private string _country;
    private string _currency;
    private string _price;
    private PaymentType _appStoreCode;
    private string _language;
    private PaymentPgType _pgCode;
    private string _redirectUrl;

    public string ProductId
    {
      get
      {
        return _productId;
      }
      set
      {
        __isset.productId = true;
        this._productId = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        this._currency = value;
      }
    }

    public string Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PaymentType"/>
    /// </summary>
    public PaymentType AppStoreCode
    {
      get
      {
        return _appStoreCode;
      }
      set
      {
        __isset.appStoreCode = true;
        this._appStoreCode = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PaymentPgType"/>
    /// </summary>
    public PaymentPgType PgCode
    {
      get
      {
        return _pgCode;
      }
      set
      {
        __isset.pgCode = true;
        this._pgCode = value;
      }
    }

    public string RedirectUrl
    {
      get
      {
        return _redirectUrl;
      }
      set
      {
        __isset.redirectUrl = true;
        this._redirectUrl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool productId;
      public bool country;
      public bool currency;
      public bool price;
      public bool appStoreCode;
      public bool language;
      public bool pgCode;
      public bool redirectUrl;
    }

    public CoinPurchaseReservation() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ProductId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Country = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Price = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              AppStoreCode = (PaymentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Language = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              PgCode = (PaymentPgType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              RedirectUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CoinPurchaseReservation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ProductId != null && __isset.productId) {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProductId);
        oprot.WriteFieldEnd();
      }
      if (Country != null && __isset.country) {
        field.Name = "country";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Country);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (Price != null && __isset.price) {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Price);
        oprot.WriteFieldEnd();
      }
      if (__isset.appStoreCode) {
        field.Name = "appStoreCode";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)AppStoreCode);
        oprot.WriteFieldEnd();
      }
      if (Language != null && __isset.language) {
        field.Name = "language";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Language);
        oprot.WriteFieldEnd();
      }
      if (__isset.pgCode) {
        field.Name = "pgCode";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)PgCode);
        oprot.WriteFieldEnd();
      }
      if (RedirectUrl != null && __isset.redirectUrl) {
        field.Name = "redirectUrl";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RedirectUrl);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CoinPurchaseReservation(");
      sb.Append("ProductId: ");
      sb.Append(ProductId);
      sb.Append(",Country: ");
      sb.Append(Country);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",Price: ");
      sb.Append(Price);
      sb.Append(",AppStoreCode: ");
      sb.Append(AppStoreCode);
      sb.Append(",Language: ");
      sb.Append(Language);
      sb.Append(",PgCode: ");
      sb.Append(PgCode);
      sb.Append(",RedirectUrl: ");
      sb.Append(RedirectUrl);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
