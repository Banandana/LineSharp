/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CompactContact : TBase
  {
    private string _mid;
    private long _createdTime;
    private long _modifiedTime;
    private ContactStatus _status;
    private long _settings;
    private string _displayNameOverridden;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    public long CreatedTime
    {
      get
      {
        return _createdTime;
      }
      set
      {
        __isset.createdTime = true;
        this._createdTime = value;
      }
    }

    public long ModifiedTime
    {
      get
      {
        return _modifiedTime;
      }
      set
      {
        __isset.modifiedTime = true;
        this._modifiedTime = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ContactStatus"/>
    /// </summary>
    public ContactStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public long Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }

    public string DisplayNameOverridden
    {
      get
      {
        return _displayNameOverridden;
      }
      set
      {
        __isset.displayNameOverridden = true;
        this._displayNameOverridden = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
      public bool createdTime;
      public bool modifiedTime;
      public bool status;
      public bool settings;
      public bool displayNameOverridden;
    }

    public CompactContact() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Mid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              CreatedTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              ModifiedTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Status = (ContactStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Settings = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              DisplayNameOverridden = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CompactContact");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Mid != null && __isset.mid) {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mid);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdTime) {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.modifiedTime) {
        field.Name = "modifiedTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ModifiedTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.status) {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.settings) {
        field.Name = "settings";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Settings);
        oprot.WriteFieldEnd();
      }
      if (DisplayNameOverridden != null && __isset.displayNameOverridden) {
        field.Name = "displayNameOverridden";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayNameOverridden);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CompactContact(");
      sb.Append("Mid: ");
      sb.Append(Mid);
      sb.Append(",CreatedTime: ");
      sb.Append(CreatedTime);
      sb.Append(",ModifiedTime: ");
      sb.Append(ModifiedTime);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",Settings: ");
      sb.Append(Settings);
      sb.Append(",DisplayNameOverridden: ");
      sb.Append(DisplayNameOverridden);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
