/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TMessageBoxWrapUpResponse : TBase
  {
    private List<TMessageBoxWrapUp> _messageBoxWrapUpList;
    private int _totalSize;

    public List<TMessageBoxWrapUp> MessageBoxWrapUpList
    {
      get
      {
        return _messageBoxWrapUpList;
      }
      set
      {
        __isset.messageBoxWrapUpList = true;
        this._messageBoxWrapUpList = value;
      }
    }

    public int TotalSize
    {
      get
      {
        return _totalSize;
      }
      set
      {
        __isset.totalSize = true;
        this._totalSize = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxWrapUpList;
      public bool totalSize;
    }

    public TMessageBoxWrapUpResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                MessageBoxWrapUpList = new List<TMessageBoxWrapUp>();
                TList _list77 = iprot.ReadListBegin();
                for( int _i78 = 0; _i78 < _list77.Count; ++_i78)
                {
                  TMessageBoxWrapUp _elem79 = new TMessageBoxWrapUp();
                  _elem79 = new TMessageBoxWrapUp();
                  _elem79.Read(iprot);
                  MessageBoxWrapUpList.Add(_elem79);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TotalSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TMessageBoxWrapUpResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MessageBoxWrapUpList != null && __isset.messageBoxWrapUpList) {
        field.Name = "messageBoxWrapUpList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MessageBoxWrapUpList.Count));
          foreach (TMessageBoxWrapUp _iter80 in MessageBoxWrapUpList)
          {
            _iter80.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.totalSize) {
        field.Name = "totalSize";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalSize);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TMessageBoxWrapUpResponse(");
      sb.Append("MessageBoxWrapUpList: ");
      sb.Append(MessageBoxWrapUpList);
      sb.Append(",TotalSize: ");
      sb.Append(TotalSize);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
