/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ContactModification : TBase
  {
    private ModificationType _type;
    private string _luid;
    private List<string> _phones;
    private List<string> _emails;
    private List<string> _userids;

    /// <summary>
    /// 
    /// <seealso cref="ModificationType"/>
    /// </summary>
    public ModificationType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string Luid
    {
      get
      {
        return _luid;
      }
      set
      {
        __isset.luid = true;
        this._luid = value;
      }
    }

    public List<string> Phones
    {
      get
      {
        return _phones;
      }
      set
      {
        __isset.phones = true;
        this._phones = value;
      }
    }

    public List<string> Emails
    {
      get
      {
        return _emails;
      }
      set
      {
        __isset.emails = true;
        this._emails = value;
      }
    }

    public List<string> Userids
    {
      get
      {
        return _userids;
      }
      set
      {
        __isset.userids = true;
        this._userids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool luid;
      public bool phones;
      public bool emails;
      public bool userids;
    }

    public ContactModification() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (ModificationType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Luid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                Phones = new List<string>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  string _elem6 = null;
                  _elem6 = iprot.ReadString();
                  Phones.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Emails = new List<string>();
                TList _list7 = iprot.ReadListBegin();
                for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                {
                  string _elem9 = null;
                  _elem9 = iprot.ReadString();
                  Emails.Add(_elem9);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                Userids = new List<string>();
                TList _list10 = iprot.ReadListBegin();
                for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                {
                  string _elem12 = null;
                  _elem12 = iprot.ReadString();
                  Userids.Add(_elem12);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ContactModification");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (Luid != null && __isset.luid) {
        field.Name = "luid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Luid);
        oprot.WriteFieldEnd();
      }
      if (Phones != null && __isset.phones) {
        field.Name = "phones";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Phones.Count));
          foreach (string _iter13 in Phones)
          {
            oprot.WriteString(_iter13);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Emails != null && __isset.emails) {
        field.Name = "emails";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Emails.Count));
          foreach (string _iter14 in Emails)
          {
            oprot.WriteString(_iter14);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Userids != null && __isset.userids) {
        field.Name = "userids";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Userids.Count));
          foreach (string _iter15 in Userids)
          {
            oprot.WriteString(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ContactModification(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",Luid: ");
      sb.Append(Luid);
      sb.Append(",Phones: ");
      sb.Append(Phones);
      sb.Append(",Emails: ");
      sb.Append(Emails);
      sb.Append(",Userids: ");
      sb.Append(Userids);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
