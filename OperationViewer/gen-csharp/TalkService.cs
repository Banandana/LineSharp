/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{
  public partial class TalkService {
    public interface Iface {
      void acceptGroupInvitation(int reqSeq, string groupId);
      #if SILVERLIGHT
      IAsyncResult Begin_acceptGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId);
      void End_acceptGroupInvitation(IAsyncResult asyncResult);
      #endif
      void acceptProximityMatches(string sessionId, THashSet<string> ids);
      #if SILVERLIGHT
      IAsyncResult Begin_acceptProximityMatches(AsyncCallback callback, object state, string sessionId, THashSet<string> ids);
      void End_acceptProximityMatches(IAsyncResult asyncResult);
      #endif
      List<string> acquireCallRoute(string to);
      #if SILVERLIGHT
      IAsyncResult Begin_acquireCallRoute(AsyncCallback callback, object state, string to);
      List<string> End_acquireCallRoute(IAsyncResult asyncResult);
      #endif
      string acquireCallTicket(string to);
      #if SILVERLIGHT
      IAsyncResult Begin_acquireCallTicket(AsyncCallback callback, object state, string to);
      string End_acquireCallTicket(IAsyncResult asyncResult);
      #endif
      string acquireEncryptedAccessToken(FeatureType featureType);
      #if SILVERLIGHT
      IAsyncResult Begin_acquireEncryptedAccessToken(AsyncCallback callback, object state, FeatureType featureType);
      string End_acquireEncryptedAccessToken(IAsyncResult asyncResult);
      #endif
      string addSnsId(SnsIdType snsIdType, string snsAccessToken);
      #if SILVERLIGHT
      IAsyncResult Begin_addSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken);
      string End_addSnsId(IAsyncResult asyncResult);
      #endif
      void blockContact(int reqSeq, string id);
      #if SILVERLIGHT
      IAsyncResult Begin_blockContact(AsyncCallback callback, object state, int reqSeq, string id);
      void End_blockContact(IAsyncResult asyncResult);
      #endif
      void blockRecommendation(int reqSeq, string id);
      #if SILVERLIGHT
      IAsyncResult Begin_blockRecommendation(AsyncCallback callback, object state, int reqSeq, string id);
      void End_blockRecommendation(IAsyncResult asyncResult);
      #endif
      void cancelGroupInvitation(int reqSeq, string groupId, List<string> contactIds);
      #if SILVERLIGHT
      IAsyncResult Begin_cancelGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds);
      void End_cancelGroupInvitation(IAsyncResult asyncResult);
      #endif
      VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method);
      #if SILVERLIGHT
      IAsyncResult Begin_changeVerificationMethod(AsyncCallback callback, object state, string sessionId, VerificationMethod method);
      VerificationSessionData End_changeVerificationMethod(IAsyncResult asyncResult);
      #endif
      void clearIdentityCredential();
      #if SILVERLIGHT
      IAsyncResult Begin_clearIdentityCredential(AsyncCallback callback, object state);
      void End_clearIdentityCredential(IAsyncResult asyncResult);
      #endif
      void clearMessageBox(string channelId, string messageBoxId);
      #if SILVERLIGHT
      IAsyncResult Begin_clearMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId);
      void End_clearMessageBox(IAsyncResult asyncResult);
      #endif
      void closeProximityMatch(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_closeProximityMatch(AsyncCallback callback, object state, string sessionId);
      void End_closeProximityMatch(IAsyncResult asyncResult);
      #endif
      Dictionary<string, string> commitSendMessage(int seq, string messageId, List<string> receiverMids);
      #if SILVERLIGHT
      IAsyncResult Begin_commitSendMessage(AsyncCallback callback, object state, int seq, string messageId, List<string> receiverMids);
      Dictionary<string, string> End_commitSendMessage(IAsyncResult asyncResult);
      #endif
      Dictionary<string, string> commitSendMessages(int seq, List<string> messageIds, List<string> receiverMids);
      #if SILVERLIGHT
      IAsyncResult Begin_commitSendMessages(AsyncCallback callback, object state, int seq, List<string> messageIds, List<string> receiverMids);
      Dictionary<string, string> End_commitSendMessages(IAsyncResult asyncResult);
      #endif
      Dictionary<string, string> commitUpdateProfile(int seq, List<ProfileAttribute> attrs, List<string> receiverMids);
      #if SILVERLIGHT
      IAsyncResult Begin_commitUpdateProfile(AsyncCallback callback, object state, int seq, List<ProfileAttribute> attrs, List<string> receiverMids);
      Dictionary<string, string> End_commitUpdateProfile(IAsyncResult asyncResult);
      #endif
      void confirmEmail(string verifier, string pinCode);
      #if SILVERLIGHT
      IAsyncResult Begin_confirmEmail(AsyncCallback callback, object state, string verifier, string pinCode);
      void End_confirmEmail(IAsyncResult asyncResult);
      #endif
      Group createGroup(int seq, string name, List<string> contactIds);
      #if SILVERLIGHT
      IAsyncResult Begin_createGroup(AsyncCallback callback, object state, int seq, string name, List<string> contactIds);
      Group End_createGroup(IAsyncResult asyncResult);
      #endif
      string createQrcodeBase64Image(string url, string characterSet, int imageSize, int x, int y, int width, int height);
      #if SILVERLIGHT
      IAsyncResult Begin_createQrcodeBase64Image(AsyncCallback callback, object state, string url, string characterSet, int imageSize, int x, int y, int width, int height);
      string End_createQrcodeBase64Image(IAsyncResult asyncResult);
      #endif
      Room createRoom(int reqSeq, List<string> contactIds);
      #if SILVERLIGHT
      IAsyncResult Begin_createRoom(AsyncCallback callback, object state, int reqSeq, List<string> contactIds);
      Room End_createRoom(IAsyncResult asyncResult);
      #endif
      string createSession();
      #if SILVERLIGHT
      IAsyncResult Begin_createSession(AsyncCallback callback, object state);
      string End_createSession(IAsyncResult asyncResult);
      #endif
      List<Announcement> fetchAnnouncements(int lastFetchedIndex);
      #if SILVERLIGHT
      IAsyncResult Begin_fetchAnnouncements(AsyncCallback callback, object state, int lastFetchedIndex);
      List<Announcement> End_fetchAnnouncements(IAsyncResult asyncResult);
      #endif
      List<Message> fetchMessages(long localTs, int count);
      #if SILVERLIGHT
      IAsyncResult Begin_fetchMessages(AsyncCallback callback, object state, long localTs, int count);
      List<Message> End_fetchMessages(IAsyncResult asyncResult);
      #endif
      List<Operation> fetchOperations(long localRev, int count);
      #if SILVERLIGHT
      IAsyncResult Begin_fetchOperations(AsyncCallback callback, object state, long localRev, int count);
      List<Operation> End_fetchOperations(IAsyncResult asyncResult);
      #endif
      List<Operation> fetchOps(long localRev, int count, long globalRev, long individualRev);
      #if SILVERLIGHT
      IAsyncResult Begin_fetchOps(AsyncCallback callback, object state, long localRev, int count, long globalRev, long individualRev);
      List<Operation> End_fetchOps(IAsyncResult asyncResult);
      #endif
      Dictionary<string, Contact> findAndAddContactsByEmail(int reqSeq, THashSet<string> emails);
      #if SILVERLIGHT
      IAsyncResult Begin_findAndAddContactsByEmail(AsyncCallback callback, object state, int reqSeq, THashSet<string> emails);
      Dictionary<string, Contact> End_findAndAddContactsByEmail(IAsyncResult asyncResult);
      #endif
      Dictionary<string, Contact> findAndAddContactsByMid(int reqSeq, string mid);
      #if SILVERLIGHT
      IAsyncResult Begin_findAndAddContactsByMid(AsyncCallback callback, object state, int reqSeq, string mid);
      Dictionary<string, Contact> End_findAndAddContactsByMid(IAsyncResult asyncResult);
      #endif
      Dictionary<string, Contact> findAndAddContactsByPhone(int reqSeq, THashSet<string> phones);
      #if SILVERLIGHT
      IAsyncResult Begin_findAndAddContactsByPhone(AsyncCallback callback, object state, int reqSeq, THashSet<string> phones);
      Dictionary<string, Contact> End_findAndAddContactsByPhone(IAsyncResult asyncResult);
      #endif
      Dictionary<string, Contact> findAndAddContactsByUserid(int reqSeq, string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_findAndAddContactsByUserid(AsyncCallback callback, object state, int reqSeq, string userid);
      Dictionary<string, Contact> End_findAndAddContactsByUserid(IAsyncResult asyncResult);
      #endif
      Contact findContactByUserid(string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_findContactByUserid(AsyncCallback callback, object state, string userid);
      Contact End_findContactByUserid(IAsyncResult asyncResult);
      #endif
      Contact findContactByUserTicket(string ticketId);
      #if SILVERLIGHT
      IAsyncResult Begin_findContactByUserTicket(AsyncCallback callback, object state, string ticketId);
      Contact End_findContactByUserTicket(IAsyncResult asyncResult);
      #endif
      Dictionary<string, Contact> findContactsByEmail(THashSet<string> emails);
      #if SILVERLIGHT
      IAsyncResult Begin_findContactsByEmail(AsyncCallback callback, object state, THashSet<string> emails);
      Dictionary<string, Contact> End_findContactsByEmail(IAsyncResult asyncResult);
      #endif
      Dictionary<string, Contact> findContactsByPhone(THashSet<string> phones);
      #if SILVERLIGHT
      IAsyncResult Begin_findContactsByPhone(AsyncCallback callback, object state, THashSet<string> phones);
      Dictionary<string, Contact> End_findContactsByPhone(IAsyncResult asyncResult);
      #endif
      SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash);
      #if SILVERLIGHT
      IAsyncResult Begin_findSnsIdUserStatus(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string udidHash);
      SnsIdUserStatus End_findSnsIdUserStatus(IAsyncResult asyncResult);
      #endif
      void finishUpdateVerification(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_finishUpdateVerification(AsyncCallback callback, object state, string sessionId);
      void End_finishUpdateVerification(IAsyncResult asyncResult);
      #endif
      Ticket generateUserTicket(long expirationTime, int maxUseCount);
      #if SILVERLIGHT
      IAsyncResult Begin_generateUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount);
      Ticket End_generateUserTicket(IAsyncResult asyncResult);
      #endif
      THashSet<string> getAcceptedProximityMatches(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_getAcceptedProximityMatches(AsyncCallback callback, object state, string sessionId);
      THashSet<string> End_getAcceptedProximityMatches(IAsyncResult asyncResult);
      #endif
      List<string> getActiveBuddySubscriberIds();
      #if SILVERLIGHT
      IAsyncResult Begin_getActiveBuddySubscriberIds(AsyncCallback callback, object state);
      List<string> End_getActiveBuddySubscriberIds(IAsyncResult asyncResult);
      #endif
      List<string> getAllContactIds();
      #if SILVERLIGHT
      IAsyncResult Begin_getAllContactIds(AsyncCallback callback, object state);
      List<string> End_getAllContactIds(IAsyncResult asyncResult);
      #endif
      AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName);
      #if SILVERLIGHT
      IAsyncResult Begin_getAuthQrcode(AsyncCallback callback, object state, bool keepLoggedIn, string systemName);
      AuthQrcode End_getAuthQrcode(IAsyncResult asyncResult);
      #endif
      List<string> getBlockedContactIds();
      #if SILVERLIGHT
      IAsyncResult Begin_getBlockedContactIds(AsyncCallback callback, object state);
      List<string> End_getBlockedContactIds(IAsyncResult asyncResult);
      #endif
      List<string> getBlockedContactIdsByRange(int start, int count);
      #if SILVERLIGHT
      IAsyncResult Begin_getBlockedContactIdsByRange(AsyncCallback callback, object state, int start, int count);
      List<string> End_getBlockedContactIdsByRange(IAsyncResult asyncResult);
      #endif
      List<string> getBlockedRecommendationIds();
      #if SILVERLIGHT
      IAsyncResult Begin_getBlockedRecommendationIds(AsyncCallback callback, object state);
      List<string> End_getBlockedRecommendationIds(IAsyncResult asyncResult);
      #endif
      List<string> getBuddyBlockerIds();
      #if SILVERLIGHT
      IAsyncResult Begin_getBuddyBlockerIds(AsyncCallback callback, object state);
      List<string> End_getBuddyBlockerIds(IAsyncResult asyncResult);
      #endif
      Geolocation getBuddyLocation(string mid, int index);
      #if SILVERLIGHT
      IAsyncResult Begin_getBuddyLocation(AsyncCallback callback, object state, string mid, int index);
      Geolocation End_getBuddyLocation(IAsyncResult asyncResult);
      #endif
      List<CompactContact> getCompactContactsModifiedSince(long timestamp);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompactContactsModifiedSince(AsyncCallback callback, object state, long timestamp);
      List<CompactContact> End_getCompactContactsModifiedSince(IAsyncResult asyncResult);
      #endif
      Group getCompactGroup(string groupId);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompactGroup(AsyncCallback callback, object state, string groupId);
      Group End_getCompactGroup(IAsyncResult asyncResult);
      #endif
      Room getCompactRoom(string roomId);
      #if SILVERLIGHT
      IAsyncResult Begin_getCompactRoom(AsyncCallback callback, object state, string roomId);
      Room End_getCompactRoom(IAsyncResult asyncResult);
      #endif
      Contact getContact(string id);
      #if SILVERLIGHT
      IAsyncResult Begin_getContact(AsyncCallback callback, object state, string id);
      Contact End_getContact(IAsyncResult asyncResult);
      #endif
      List<Contact> getContacts(List<string> ids);
      #if SILVERLIGHT
      IAsyncResult Begin_getContacts(AsyncCallback callback, object state, List<string> ids);
      List<Contact> End_getContacts(IAsyncResult asyncResult);
      #endif
      string getCountryWithRequestIp();
      #if SILVERLIGHT
      IAsyncResult Begin_getCountryWithRequestIp(AsyncCallback callback, object state);
      string End_getCountryWithRequestIp(IAsyncResult asyncResult);
      #endif
      List<string> getFavoriteMids();
      #if SILVERLIGHT
      IAsyncResult Begin_getFavoriteMids(AsyncCallback callback, object state);
      List<string> End_getFavoriteMids(IAsyncResult asyncResult);
      #endif
      Group getGroup(string groupId);
      #if SILVERLIGHT
      IAsyncResult Begin_getGroup(AsyncCallback callback, object state, string groupId);
      Group End_getGroup(IAsyncResult asyncResult);
      #endif
      List<string> getGroupIdsInvited();
      #if SILVERLIGHT
      IAsyncResult Begin_getGroupIdsInvited(AsyncCallback callback, object state);
      List<string> End_getGroupIdsInvited(IAsyncResult asyncResult);
      #endif
      List<string> getGroupIdsJoined();
      #if SILVERLIGHT
      IAsyncResult Begin_getGroupIdsJoined(AsyncCallback callback, object state);
      List<string> End_getGroupIdsJoined(IAsyncResult asyncResult);
      #endif
      List<Group> getGroups(List<string> groupIds);
      #if SILVERLIGHT
      IAsyncResult Begin_getGroups(AsyncCallback callback, object state, List<string> groupIds);
      List<Group> End_getGroups(IAsyncResult asyncResult);
      #endif
      List<string> getHiddenContactMids();
      #if SILVERLIGHT
      IAsyncResult Begin_getHiddenContactMids(AsyncCallback callback, object state);
      List<string> End_getHiddenContactMids(IAsyncResult asyncResult);
      #endif
      string getIdentityIdentifier();
      #if SILVERLIGHT
      IAsyncResult Begin_getIdentityIdentifier(AsyncCallback callback, object state);
      string End_getIdentityIdentifier(IAsyncResult asyncResult);
      #endif
      int getLastAnnouncementIndex();
      #if SILVERLIGHT
      IAsyncResult Begin_getLastAnnouncementIndex(AsyncCallback callback, object state);
      int End_getLastAnnouncementIndex(IAsyncResult asyncResult);
      #endif
      long getLastOpRevision();
      #if SILVERLIGHT
      IAsyncResult Begin_getLastOpRevision(AsyncCallback callback, object state);
      long End_getLastOpRevision(IAsyncResult asyncResult);
      #endif
      TMessageBox getMessageBox(string channelId, string messageBoxId, int lastMessagesCount);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId, int lastMessagesCount);
      TMessageBox End_getMessageBox(IAsyncResult asyncResult);
      #endif
      TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessageBoxCompactWrapUp(AsyncCallback callback, object state, string mid);
      TMessageBoxWrapUp End_getMessageBoxCompactWrapUp(IAsyncResult asyncResult);
      #endif
      TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(int start, int messageBoxCount);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessageBoxCompactWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount);
      TMessageBoxWrapUpResponse End_getMessageBoxCompactWrapUpList(IAsyncResult asyncResult);
      #endif
      List<TMessageBox> getMessageBoxList(string channelId, int lastMessagesCount);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessageBoxList(AsyncCallback callback, object state, string channelId, int lastMessagesCount);
      List<TMessageBox> End_getMessageBoxList(IAsyncResult asyncResult);
      #endif
      List<TMessageBox> getMessageBoxListByStatus(string channelId, int lastMessagesCount, int status);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessageBoxListByStatus(AsyncCallback callback, object state, string channelId, int lastMessagesCount, int status);
      List<TMessageBox> End_getMessageBoxListByStatus(IAsyncResult asyncResult);
      #endif
      TMessageBoxWrapUp getMessageBoxWrapUp(string mid);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessageBoxWrapUp(AsyncCallback callback, object state, string mid);
      TMessageBoxWrapUp End_getMessageBoxWrapUp(IAsyncResult asyncResult);
      #endif
      TMessageBoxWrapUpResponse getMessageBoxWrapUpList(int start, int messageBoxCount);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessageBoxWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount);
      TMessageBoxWrapUpResponse End_getMessageBoxWrapUpList(IAsyncResult asyncResult);
      #endif
      List<Message> getMessagesBySequenceNumber(string channelId, string messageBoxId, long startSeq, long endSeq);
      #if SILVERLIGHT
      IAsyncResult Begin_getMessagesBySequenceNumber(AsyncCallback callback, object state, string channelId, string messageBoxId, long startSeq, long endSeq);
      List<Message> End_getMessagesBySequenceNumber(IAsyncResult asyncResult);
      #endif
      List<Message> getNextMessages(string messageBoxId, long startSeq, int messagesCount);
      #if SILVERLIGHT
      IAsyncResult Begin_getNextMessages(AsyncCallback callback, object state, string messageBoxId, long startSeq, int messagesCount);
      List<Message> End_getNextMessages(IAsyncResult asyncResult);
      #endif
      List<NotificationType> getNotificationPolicy(CarrierCode carrier);
      #if SILVERLIGHT
      IAsyncResult Begin_getNotificationPolicy(AsyncCallback callback, object state, CarrierCode carrier);
      List<NotificationType> End_getNotificationPolicy(IAsyncResult asyncResult);
      #endif
      List<Message> getPreviousMessages(string messageBoxId, long endSeq, int messagesCount);
      #if SILVERLIGHT
      IAsyncResult Begin_getPreviousMessages(AsyncCallback callback, object state, string messageBoxId, long endSeq, int messagesCount);
      List<Message> End_getPreviousMessages(IAsyncResult asyncResult);
      #endif
      Profile getProfile();
      #if SILVERLIGHT
      IAsyncResult Begin_getProfile(AsyncCallback callback, object state);
      Profile End_getProfile(IAsyncResult asyncResult);
      #endif
      ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_getProximityMatchCandidateList(AsyncCallback callback, object state, string sessionId);
      ProximityMatchCandidateResult End_getProximityMatchCandidateList(IAsyncResult asyncResult);
      #endif
      THashSet<Contact> getProximityMatchCandidates(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_getProximityMatchCandidates(AsyncCallback callback, object state, string sessionId);
      THashSet<Contact> End_getProximityMatchCandidates(IAsyncResult asyncResult);
      #endif
      List<Message> getRecentMessages(string messageBoxId, int messagesCount);
      #if SILVERLIGHT
      IAsyncResult Begin_getRecentMessages(AsyncCallback callback, object state, string messageBoxId, int messagesCount);
      List<Message> End_getRecentMessages(IAsyncResult asyncResult);
      #endif
      List<string> getRecommendationIds();
      #if SILVERLIGHT
      IAsyncResult Begin_getRecommendationIds(AsyncCallback callback, object state);
      List<string> End_getRecommendationIds(IAsyncResult asyncResult);
      #endif
      Room getRoom(string roomId);
      #if SILVERLIGHT
      IAsyncResult Begin_getRoom(AsyncCallback callback, object state, string roomId);
      Room End_getRoom(IAsyncResult asyncResult);
      #endif
      RSAKey getRSAKeyInfo(IdentityProvider provider);
      #if SILVERLIGHT
      IAsyncResult Begin_getRSAKeyInfo(AsyncCallback callback, object state, IdentityProvider provider);
      RSAKey End_getRSAKeyInfo(IAsyncResult asyncResult);
      #endif
      long getServerTime();
      #if SILVERLIGHT
      IAsyncResult Begin_getServerTime(AsyncCallback callback, object state);
      long End_getServerTime(IAsyncResult asyncResult);
      #endif
      List<LoginSession> getSessions();
      #if SILVERLIGHT
      IAsyncResult Begin_getSessions(AsyncCallback callback, object state);
      List<LoginSession> End_getSessions(IAsyncResult asyncResult);
      #endif
      Settings getSettings();
      #if SILVERLIGHT
      IAsyncResult Begin_getSettings(AsyncCallback callback, object state);
      Settings End_getSettings(IAsyncResult asyncResult);
      #endif
      Settings getSettingsAttributes(int attrBitset);
      #if SILVERLIGHT
      IAsyncResult Begin_getSettingsAttributes(AsyncCallback callback, object state, int attrBitset);
      Settings End_getSettingsAttributes(IAsyncResult asyncResult);
      #endif
      SystemConfiguration getSystemConfiguration();
      #if SILVERLIGHT
      IAsyncResult Begin_getSystemConfiguration(AsyncCallback callback, object state);
      SystemConfiguration End_getSystemConfiguration(IAsyncResult asyncResult);
      #endif
      Ticket getUserTicket();
      #if SILVERLIGHT
      IAsyncResult Begin_getUserTicket(AsyncCallback callback, object state);
      Ticket End_getUserTicket(IAsyncResult asyncResult);
      #endif
      WapInvitation getWapInvitation(string invitationHash);
      #if SILVERLIGHT
      IAsyncResult Begin_getWapInvitation(AsyncCallback callback, object state, string invitationHash);
      WapInvitation End_getWapInvitation(IAsyncResult asyncResult);
      #endif
      void invalidateUserTicket();
      #if SILVERLIGHT
      IAsyncResult Begin_invalidateUserTicket(AsyncCallback callback, object state);
      void End_invalidateUserTicket(IAsyncResult asyncResult);
      #endif
      void inviteFriendsBySms(List<string> phoneNumberList);
      #if SILVERLIGHT
      IAsyncResult Begin_inviteFriendsBySms(AsyncCallback callback, object state, List<string> phoneNumberList);
      void End_inviteFriendsBySms(IAsyncResult asyncResult);
      #endif
      void inviteIntoGroup(int reqSeq, string groupId, List<string> contactIds);
      #if SILVERLIGHT
      IAsyncResult Begin_inviteIntoGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds);
      void End_inviteIntoGroup(IAsyncResult asyncResult);
      #endif
      void inviteIntoRoom(int reqSeq, string roomId, List<string> contactIds);
      #if SILVERLIGHT
      IAsyncResult Begin_inviteIntoRoom(AsyncCallback callback, object state, int reqSeq, string roomId, List<string> contactIds);
      void End_inviteIntoRoom(IAsyncResult asyncResult);
      #endif
      void inviteViaEmail(int reqSeq, string email, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_inviteViaEmail(AsyncCallback callback, object state, int reqSeq, string email, string name);
      void End_inviteViaEmail(IAsyncResult asyncResult);
      #endif
      bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier);
      #if SILVERLIGHT
      IAsyncResult Begin_isIdentityIdentifierAvailable(AsyncCallback callback, object state, IdentityProvider provider, string identifier);
      bool End_isIdentityIdentifierAvailable(IAsyncResult asyncResult);
      #endif
      bool isUseridAvailable(string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_isUseridAvailable(AsyncCallback callback, object state, string userid);
      bool End_isUseridAvailable(IAsyncResult asyncResult);
      #endif
      void kickoutFromGroup(int reqSeq, string groupId, List<string> contactIds);
      #if SILVERLIGHT
      IAsyncResult Begin_kickoutFromGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds);
      void End_kickoutFromGroup(IAsyncResult asyncResult);
      #endif
      void leaveGroup(int reqSeq, string groupId);
      #if SILVERLIGHT
      IAsyncResult Begin_leaveGroup(AsyncCallback callback, object state, int reqSeq, string groupId);
      void End_leaveGroup(IAsyncResult asyncResult);
      #endif
      void leaveRoom(int reqSeq, string roomId);
      #if SILVERLIGHT
      IAsyncResult Begin_leaveRoom(AsyncCallback callback, object state, int reqSeq, string roomId);
      void End_leaveRoom(IAsyncResult asyncResult);
      #endif
      string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
      #if SILVERLIGHT
      IAsyncResult Begin_loginWithIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
      string End_loginWithIdentityCredential(IAsyncResult asyncResult);
      #endif
      LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
      #if SILVERLIGHT
      IAsyncResult Begin_loginWithIdentityCredentialForCertificate(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
      LoginResult End_loginWithIdentityCredentialForCertificate(IAsyncResult asyncResult);
      #endif
      string loginWithVerifier(string verifier);
      #if SILVERLIGHT
      IAsyncResult Begin_loginWithVerifier(AsyncCallback callback, object state, string verifier);
      string End_loginWithVerifier(IAsyncResult asyncResult);
      #endif
      LoginResult loginWithVerifierForCerificate(string verifier);
      #if SILVERLIGHT
      IAsyncResult Begin_loginWithVerifierForCerificate(AsyncCallback callback, object state, string verifier);
      LoginResult End_loginWithVerifierForCerificate(IAsyncResult asyncResult);
      #endif
      LoginResult loginWithVerifierForCertificate(string verifier);
      #if SILVERLIGHT
      IAsyncResult Begin_loginWithVerifierForCertificate(AsyncCallback callback, object state, string verifier);
      LoginResult End_loginWithVerifierForCertificate(IAsyncResult asyncResult);
      #endif
      void logout();
      #if SILVERLIGHT
      IAsyncResult Begin_logout(AsyncCallback callback, object state);
      void End_logout(IAsyncResult asyncResult);
      #endif
      void logoutSession(string tokenKey);
      #if SILVERLIGHT
      IAsyncResult Begin_logoutSession(AsyncCallback callback, object state, string tokenKey);
      void End_logoutSession(IAsyncResult asyncResult);
      #endif
      void noop();
      #if SILVERLIGHT
      IAsyncResult Begin_noop(AsyncCallback callback, object state);
      void End_noop(IAsyncResult asyncResult);
      #endif
      void notifiedRedirect(Dictionary<string, string> paramMap);
      #if SILVERLIGHT
      IAsyncResult Begin_notifiedRedirect(AsyncCallback callback, object state, Dictionary<string, string> paramMap);
      void End_notifiedRedirect(IAsyncResult asyncResult);
      #endif
      Dictionary<string, string> notifyBuddyOnAir(int seq, List<string> receiverMids);
      #if SILVERLIGHT
      IAsyncResult Begin_notifyBuddyOnAir(AsyncCallback callback, object state, int seq, List<string> receiverMids);
      Dictionary<string, string> End_notifyBuddyOnAir(IAsyncResult asyncResult);
      #endif
      void notifyIndividualEvent(NotificationStatus notificationStatus, List<string> receiverMids);
      #if SILVERLIGHT
      IAsyncResult Begin_notifyIndividualEvent(AsyncCallback callback, object state, NotificationStatus notificationStatus, List<string> receiverMids);
      void End_notifyIndividualEvent(IAsyncResult asyncResult);
      #endif
      void notifyInstalled(string udidHash, string applicationTypeWithExtensions);
      #if SILVERLIGHT
      IAsyncResult Begin_notifyInstalled(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions);
      void End_notifyInstalled(IAsyncResult asyncResult);
      #endif
      void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions);
      #if SILVERLIGHT
      IAsyncResult Begin_notifyRegistrationComplete(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions);
      void End_notifyRegistrationComplete(IAsyncResult asyncResult);
      #endif
      void notifySleep(long lastRev, int badge);
      #if SILVERLIGHT
      IAsyncResult Begin_notifySleep(AsyncCallback callback, object state, long lastRev, int badge);
      void End_notifySleep(IAsyncResult asyncResult);
      #endif
      void notifyUpdated(long lastRev, DeviceInfo deviceInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_notifyUpdated(AsyncCallback callback, object state, long lastRev, DeviceInfo deviceInfo);
      void End_notifyUpdated(IAsyncResult asyncResult);
      #endif
      string openProximityMatch(Location location);
      #if SILVERLIGHT
      IAsyncResult Begin_openProximityMatch(AsyncCallback callback, object state, Location location);
      string End_openProximityMatch(IAsyncResult asyncResult);
      #endif
      string registerBuddyUser(string buddyId, string registrarPassword);
      #if SILVERLIGHT
      IAsyncResult Begin_registerBuddyUser(AsyncCallback callback, object state, string buddyId, string registrarPassword);
      string End_registerBuddyUser(IAsyncResult asyncResult);
      #endif
      void registerBuddyUserid(int seq, string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_registerBuddyUserid(AsyncCallback callback, object state, int seq, string userid);
      void End_registerBuddyUserid(IAsyncResult asyncResult);
      #endif
      string registerDevice(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_registerDevice(AsyncCallback callback, object state, string sessionId);
      string End_registerDevice(IAsyncResult asyncResult);
      #endif
      string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier);
      #if SILVERLIGHT
      IAsyncResult Begin_registerDeviceWithIdentityCredential(AsyncCallback callback, object state, string sessionId, IdentityProvider provider, string identifier, string verifier);
      string End_registerDeviceWithIdentityCredential(IAsyncResult asyncResult);
      #endif
      string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_registerDeviceWithoutPhoneNumber(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo);
      string End_registerDeviceWithoutPhoneNumber(IAsyncResult asyncResult);
      #endif
      string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid);
      #if SILVERLIGHT
      IAsyncResult Begin_registerDeviceWithoutPhoneNumberWithIdentityCredential(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid);
      string End_registerDeviceWithoutPhoneNumberWithIdentityCredential(IAsyncResult asyncResult);
      #endif
      bool registerUserid(int reqSeq, string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_registerUserid(AsyncCallback callback, object state, int reqSeq, string userid);
      bool End_registerUserid(IAsyncResult asyncResult);
      #endif
      string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_registerWapDevice(AsyncCallback callback, object state, string invitationHash, string guidHash, string email, DeviceInfo deviceInfo);
      string End_registerWapDevice(IAsyncResult asyncResult);
      #endif
      string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_registerWithExistingSnsIdAndIdentityCredential(AsyncCallback callback, object state, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
      string End_registerWithExistingSnsIdAndIdentityCredential(IAsyncResult asyncResult);
      #endif
      RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid);
      #if SILVERLIGHT
      IAsyncResult Begin_registerWithSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid);
      RegisterWithSnsIdResult End_registerWithSnsId(IAsyncResult asyncResult);
      #endif
      string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_registerWithSnsIdAndIdentityCredential(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
      string End_registerWithSnsIdAndIdentityCredential(IAsyncResult asyncResult);
      #endif
      string reissueDeviceCredential();
      #if SILVERLIGHT
      IAsyncResult Begin_reissueDeviceCredential(AsyncCallback callback, object state);
      string End_reissueDeviceCredential(IAsyncResult asyncResult);
      #endif
      string reissueUserTicket(long expirationTime, int maxUseCount);
      #if SILVERLIGHT
      IAsyncResult Begin_reissueUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount);
      string End_reissueUserTicket(IAsyncResult asyncResult);
      #endif
      void rejectGroupInvitation(int reqSeq, string groupId);
      #if SILVERLIGHT
      IAsyncResult Begin_rejectGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId);
      void End_rejectGroupInvitation(IAsyncResult asyncResult);
      #endif
      void releaseSession();
      #if SILVERLIGHT
      IAsyncResult Begin_releaseSession(AsyncCallback callback, object state);
      void End_releaseSession(IAsyncResult asyncResult);
      #endif
      void removeAllMessages(int seq, string lastMessageId);
      #if SILVERLIGHT
      IAsyncResult Begin_removeAllMessages(AsyncCallback callback, object state, int seq, string lastMessageId);
      void End_removeAllMessages(IAsyncResult asyncResult);
      #endif
      void removeBuddyLocation(string mid, int index);
      #if SILVERLIGHT
      IAsyncResult Begin_removeBuddyLocation(AsyncCallback callback, object state, string mid, int index);
      void End_removeBuddyLocation(IAsyncResult asyncResult);
      #endif
      bool removeMessage(string messageId);
      #if SILVERLIGHT
      IAsyncResult Begin_removeMessage(AsyncCallback callback, object state, string messageId);
      bool End_removeMessage(IAsyncResult asyncResult);
      #endif
      bool removeMessageFromMyHome(string messageId);
      #if SILVERLIGHT
      IAsyncResult Begin_removeMessageFromMyHome(AsyncCallback callback, object state, string messageId);
      bool End_removeMessageFromMyHome(IAsyncResult asyncResult);
      #endif
      string removeSnsId(SnsIdType snsIdType);
      #if SILVERLIGHT
      IAsyncResult Begin_removeSnsId(AsyncCallback callback, object state, SnsIdType snsIdType);
      string End_removeSnsId(IAsyncResult asyncResult);
      #endif
      void report(long syncOpRevision, SyncCategory category, string report);
      #if SILVERLIGHT
      IAsyncResult Begin_report(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, string report);
      void End_report(IAsyncResult asyncResult);
      #endif
      List<ContactReportResult> reportContacts(long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType);
      #if SILVERLIGHT
      IAsyncResult Begin_reportContacts(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType);
      List<ContactReportResult> End_reportContacts(IAsyncResult asyncResult);
      #endif
      void reportGroups(long syncOpRevision, List<Group> groups);
      #if SILVERLIGHT
      IAsyncResult Begin_reportGroups(AsyncCallback callback, object state, long syncOpRevision, List<Group> groups);
      void End_reportGroups(IAsyncResult asyncResult);
      #endif
      void reportProfile(long syncOpRevision, Profile profile);
      #if SILVERLIGHT
      IAsyncResult Begin_reportProfile(AsyncCallback callback, object state, long syncOpRevision, Profile profile);
      void End_reportProfile(IAsyncResult asyncResult);
      #endif
      void reportRooms(long syncOpRevision, List<Room> rooms);
      #if SILVERLIGHT
      IAsyncResult Begin_reportRooms(AsyncCallback callback, object state, long syncOpRevision, List<Room> rooms);
      void End_reportRooms(IAsyncResult asyncResult);
      #endif
      void reportSettings(long syncOpRevision, Settings settings);
      #if SILVERLIGHT
      IAsyncResult Begin_reportSettings(AsyncCallback callback, object state, long syncOpRevision, Settings settings);
      void End_reportSettings(IAsyncResult asyncResult);
      #endif
      void reportSpammer(string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds);
      #if SILVERLIGHT
      IAsyncResult Begin_reportSpammer(AsyncCallback callback, object state, string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds);
      void End_reportSpammer(IAsyncResult asyncResult);
      #endif
      void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale);
      #if SILVERLIGHT
      IAsyncResult Begin_requestAccountPasswordReset(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string locale);
      void End_requestAccountPasswordReset(IAsyncResult asyncResult);
      #endif
      EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation);
      #if SILVERLIGHT
      IAsyncResult Begin_requestEmailConfirmation(AsyncCallback callback, object state, EmailConfirmation emailConfirmation);
      EmailConfirmationSession End_requestEmailConfirmation(IAsyncResult asyncResult);
      #endif
      void requestIdentityUnbind(IdentityProvider provider, string identifier);
      #if SILVERLIGHT
      IAsyncResult Begin_requestIdentityUnbind(AsyncCallback callback, object state, IdentityProvider provider, string identifier);
      void End_requestIdentityUnbind(IAsyncResult asyncResult);
      #endif
      EmailConfirmationSession resendEmailConfirmation(string verifier);
      #if SILVERLIGHT
      IAsyncResult Begin_resendEmailConfirmation(AsyncCallback callback, object state, string verifier);
      EmailConfirmationSession End_resendEmailConfirmation(IAsyncResult asyncResult);
      #endif
      void resendPinCode(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_resendPinCode(AsyncCallback callback, object state, string sessionId);
      void End_resendPinCode(IAsyncResult asyncResult);
      #endif
      void resendPinCodeBySMS(string sessionId);
      #if SILVERLIGHT
      IAsyncResult Begin_resendPinCodeBySMS(AsyncCallback callback, object state, string sessionId);
      void End_resendPinCodeBySMS(IAsyncResult asyncResult);
      #endif
      void sendChatChecked(int seq, string consumer, string lastMessageId);
      #if SILVERLIGHT
      IAsyncResult Begin_sendChatChecked(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId);
      void End_sendChatChecked(IAsyncResult asyncResult);
      #endif
      void sendChatRemoved(int seq, string consumer, string lastMessageId);
      #if SILVERLIGHT
      IAsyncResult Begin_sendChatRemoved(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId);
      void End_sendChatRemoved(IAsyncResult asyncResult);
      #endif
      Dictionary<string, string> sendContentPreviewUpdated(int esq, string messageId, List<string> receiverMids);
      #if SILVERLIGHT
      IAsyncResult Begin_sendContentPreviewUpdated(AsyncCallback callback, object state, int esq, string messageId, List<string> receiverMids);
      Dictionary<string, string> End_sendContentPreviewUpdated(IAsyncResult asyncResult);
      #endif
      void sendContentReceipt(int seq, string consumer, string messageId);
      #if SILVERLIGHT
      IAsyncResult Begin_sendContentReceipt(AsyncCallback callback, object state, int seq, string consumer, string messageId);
      void End_sendContentReceipt(IAsyncResult asyncResult);
      #endif
      void sendDummyPush();
      #if SILVERLIGHT
      IAsyncResult Begin_sendDummyPush(AsyncCallback callback, object state);
      void End_sendDummyPush(IAsyncResult asyncResult);
      #endif
      Message sendEvent(int seq, Message message);
      #if SILVERLIGHT
      IAsyncResult Begin_sendEvent(AsyncCallback callback, object state, int seq, Message message);
      Message End_sendEvent(IAsyncResult asyncResult);
      #endif
      Message sendMessage(int seq, Message message);
      #if SILVERLIGHT
      IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, int seq, Message message);
      Message End_sendMessage(IAsyncResult asyncResult);
      #endif
      void sendMessageIgnored(int seq, string consumer, List<string> messageIds);
      #if SILVERLIGHT
      IAsyncResult Begin_sendMessageIgnored(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds);
      void End_sendMessageIgnored(IAsyncResult asyncResult);
      #endif
      void sendMessageReceipt(int seq, string consumer, List<string> messageIds);
      #if SILVERLIGHT
      IAsyncResult Begin_sendMessageReceipt(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds);
      void End_sendMessageReceipt(IAsyncResult asyncResult);
      #endif
      Message sendMessageToMyHome(int seq, Message message);
      #if SILVERLIGHT
      IAsyncResult Begin_sendMessageToMyHome(AsyncCallback callback, object state, int seq, Message message);
      Message End_sendMessageToMyHome(IAsyncResult asyncResult);
      #endif
      void setBuddyLocation(string mid, int index, Geolocation location);
      #if SILVERLIGHT
      IAsyncResult Begin_setBuddyLocation(AsyncCallback callback, object state, string mid, int index, Geolocation location);
      void End_setBuddyLocation(IAsyncResult asyncResult);
      #endif
      void setIdentityCredential(IdentityProvider provider, string identifier, string verifier);
      #if SILVERLIGHT
      IAsyncResult Begin_setIdentityCredential(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string verifier);
      void End_setIdentityCredential(IAsyncResult asyncResult);
      #endif
      void setNotificationsEnabled(int reqSeq, MIDType type, string target, bool enablement);
      #if SILVERLIGHT
      IAsyncResult Begin_setNotificationsEnabled(AsyncCallback callback, object state, int reqSeq, MIDType type, string target, bool enablement);
      void End_setNotificationsEnabled(IAsyncResult asyncResult);
      #endif
      VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale);
      #if SILVERLIGHT
      IAsyncResult Begin_startUpdateVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale);
      VerificationSessionData End_startUpdateVerification(IAsyncResult asyncResult);
      #endif
      VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale);
      #if SILVERLIGHT
      IAsyncResult Begin_startVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale);
      VerificationSessionData End_startVerification(IAsyncResult asyncResult);
      #endif
      void storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, string value);
      #if SILVERLIGHT
      IAsyncResult Begin_storeUpdateProfileAttribute(AsyncCallback callback, object state, int seq, ProfileAttribute profileAttribute, string value);
      void End_storeUpdateProfileAttribute(IAsyncResult asyncResult);
      #endif
      List<SnsFriendContactRegistration> syncContactBySnsIds(int reqSeq, List<SnsFriendModification> modifications);
      #if SILVERLIGHT
      IAsyncResult Begin_syncContactBySnsIds(AsyncCallback callback, object state, int reqSeq, List<SnsFriendModification> modifications);
      List<SnsFriendContactRegistration> End_syncContactBySnsIds(IAsyncResult asyncResult);
      #endif
      Dictionary<string, ContactRegistration> syncContacts(int reqSeq, List<ContactModification> localContacts);
      #if SILVERLIGHT
      IAsyncResult Begin_syncContacts(AsyncCallback callback, object state, int reqSeq, List<ContactModification> localContacts);
      Dictionary<string, ContactRegistration> End_syncContacts(IAsyncResult asyncResult);
      #endif
      Message trySendMessage(int seq, Message message);
      #if SILVERLIGHT
      IAsyncResult Begin_trySendMessage(AsyncCallback callback, object state, int seq, Message message);
      Message End_trySendMessage(IAsyncResult asyncResult);
      #endif
      void unblockContact(int reqSeq, string id);
      #if SILVERLIGHT
      IAsyncResult Begin_unblockContact(AsyncCallback callback, object state, int reqSeq, string id);
      void End_unblockContact(IAsyncResult asyncResult);
      #endif
      void unblockRecommendation(int reqSeq, string id);
      #if SILVERLIGHT
      IAsyncResult Begin_unblockRecommendation(AsyncCallback callback, object state, int reqSeq, string id);
      void End_unblockRecommendation(IAsyncResult asyncResult);
      #endif
      string unregisterUserAndDevice();
      #if SILVERLIGHT
      IAsyncResult Begin_unregisterUserAndDevice(AsyncCallback callback, object state);
      string End_unregisterUserAndDevice(IAsyncResult asyncResult);
      #endif
      void updateApnsDeviceToken(byte[] apnsDeviceToken);
      #if SILVERLIGHT
      IAsyncResult Begin_updateApnsDeviceToken(AsyncCallback callback, object state, byte[] apnsDeviceToken);
      void End_updateApnsDeviceToken(IAsyncResult asyncResult);
      #endif
      void updateBuddySetting(string key, string value);
      #if SILVERLIGHT
      IAsyncResult Begin_updateBuddySetting(AsyncCallback callback, object state, string key, string value);
      void End_updateBuddySetting(IAsyncResult asyncResult);
      #endif
      void updateC2DMRegistrationId(string registrationId);
      #if SILVERLIGHT
      IAsyncResult Begin_updateC2DMRegistrationId(AsyncCallback callback, object state, string registrationId);
      void End_updateC2DMRegistrationId(IAsyncResult asyncResult);
      #endif
      void updateContactSetting(int reqSeq, string mid, ContactSetting flag, string value);
      #if SILVERLIGHT
      IAsyncResult Begin_updateContactSetting(AsyncCallback callback, object state, int reqSeq, string mid, ContactSetting flag, string value);
      void End_updateContactSetting(IAsyncResult asyncResult);
      #endif
      void updateCustomModeSettings(CustomMode customMode, Dictionary<string, string> paramMap);
      #if SILVERLIGHT
      IAsyncResult Begin_updateCustomModeSettings(AsyncCallback callback, object state, CustomMode customMode, Dictionary<string, string> paramMap);
      void End_updateCustomModeSettings(IAsyncResult asyncResult);
      #endif
      void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo);
      #if SILVERLIGHT
      IAsyncResult Begin_updateDeviceInfo(AsyncCallback callback, object state, string deviceUid, DeviceInfo deviceInfo);
      void End_updateDeviceInfo(IAsyncResult asyncResult);
      #endif
      void updateGroup(int reqSeq, Group group);
      #if SILVERLIGHT
      IAsyncResult Begin_updateGroup(AsyncCallback callback, object state, int reqSeq, Group group);
      void End_updateGroup(IAsyncResult asyncResult);
      #endif
      void updateNotificationToken(NotificationType type, string token);
      #if SILVERLIGHT
      IAsyncResult Begin_updateNotificationToken(AsyncCallback callback, object state, NotificationType type, string token);
      void End_updateNotificationToken(IAsyncResult asyncResult);
      #endif
      void updateNotificationTokenWithBytes(NotificationType type, byte[] token);
      #if SILVERLIGHT
      IAsyncResult Begin_updateNotificationTokenWithBytes(AsyncCallback callback, object state, NotificationType type, byte[] token);
      void End_updateNotificationTokenWithBytes(IAsyncResult asyncResult);
      #endif
      void updateProfile(int reqSeq, Profile profile);
      #if SILVERLIGHT
      IAsyncResult Begin_updateProfile(AsyncCallback callback, object state, int reqSeq, Profile profile);
      void End_updateProfile(IAsyncResult asyncResult);
      #endif
      void updateProfileAttribute(int reqSeq, ProfileAttribute attr, string value);
      #if SILVERLIGHT
      IAsyncResult Begin_updateProfileAttribute(AsyncCallback callback, object state, int reqSeq, ProfileAttribute attr, string value);
      void End_updateProfileAttribute(IAsyncResult asyncResult);
      #endif
      void updateRegion(string region);
      #if SILVERLIGHT
      IAsyncResult Begin_updateRegion(AsyncCallback callback, object state, string region);
      void End_updateRegion(IAsyncResult asyncResult);
      #endif
      void updateSettings(int reqSeq, Settings settings);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSettings(AsyncCallback callback, object state, int reqSeq, Settings settings);
      void End_updateSettings(IAsyncResult asyncResult);
      #endif
      int updateSettings2(int reqSeq, Settings settings);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSettings2(AsyncCallback callback, object state, int reqSeq, Settings settings);
      int End_updateSettings2(IAsyncResult asyncResult);
      #endif
      void updateSettingsAttribute(int reqSeq, SettingsAttribute attr, string value);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSettingsAttribute(AsyncCallback callback, object state, int reqSeq, SettingsAttribute attr, string value);
      void End_updateSettingsAttribute(IAsyncResult asyncResult);
      #endif
      int updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSettingsAttributes(AsyncCallback callback, object state, int reqSeq, int attrBitset, Settings settings);
      int End_updateSettingsAttributes(IAsyncResult asyncResult);
      #endif
      void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password);
      #if SILVERLIGHT
      IAsyncResult Begin_verifyIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password);
      void End_verifyIdentityCredential(IAsyncResult asyncResult);
      #endif
      UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential);
      #if SILVERLIGHT
      IAsyncResult Begin_verifyIdentityCredentialWithResult(AsyncCallback callback, object state, IdentityCredential identityCredential);
      UserAuthStatus End_verifyIdentityCredentialWithResult(IAsyncResult asyncResult);
      #endif
      VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash);
      #if SILVERLIGHT
      IAsyncResult Begin_verifyPhone(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash);
      VerificationResult End_verifyPhone(IAsyncResult asyncResult);
      #endif
      string verifyQrcode(string verifier, string pinCode);
      #if SILVERLIGHT
      IAsyncResult Begin_verifyQrcode(AsyncCallback callback, object state, string verifier, string pinCode);
      string End_verifyQrcode(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_acceptGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
      {
        return send_acceptGroupInvitation(callback, state, reqSeq, groupId);
      }

      public void End_acceptGroupInvitation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_acceptGroupInvitation();
      }

      #endif

      public void acceptGroupInvitation(int reqSeq, string groupId)
      {
        #if !SILVERLIGHT
        send_acceptGroupInvitation(reqSeq, groupId);
        recv_acceptGroupInvitation();

        #else
        var asyncResult = Begin_acceptGroupInvitation(null, null, reqSeq, groupId);
        End_acceptGroupInvitation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acceptGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
      #else
      public void send_acceptGroupInvitation(int reqSeq, string groupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.Call, seqid_));
        acceptGroupInvitation_args args = new acceptGroupInvitation_args();
        args.ReqSeq = reqSeq;
        args.GroupId = groupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_acceptGroupInvitation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acceptGroupInvitation_result result = new acceptGroupInvitation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_acceptProximityMatches(AsyncCallback callback, object state, string sessionId, THashSet<string> ids)
      {
        return send_acceptProximityMatches(callback, state, sessionId, ids);
      }

      public void End_acceptProximityMatches(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_acceptProximityMatches();
      }

      #endif

      public void acceptProximityMatches(string sessionId, THashSet<string> ids)
      {
        #if !SILVERLIGHT
        send_acceptProximityMatches(sessionId, ids);
        recv_acceptProximityMatches();

        #else
        var asyncResult = Begin_acceptProximityMatches(null, null, sessionId, ids);
        End_acceptProximityMatches(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acceptProximityMatches(AsyncCallback callback, object state, string sessionId, THashSet<string> ids)
      #else
      public void send_acceptProximityMatches(string sessionId, THashSet<string> ids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acceptProximityMatches", TMessageType.Call, seqid_));
        acceptProximityMatches_args args = new acceptProximityMatches_args();
        args.SessionId = sessionId;
        args.Ids = ids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_acceptProximityMatches()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acceptProximityMatches_result result = new acceptProximityMatches_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_acquireCallRoute(AsyncCallback callback, object state, string to)
      {
        return send_acquireCallRoute(callback, state, to);
      }

      public List<string> End_acquireCallRoute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_acquireCallRoute();
      }

      #endif

      public List<string> acquireCallRoute(string to)
      {
        #if !SILVERLIGHT
        send_acquireCallRoute(to);
        return recv_acquireCallRoute();

        #else
        var asyncResult = Begin_acquireCallRoute(null, null, to);
        return End_acquireCallRoute(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acquireCallRoute(AsyncCallback callback, object state, string to)
      #else
      public void send_acquireCallRoute(string to)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acquireCallRoute", TMessageType.Call, seqid_));
        acquireCallRoute_args args = new acquireCallRoute_args();
        args.To = to;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_acquireCallRoute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acquireCallRoute_result result = new acquireCallRoute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireCallRoute failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_acquireCallTicket(AsyncCallback callback, object state, string to)
      {
        return send_acquireCallTicket(callback, state, to);
      }

      public string End_acquireCallTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_acquireCallTicket();
      }

      #endif

      public string acquireCallTicket(string to)
      {
        #if !SILVERLIGHT
        send_acquireCallTicket(to);
        return recv_acquireCallTicket();

        #else
        var asyncResult = Begin_acquireCallTicket(null, null, to);
        return End_acquireCallTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acquireCallTicket(AsyncCallback callback, object state, string to)
      #else
      public void send_acquireCallTicket(string to)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acquireCallTicket", TMessageType.Call, seqid_));
        acquireCallTicket_args args = new acquireCallTicket_args();
        args.To = to;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_acquireCallTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acquireCallTicket_result result = new acquireCallTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireCallTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_acquireEncryptedAccessToken(AsyncCallback callback, object state, FeatureType featureType)
      {
        return send_acquireEncryptedAccessToken(callback, state, featureType);
      }

      public string End_acquireEncryptedAccessToken(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_acquireEncryptedAccessToken();
      }

      #endif

      public string acquireEncryptedAccessToken(FeatureType featureType)
      {
        #if !SILVERLIGHT
        send_acquireEncryptedAccessToken(featureType);
        return recv_acquireEncryptedAccessToken();

        #else
        var asyncResult = Begin_acquireEncryptedAccessToken(null, null, featureType);
        return End_acquireEncryptedAccessToken(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_acquireEncryptedAccessToken(AsyncCallback callback, object state, FeatureType featureType)
      #else
      public void send_acquireEncryptedAccessToken(FeatureType featureType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.Call, seqid_));
        acquireEncryptedAccessToken_args args = new acquireEncryptedAccessToken_args();
        args.FeatureType = featureType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_acquireEncryptedAccessToken()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        acquireEncryptedAccessToken_result result = new acquireEncryptedAccessToken_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireEncryptedAccessToken failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken)
      {
        return send_addSnsId(callback, state, snsIdType, snsAccessToken);
      }

      public string End_addSnsId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_addSnsId();
      }

      #endif

      public string addSnsId(SnsIdType snsIdType, string snsAccessToken)
      {
        #if !SILVERLIGHT
        send_addSnsId(snsIdType, snsAccessToken);
        return recv_addSnsId();

        #else
        var asyncResult = Begin_addSnsId(null, null, snsIdType, snsAccessToken);
        return End_addSnsId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken)
      #else
      public void send_addSnsId(SnsIdType snsIdType, string snsAccessToken)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addSnsId", TMessageType.Call, seqid_));
        addSnsId_args args = new addSnsId_args();
        args.SnsIdType = snsIdType;
        args.SnsAccessToken = snsAccessToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_addSnsId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addSnsId_result result = new addSnsId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addSnsId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_blockContact(AsyncCallback callback, object state, int reqSeq, string id)
      {
        return send_blockContact(callback, state, reqSeq, id);
      }

      public void End_blockContact(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_blockContact();
      }

      #endif

      public void blockContact(int reqSeq, string id)
      {
        #if !SILVERLIGHT
        send_blockContact(reqSeq, id);
        recv_blockContact();

        #else
        var asyncResult = Begin_blockContact(null, null, reqSeq, id);
        End_blockContact(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_blockContact(AsyncCallback callback, object state, int reqSeq, string id)
      #else
      public void send_blockContact(int reqSeq, string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("blockContact", TMessageType.Call, seqid_));
        blockContact_args args = new blockContact_args();
        args.ReqSeq = reqSeq;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_blockContact()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        blockContact_result result = new blockContact_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_blockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
      {
        return send_blockRecommendation(callback, state, reqSeq, id);
      }

      public void End_blockRecommendation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_blockRecommendation();
      }

      #endif

      public void blockRecommendation(int reqSeq, string id)
      {
        #if !SILVERLIGHT
        send_blockRecommendation(reqSeq, id);
        recv_blockRecommendation();

        #else
        var asyncResult = Begin_blockRecommendation(null, null, reqSeq, id);
        End_blockRecommendation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_blockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
      #else
      public void send_blockRecommendation(int reqSeq, string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("blockRecommendation", TMessageType.Call, seqid_));
        blockRecommendation_args args = new blockRecommendation_args();
        args.ReqSeq = reqSeq;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_blockRecommendation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        blockRecommendation_result result = new blockRecommendation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancelGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
      {
        return send_cancelGroupInvitation(callback, state, reqSeq, groupId, contactIds);
      }

      public void End_cancelGroupInvitation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cancelGroupInvitation();
      }

      #endif

      public void cancelGroupInvitation(int reqSeq, string groupId, List<string> contactIds)
      {
        #if !SILVERLIGHT
        send_cancelGroupInvitation(reqSeq, groupId, contactIds);
        recv_cancelGroupInvitation();

        #else
        var asyncResult = Begin_cancelGroupInvitation(null, null, reqSeq, groupId, contactIds);
        End_cancelGroupInvitation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancelGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
      #else
      public void send_cancelGroupInvitation(int reqSeq, string groupId, List<string> contactIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.Call, seqid_));
        cancelGroupInvitation_args args = new cancelGroupInvitation_args();
        args.ReqSeq = reqSeq;
        args.GroupId = groupId;
        args.ContactIds = contactIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_cancelGroupInvitation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancelGroupInvitation_result result = new cancelGroupInvitation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changeVerificationMethod(AsyncCallback callback, object state, string sessionId, VerificationMethod method)
      {
        return send_changeVerificationMethod(callback, state, sessionId, method);
      }

      public VerificationSessionData End_changeVerificationMethod(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_changeVerificationMethod();
      }

      #endif

      public VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)
      {
        #if !SILVERLIGHT
        send_changeVerificationMethod(sessionId, method);
        return recv_changeVerificationMethod();

        #else
        var asyncResult = Begin_changeVerificationMethod(null, null, sessionId, method);
        return End_changeVerificationMethod(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changeVerificationMethod(AsyncCallback callback, object state, string sessionId, VerificationMethod method)
      #else
      public void send_changeVerificationMethod(string sessionId, VerificationMethod method)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changeVerificationMethod", TMessageType.Call, seqid_));
        changeVerificationMethod_args args = new changeVerificationMethod_args();
        args.SessionId = sessionId;
        args.Method = method;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public VerificationSessionData recv_changeVerificationMethod()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changeVerificationMethod_result result = new changeVerificationMethod_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changeVerificationMethod failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearIdentityCredential(AsyncCallback callback, object state)
      {
        return send_clearIdentityCredential(callback, state);
      }

      public void End_clearIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearIdentityCredential();
      }

      #endif

      public void clearIdentityCredential()
      {
        #if !SILVERLIGHT
        send_clearIdentityCredential();
        recv_clearIdentityCredential();

        #else
        var asyncResult = Begin_clearIdentityCredential(null, null);
        End_clearIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearIdentityCredential(AsyncCallback callback, object state)
      #else
      public void send_clearIdentityCredential()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearIdentityCredential", TMessageType.Call, seqid_));
        clearIdentityCredential_args args = new clearIdentityCredential_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearIdentityCredential_result result = new clearIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId)
      {
        return send_clearMessageBox(callback, state, channelId, messageBoxId);
      }

      public void End_clearMessageBox(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearMessageBox();
      }

      #endif

      public void clearMessageBox(string channelId, string messageBoxId)
      {
        #if !SILVERLIGHT
        send_clearMessageBox(channelId, messageBoxId);
        recv_clearMessageBox();

        #else
        var asyncResult = Begin_clearMessageBox(null, null, channelId, messageBoxId);
        End_clearMessageBox(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId)
      #else
      public void send_clearMessageBox(string channelId, string messageBoxId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearMessageBox", TMessageType.Call, seqid_));
        clearMessageBox_args args = new clearMessageBox_args();
        args.ChannelId = channelId;
        args.MessageBoxId = messageBoxId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearMessageBox()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearMessageBox_result result = new clearMessageBox_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_closeProximityMatch(AsyncCallback callback, object state, string sessionId)
      {
        return send_closeProximityMatch(callback, state, sessionId);
      }

      public void End_closeProximityMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_closeProximityMatch();
      }

      #endif

      public void closeProximityMatch(string sessionId)
      {
        #if !SILVERLIGHT
        send_closeProximityMatch(sessionId);
        recv_closeProximityMatch();

        #else
        var asyncResult = Begin_closeProximityMatch(null, null, sessionId);
        End_closeProximityMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_closeProximityMatch(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_closeProximityMatch(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("closeProximityMatch", TMessageType.Call, seqid_));
        closeProximityMatch_args args = new closeProximityMatch_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_closeProximityMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        closeProximityMatch_result result = new closeProximityMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_commitSendMessage(AsyncCallback callback, object state, int seq, string messageId, List<string> receiverMids)
      {
        return send_commitSendMessage(callback, state, seq, messageId, receiverMids);
      }

      public Dictionary<string, string> End_commitSendMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_commitSendMessage();
      }

      #endif

      public Dictionary<string, string> commitSendMessage(int seq, string messageId, List<string> receiverMids)
      {
        #if !SILVERLIGHT
        send_commitSendMessage(seq, messageId, receiverMids);
        return recv_commitSendMessage();

        #else
        var asyncResult = Begin_commitSendMessage(null, null, seq, messageId, receiverMids);
        return End_commitSendMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_commitSendMessage(AsyncCallback callback, object state, int seq, string messageId, List<string> receiverMids)
      #else
      public void send_commitSendMessage(int seq, string messageId, List<string> receiverMids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("commitSendMessage", TMessageType.Call, seqid_));
        commitSendMessage_args args = new commitSendMessage_args();
        args.Seq = seq;
        args.MessageId = messageId;
        args.ReceiverMids = receiverMids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_commitSendMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        commitSendMessage_result result = new commitSendMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitSendMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_commitSendMessages(AsyncCallback callback, object state, int seq, List<string> messageIds, List<string> receiverMids)
      {
        return send_commitSendMessages(callback, state, seq, messageIds, receiverMids);
      }

      public Dictionary<string, string> End_commitSendMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_commitSendMessages();
      }

      #endif

      public Dictionary<string, string> commitSendMessages(int seq, List<string> messageIds, List<string> receiverMids)
      {
        #if !SILVERLIGHT
        send_commitSendMessages(seq, messageIds, receiverMids);
        return recv_commitSendMessages();

        #else
        var asyncResult = Begin_commitSendMessages(null, null, seq, messageIds, receiverMids);
        return End_commitSendMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_commitSendMessages(AsyncCallback callback, object state, int seq, List<string> messageIds, List<string> receiverMids)
      #else
      public void send_commitSendMessages(int seq, List<string> messageIds, List<string> receiverMids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("commitSendMessages", TMessageType.Call, seqid_));
        commitSendMessages_args args = new commitSendMessages_args();
        args.Seq = seq;
        args.MessageIds = messageIds;
        args.ReceiverMids = receiverMids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_commitSendMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        commitSendMessages_result result = new commitSendMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitSendMessages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_commitUpdateProfile(AsyncCallback callback, object state, int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
      {
        return send_commitUpdateProfile(callback, state, seq, attrs, receiverMids);
      }

      public Dictionary<string, string> End_commitUpdateProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_commitUpdateProfile();
      }

      #endif

      public Dictionary<string, string> commitUpdateProfile(int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
      {
        #if !SILVERLIGHT
        send_commitUpdateProfile(seq, attrs, receiverMids);
        return recv_commitUpdateProfile();

        #else
        var asyncResult = Begin_commitUpdateProfile(null, null, seq, attrs, receiverMids);
        return End_commitUpdateProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_commitUpdateProfile(AsyncCallback callback, object state, int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
      #else
      public void send_commitUpdateProfile(int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("commitUpdateProfile", TMessageType.Call, seqid_));
        commitUpdateProfile_args args = new commitUpdateProfile_args();
        args.Seq = seq;
        args.Attrs = attrs;
        args.ReceiverMids = receiverMids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_commitUpdateProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        commitUpdateProfile_result result = new commitUpdateProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitUpdateProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_confirmEmail(AsyncCallback callback, object state, string verifier, string pinCode)
      {
        return send_confirmEmail(callback, state, verifier, pinCode);
      }

      public void End_confirmEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_confirmEmail();
      }

      #endif

      public void confirmEmail(string verifier, string pinCode)
      {
        #if !SILVERLIGHT
        send_confirmEmail(verifier, pinCode);
        recv_confirmEmail();

        #else
        var asyncResult = Begin_confirmEmail(null, null, verifier, pinCode);
        End_confirmEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_confirmEmail(AsyncCallback callback, object state, string verifier, string pinCode)
      #else
      public void send_confirmEmail(string verifier, string pinCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("confirmEmail", TMessageType.Call, seqid_));
        confirmEmail_args args = new confirmEmail_args();
        args.Verifier = verifier;
        args.PinCode = pinCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_confirmEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        confirmEmail_result result = new confirmEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createGroup(AsyncCallback callback, object state, int seq, string name, List<string> contactIds)
      {
        return send_createGroup(callback, state, seq, name, contactIds);
      }

      public Group End_createGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createGroup();
      }

      #endif

      public Group createGroup(int seq, string name, List<string> contactIds)
      {
        #if !SILVERLIGHT
        send_createGroup(seq, name, contactIds);
        return recv_createGroup();

        #else
        var asyncResult = Begin_createGroup(null, null, seq, name, contactIds);
        return End_createGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createGroup(AsyncCallback callback, object state, int seq, string name, List<string> contactIds)
      #else
      public void send_createGroup(int seq, string name, List<string> contactIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createGroup", TMessageType.Call, seqid_));
        createGroup_args args = new createGroup_args();
        args.Seq = seq;
        args.Name = name;
        args.ContactIds = contactIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Group recv_createGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createGroup_result result = new createGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createQrcodeBase64Image(AsyncCallback callback, object state, string url, string characterSet, int imageSize, int x, int y, int width, int height)
      {
        return send_createQrcodeBase64Image(callback, state, url, characterSet, imageSize, x, y, width, height);
      }

      public string End_createQrcodeBase64Image(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createQrcodeBase64Image();
      }

      #endif

      public string createQrcodeBase64Image(string url, string characterSet, int imageSize, int x, int y, int width, int height)
      {
        #if !SILVERLIGHT
        send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height);
        return recv_createQrcodeBase64Image();

        #else
        var asyncResult = Begin_createQrcodeBase64Image(null, null, url, characterSet, imageSize, x, y, width, height);
        return End_createQrcodeBase64Image(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createQrcodeBase64Image(AsyncCallback callback, object state, string url, string characterSet, int imageSize, int x, int y, int width, int height)
      #else
      public void send_createQrcodeBase64Image(string url, string characterSet, int imageSize, int x, int y, int width, int height)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.Call, seqid_));
        createQrcodeBase64Image_args args = new createQrcodeBase64Image_args();
        args.Url = url;
        args.CharacterSet = characterSet;
        args.ImageSize = imageSize;
        args.X = x;
        args.Y = y;
        args.Width = width;
        args.Height = height;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createQrcodeBase64Image()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createQrcodeBase64Image_result result = new createQrcodeBase64Image_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createQrcodeBase64Image failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createRoom(AsyncCallback callback, object state, int reqSeq, List<string> contactIds)
      {
        return send_createRoom(callback, state, reqSeq, contactIds);
      }

      public Room End_createRoom(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createRoom();
      }

      #endif

      public Room createRoom(int reqSeq, List<string> contactIds)
      {
        #if !SILVERLIGHT
        send_createRoom(reqSeq, contactIds);
        return recv_createRoom();

        #else
        var asyncResult = Begin_createRoom(null, null, reqSeq, contactIds);
        return End_createRoom(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createRoom(AsyncCallback callback, object state, int reqSeq, List<string> contactIds)
      #else
      public void send_createRoom(int reqSeq, List<string> contactIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createRoom", TMessageType.Call, seqid_));
        createRoom_args args = new createRoom_args();
        args.ReqSeq = reqSeq;
        args.ContactIds = contactIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Room recv_createRoom()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createRoom_result result = new createRoom_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createRoom failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createSession(AsyncCallback callback, object state)
      {
        return send_createSession(callback, state);
      }

      public string End_createSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createSession();
      }

      #endif

      public string createSession()
      {
        #if !SILVERLIGHT
        send_createSession();
        return recv_createSession();

        #else
        var asyncResult = Begin_createSession(null, null);
        return End_createSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createSession(AsyncCallback callback, object state)
      #else
      public void send_createSession()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createSession", TMessageType.Call, seqid_));
        createSession_args args = new createSession_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createSession_result result = new createSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_fetchAnnouncements(AsyncCallback callback, object state, int lastFetchedIndex)
      {
        return send_fetchAnnouncements(callback, state, lastFetchedIndex);
      }

      public List<Announcement> End_fetchAnnouncements(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchAnnouncements();
      }

      #endif

      public List<Announcement> fetchAnnouncements(int lastFetchedIndex)
      {
        #if !SILVERLIGHT
        send_fetchAnnouncements(lastFetchedIndex);
        return recv_fetchAnnouncements();

        #else
        var asyncResult = Begin_fetchAnnouncements(null, null, lastFetchedIndex);
        return End_fetchAnnouncements(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fetchAnnouncements(AsyncCallback callback, object state, int lastFetchedIndex)
      #else
      public void send_fetchAnnouncements(int lastFetchedIndex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("fetchAnnouncements", TMessageType.Call, seqid_));
        fetchAnnouncements_args args = new fetchAnnouncements_args();
        args.LastFetchedIndex = lastFetchedIndex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Announcement> recv_fetchAnnouncements()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fetchAnnouncements_result result = new fetchAnnouncements_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchAnnouncements failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_fetchMessages(AsyncCallback callback, object state, long localTs, int count)
      {
        return send_fetchMessages(callback, state, localTs, count);
      }

      public List<Message> End_fetchMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchMessages();
      }

      #endif

      public List<Message> fetchMessages(long localTs, int count)
      {
        #if !SILVERLIGHT
        send_fetchMessages(localTs, count);
        return recv_fetchMessages();

        #else
        var asyncResult = Begin_fetchMessages(null, null, localTs, count);
        return End_fetchMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fetchMessages(AsyncCallback callback, object state, long localTs, int count)
      #else
      public void send_fetchMessages(long localTs, int count)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("fetchMessages", TMessageType.Call, seqid_));
        fetchMessages_args args = new fetchMessages_args();
        args.LocalTs = localTs;
        args.Count = count;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Message> recv_fetchMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fetchMessages_result result = new fetchMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchMessages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_fetchOperations(AsyncCallback callback, object state, long localRev, int count)
      {
        return send_fetchOperations(callback, state, localRev, count);
      }

      public List<Operation> End_fetchOperations(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchOperations();
      }

      #endif

      public List<Operation> fetchOperations(long localRev, int count)
      {
        #if !SILVERLIGHT
        send_fetchOperations(localRev, count);
        return recv_fetchOperations();

        #else
        var asyncResult = Begin_fetchOperations(null, null, localRev, count);
        return End_fetchOperations(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fetchOperations(AsyncCallback callback, object state, long localRev, int count)
      #else
      public void send_fetchOperations(long localRev, int count)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("fetchOperations", TMessageType.Call, seqid_));
        fetchOperations_args args = new fetchOperations_args();
        args.LocalRev = localRev;
        args.Count = count;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Operation> recv_fetchOperations()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fetchOperations_result result = new fetchOperations_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchOperations failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_fetchOps(AsyncCallback callback, object state, long localRev, int count, long globalRev, long individualRev)
      {
        return send_fetchOps(callback, state, localRev, count, globalRev, individualRev);
      }

      public List<Operation> End_fetchOps(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetchOps();
      }

      #endif

      public List<Operation> fetchOps(long localRev, int count, long globalRev, long individualRev)
      {
        #if !SILVERLIGHT
        send_fetchOps(localRev, count, globalRev, individualRev);
        return recv_fetchOps();

        #else
        var asyncResult = Begin_fetchOps(null, null, localRev, count, globalRev, individualRev);
        return End_fetchOps(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fetchOps(AsyncCallback callback, object state, long localRev, int count, long globalRev, long individualRev)
      #else
      public void send_fetchOps(long localRev, int count, long globalRev, long individualRev)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("fetchOps", TMessageType.Call, seqid_));
        fetchOps_args args = new fetchOps_args();
        args.LocalRev = localRev;
        args.Count = count;
        args.GlobalRev = globalRev;
        args.IndividualRev = individualRev;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Operation> recv_fetchOps()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fetchOps_result result = new fetchOps_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchOps failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findAndAddContactsByEmail(AsyncCallback callback, object state, int reqSeq, THashSet<string> emails)
      {
        return send_findAndAddContactsByEmail(callback, state, reqSeq, emails);
      }

      public Dictionary<string, Contact> End_findAndAddContactsByEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findAndAddContactsByEmail();
      }

      #endif

      public Dictionary<string, Contact> findAndAddContactsByEmail(int reqSeq, THashSet<string> emails)
      {
        #if !SILVERLIGHT
        send_findAndAddContactsByEmail(reqSeq, emails);
        return recv_findAndAddContactsByEmail();

        #else
        var asyncResult = Begin_findAndAddContactsByEmail(null, null, reqSeq, emails);
        return End_findAndAddContactsByEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findAndAddContactsByEmail(AsyncCallback callback, object state, int reqSeq, THashSet<string> emails)
      #else
      public void send_findAndAddContactsByEmail(int reqSeq, THashSet<string> emails)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.Call, seqid_));
        findAndAddContactsByEmail_args args = new findAndAddContactsByEmail_args();
        args.ReqSeq = reqSeq;
        args.Emails = emails;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Contact> recv_findAndAddContactsByEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAndAddContactsByEmail_result result = new findAndAddContactsByEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findAndAddContactsByMid(AsyncCallback callback, object state, int reqSeq, string mid)
      {
        return send_findAndAddContactsByMid(callback, state, reqSeq, mid);
      }

      public Dictionary<string, Contact> End_findAndAddContactsByMid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findAndAddContactsByMid();
      }

      #endif

      public Dictionary<string, Contact> findAndAddContactsByMid(int reqSeq, string mid)
      {
        #if !SILVERLIGHT
        send_findAndAddContactsByMid(reqSeq, mid);
        return recv_findAndAddContactsByMid();

        #else
        var asyncResult = Begin_findAndAddContactsByMid(null, null, reqSeq, mid);
        return End_findAndAddContactsByMid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findAndAddContactsByMid(AsyncCallback callback, object state, int reqSeq, string mid)
      #else
      public void send_findAndAddContactsByMid(int reqSeq, string mid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.Call, seqid_));
        findAndAddContactsByMid_args args = new findAndAddContactsByMid_args();
        args.ReqSeq = reqSeq;
        args.Mid = mid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Contact> recv_findAndAddContactsByMid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAndAddContactsByMid_result result = new findAndAddContactsByMid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByMid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findAndAddContactsByPhone(AsyncCallback callback, object state, int reqSeq, THashSet<string> phones)
      {
        return send_findAndAddContactsByPhone(callback, state, reqSeq, phones);
      }

      public Dictionary<string, Contact> End_findAndAddContactsByPhone(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findAndAddContactsByPhone();
      }

      #endif

      public Dictionary<string, Contact> findAndAddContactsByPhone(int reqSeq, THashSet<string> phones)
      {
        #if !SILVERLIGHT
        send_findAndAddContactsByPhone(reqSeq, phones);
        return recv_findAndAddContactsByPhone();

        #else
        var asyncResult = Begin_findAndAddContactsByPhone(null, null, reqSeq, phones);
        return End_findAndAddContactsByPhone(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findAndAddContactsByPhone(AsyncCallback callback, object state, int reqSeq, THashSet<string> phones)
      #else
      public void send_findAndAddContactsByPhone(int reqSeq, THashSet<string> phones)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.Call, seqid_));
        findAndAddContactsByPhone_args args = new findAndAddContactsByPhone_args();
        args.ReqSeq = reqSeq;
        args.Phones = phones;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Contact> recv_findAndAddContactsByPhone()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAndAddContactsByPhone_result result = new findAndAddContactsByPhone_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByPhone failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findAndAddContactsByUserid(AsyncCallback callback, object state, int reqSeq, string userid)
      {
        return send_findAndAddContactsByUserid(callback, state, reqSeq, userid);
      }

      public Dictionary<string, Contact> End_findAndAddContactsByUserid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findAndAddContactsByUserid();
      }

      #endif

      public Dictionary<string, Contact> findAndAddContactsByUserid(int reqSeq, string userid)
      {
        #if !SILVERLIGHT
        send_findAndAddContactsByUserid(reqSeq, userid);
        return recv_findAndAddContactsByUserid();

        #else
        var asyncResult = Begin_findAndAddContactsByUserid(null, null, reqSeq, userid);
        return End_findAndAddContactsByUserid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findAndAddContactsByUserid(AsyncCallback callback, object state, int reqSeq, string userid)
      #else
      public void send_findAndAddContactsByUserid(int reqSeq, string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.Call, seqid_));
        findAndAddContactsByUserid_args args = new findAndAddContactsByUserid_args();
        args.ReqSeq = reqSeq;
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Contact> recv_findAndAddContactsByUserid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findAndAddContactsByUserid_result result = new findAndAddContactsByUserid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByUserid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findContactByUserid(AsyncCallback callback, object state, string userid)
      {
        return send_findContactByUserid(callback, state, userid);
      }

      public Contact End_findContactByUserid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findContactByUserid();
      }

      #endif

      public Contact findContactByUserid(string userid)
      {
        #if !SILVERLIGHT
        send_findContactByUserid(userid);
        return recv_findContactByUserid();

        #else
        var asyncResult = Begin_findContactByUserid(null, null, userid);
        return End_findContactByUserid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findContactByUserid(AsyncCallback callback, object state, string userid)
      #else
      public void send_findContactByUserid(string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findContactByUserid", TMessageType.Call, seqid_));
        findContactByUserid_args args = new findContactByUserid_args();
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Contact recv_findContactByUserid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findContactByUserid_result result = new findContactByUserid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactByUserid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findContactByUserTicket(AsyncCallback callback, object state, string ticketId)
      {
        return send_findContactByUserTicket(callback, state, ticketId);
      }

      public Contact End_findContactByUserTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findContactByUserTicket();
      }

      #endif

      public Contact findContactByUserTicket(string ticketId)
      {
        #if !SILVERLIGHT
        send_findContactByUserTicket(ticketId);
        return recv_findContactByUserTicket();

        #else
        var asyncResult = Begin_findContactByUserTicket(null, null, ticketId);
        return End_findContactByUserTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findContactByUserTicket(AsyncCallback callback, object state, string ticketId)
      #else
      public void send_findContactByUserTicket(string ticketId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findContactByUserTicket", TMessageType.Call, seqid_));
        findContactByUserTicket_args args = new findContactByUserTicket_args();
        args.TicketId = ticketId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Contact recv_findContactByUserTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findContactByUserTicket_result result = new findContactByUserTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactByUserTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findContactsByEmail(AsyncCallback callback, object state, THashSet<string> emails)
      {
        return send_findContactsByEmail(callback, state, emails);
      }

      public Dictionary<string, Contact> End_findContactsByEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findContactsByEmail();
      }

      #endif

      public Dictionary<string, Contact> findContactsByEmail(THashSet<string> emails)
      {
        #if !SILVERLIGHT
        send_findContactsByEmail(emails);
        return recv_findContactsByEmail();

        #else
        var asyncResult = Begin_findContactsByEmail(null, null, emails);
        return End_findContactsByEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findContactsByEmail(AsyncCallback callback, object state, THashSet<string> emails)
      #else
      public void send_findContactsByEmail(THashSet<string> emails)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findContactsByEmail", TMessageType.Call, seqid_));
        findContactsByEmail_args args = new findContactsByEmail_args();
        args.Emails = emails;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Contact> recv_findContactsByEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findContactsByEmail_result result = new findContactsByEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactsByEmail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findContactsByPhone(AsyncCallback callback, object state, THashSet<string> phones)
      {
        return send_findContactsByPhone(callback, state, phones);
      }

      public Dictionary<string, Contact> End_findContactsByPhone(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findContactsByPhone();
      }

      #endif

      public Dictionary<string, Contact> findContactsByPhone(THashSet<string> phones)
      {
        #if !SILVERLIGHT
        send_findContactsByPhone(phones);
        return recv_findContactsByPhone();

        #else
        var asyncResult = Begin_findContactsByPhone(null, null, phones);
        return End_findContactsByPhone(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findContactsByPhone(AsyncCallback callback, object state, THashSet<string> phones)
      #else
      public void send_findContactsByPhone(THashSet<string> phones)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findContactsByPhone", TMessageType.Call, seqid_));
        findContactsByPhone_args args = new findContactsByPhone_args();
        args.Phones = phones;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Contact> recv_findContactsByPhone()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findContactsByPhone_result result = new findContactsByPhone_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactsByPhone failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_findSnsIdUserStatus(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string udidHash)
      {
        return send_findSnsIdUserStatus(callback, state, snsIdType, snsAccessToken, udidHash);
      }

      public SnsIdUserStatus End_findSnsIdUserStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findSnsIdUserStatus();
      }

      #endif

      public SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)
      {
        #if !SILVERLIGHT
        send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash);
        return recv_findSnsIdUserStatus();

        #else
        var asyncResult = Begin_findSnsIdUserStatus(null, null, snsIdType, snsAccessToken, udidHash);
        return End_findSnsIdUserStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findSnsIdUserStatus(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string udidHash)
      #else
      public void send_findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.Call, seqid_));
        findSnsIdUserStatus_args args = new findSnsIdUserStatus_args();
        args.SnsIdType = snsIdType;
        args.SnsAccessToken = snsAccessToken;
        args.UdidHash = udidHash;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SnsIdUserStatus recv_findSnsIdUserStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findSnsIdUserStatus_result result = new findSnsIdUserStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findSnsIdUserStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_finishUpdateVerification(AsyncCallback callback, object state, string sessionId)
      {
        return send_finishUpdateVerification(callback, state, sessionId);
      }

      public void End_finishUpdateVerification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_finishUpdateVerification();
      }

      #endif

      public void finishUpdateVerification(string sessionId)
      {
        #if !SILVERLIGHT
        send_finishUpdateVerification(sessionId);
        recv_finishUpdateVerification();

        #else
        var asyncResult = Begin_finishUpdateVerification(null, null, sessionId);
        End_finishUpdateVerification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_finishUpdateVerification(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_finishUpdateVerification(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("finishUpdateVerification", TMessageType.Call, seqid_));
        finishUpdateVerification_args args = new finishUpdateVerification_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_finishUpdateVerification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        finishUpdateVerification_result result = new finishUpdateVerification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_generateUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
      {
        return send_generateUserTicket(callback, state, expirationTime, maxUseCount);
      }

      public Ticket End_generateUserTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_generateUserTicket();
      }

      #endif

      public Ticket generateUserTicket(long expirationTime, int maxUseCount)
      {
        #if !SILVERLIGHT
        send_generateUserTicket(expirationTime, maxUseCount);
        return recv_generateUserTicket();

        #else
        var asyncResult = Begin_generateUserTicket(null, null, expirationTime, maxUseCount);
        return End_generateUserTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_generateUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
      #else
      public void send_generateUserTicket(long expirationTime, int maxUseCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("generateUserTicket", TMessageType.Call, seqid_));
        generateUserTicket_args args = new generateUserTicket_args();
        args.ExpirationTime = expirationTime;
        args.MaxUseCount = maxUseCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ticket recv_generateUserTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        generateUserTicket_result result = new generateUserTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "generateUserTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAcceptedProximityMatches(AsyncCallback callback, object state, string sessionId)
      {
        return send_getAcceptedProximityMatches(callback, state, sessionId);
      }

      public THashSet<string> End_getAcceptedProximityMatches(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAcceptedProximityMatches();
      }

      #endif

      public THashSet<string> getAcceptedProximityMatches(string sessionId)
      {
        #if !SILVERLIGHT
        send_getAcceptedProximityMatches(sessionId);
        return recv_getAcceptedProximityMatches();

        #else
        var asyncResult = Begin_getAcceptedProximityMatches(null, null, sessionId);
        return End_getAcceptedProximityMatches(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAcceptedProximityMatches(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_getAcceptedProximityMatches(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.Call, seqid_));
        getAcceptedProximityMatches_args args = new getAcceptedProximityMatches_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<string> recv_getAcceptedProximityMatches()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAcceptedProximityMatches_result result = new getAcceptedProximityMatches_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAcceptedProximityMatches failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getActiveBuddySubscriberIds(AsyncCallback callback, object state)
      {
        return send_getActiveBuddySubscriberIds(callback, state);
      }

      public List<string> End_getActiveBuddySubscriberIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getActiveBuddySubscriberIds();
      }

      #endif

      public List<string> getActiveBuddySubscriberIds()
      {
        #if !SILVERLIGHT
        send_getActiveBuddySubscriberIds();
        return recv_getActiveBuddySubscriberIds();

        #else
        var asyncResult = Begin_getActiveBuddySubscriberIds(null, null);
        return End_getActiveBuddySubscriberIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getActiveBuddySubscriberIds(AsyncCallback callback, object state)
      #else
      public void send_getActiveBuddySubscriberIds()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.Call, seqid_));
        getActiveBuddySubscriberIds_args args = new getActiveBuddySubscriberIds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getActiveBuddySubscriberIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActiveBuddySubscriberIds_result result = new getActiveBuddySubscriberIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActiveBuddySubscriberIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAllContactIds(AsyncCallback callback, object state)
      {
        return send_getAllContactIds(callback, state);
      }

      public List<string> End_getAllContactIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAllContactIds();
      }

      #endif

      public List<string> getAllContactIds()
      {
        #if !SILVERLIGHT
        send_getAllContactIds();
        return recv_getAllContactIds();

        #else
        var asyncResult = Begin_getAllContactIds(null, null);
        return End_getAllContactIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAllContactIds(AsyncCallback callback, object state)
      #else
      public void send_getAllContactIds()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAllContactIds", TMessageType.Call, seqid_));
        getAllContactIds_args args = new getAllContactIds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getAllContactIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAllContactIds_result result = new getAllContactIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllContactIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAuthQrcode(AsyncCallback callback, object state, bool keepLoggedIn, string systemName)
      {
        return send_getAuthQrcode(callback, state, keepLoggedIn, systemName);
      }

      public AuthQrcode End_getAuthQrcode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAuthQrcode();
      }

      #endif

      public AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)
      {
        #if !SILVERLIGHT
        send_getAuthQrcode(keepLoggedIn, systemName);
        return recv_getAuthQrcode();

        #else
        var asyncResult = Begin_getAuthQrcode(null, null, keepLoggedIn, systemName);
        return End_getAuthQrcode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAuthQrcode(AsyncCallback callback, object state, bool keepLoggedIn, string systemName)
      #else
      public void send_getAuthQrcode(bool keepLoggedIn, string systemName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAuthQrcode", TMessageType.Call, seqid_));
        getAuthQrcode_args args = new getAuthQrcode_args();
        args.KeepLoggedIn = keepLoggedIn;
        args.SystemName = systemName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public AuthQrcode recv_getAuthQrcode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAuthQrcode_result result = new getAuthQrcode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAuthQrcode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBlockedContactIds(AsyncCallback callback, object state)
      {
        return send_getBlockedContactIds(callback, state);
      }

      public List<string> End_getBlockedContactIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBlockedContactIds();
      }

      #endif

      public List<string> getBlockedContactIds()
      {
        #if !SILVERLIGHT
        send_getBlockedContactIds();
        return recv_getBlockedContactIds();

        #else
        var asyncResult = Begin_getBlockedContactIds(null, null);
        return End_getBlockedContactIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBlockedContactIds(AsyncCallback callback, object state)
      #else
      public void send_getBlockedContactIds()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBlockedContactIds", TMessageType.Call, seqid_));
        getBlockedContactIds_args args = new getBlockedContactIds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getBlockedContactIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBlockedContactIds_result result = new getBlockedContactIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedContactIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBlockedContactIdsByRange(AsyncCallback callback, object state, int start, int count)
      {
        return send_getBlockedContactIdsByRange(callback, state, start, count);
      }

      public List<string> End_getBlockedContactIdsByRange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBlockedContactIdsByRange();
      }

      #endif

      public List<string> getBlockedContactIdsByRange(int start, int count)
      {
        #if !SILVERLIGHT
        send_getBlockedContactIdsByRange(start, count);
        return recv_getBlockedContactIdsByRange();

        #else
        var asyncResult = Begin_getBlockedContactIdsByRange(null, null, start, count);
        return End_getBlockedContactIdsByRange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBlockedContactIdsByRange(AsyncCallback callback, object state, int start, int count)
      #else
      public void send_getBlockedContactIdsByRange(int start, int count)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.Call, seqid_));
        getBlockedContactIdsByRange_args args = new getBlockedContactIdsByRange_args();
        args.Start = start;
        args.Count = count;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getBlockedContactIdsByRange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBlockedContactIdsByRange_result result = new getBlockedContactIdsByRange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedContactIdsByRange failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBlockedRecommendationIds(AsyncCallback callback, object state)
      {
        return send_getBlockedRecommendationIds(callback, state);
      }

      public List<string> End_getBlockedRecommendationIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBlockedRecommendationIds();
      }

      #endif

      public List<string> getBlockedRecommendationIds()
      {
        #if !SILVERLIGHT
        send_getBlockedRecommendationIds();
        return recv_getBlockedRecommendationIds();

        #else
        var asyncResult = Begin_getBlockedRecommendationIds(null, null);
        return End_getBlockedRecommendationIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBlockedRecommendationIds(AsyncCallback callback, object state)
      #else
      public void send_getBlockedRecommendationIds()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.Call, seqid_));
        getBlockedRecommendationIds_args args = new getBlockedRecommendationIds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getBlockedRecommendationIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBlockedRecommendationIds_result result = new getBlockedRecommendationIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedRecommendationIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBuddyBlockerIds(AsyncCallback callback, object state)
      {
        return send_getBuddyBlockerIds(callback, state);
      }

      public List<string> End_getBuddyBlockerIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBuddyBlockerIds();
      }

      #endif

      public List<string> getBuddyBlockerIds()
      {
        #if !SILVERLIGHT
        send_getBuddyBlockerIds();
        return recv_getBuddyBlockerIds();

        #else
        var asyncResult = Begin_getBuddyBlockerIds(null, null);
        return End_getBuddyBlockerIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBuddyBlockerIds(AsyncCallback callback, object state)
      #else
      public void send_getBuddyBlockerIds()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.Call, seqid_));
        getBuddyBlockerIds_args args = new getBuddyBlockerIds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getBuddyBlockerIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBuddyBlockerIds_result result = new getBuddyBlockerIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyBlockerIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBuddyLocation(AsyncCallback callback, object state, string mid, int index)
      {
        return send_getBuddyLocation(callback, state, mid, index);
      }

      public Geolocation End_getBuddyLocation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBuddyLocation();
      }

      #endif

      public Geolocation getBuddyLocation(string mid, int index)
      {
        #if !SILVERLIGHT
        send_getBuddyLocation(mid, index);
        return recv_getBuddyLocation();

        #else
        var asyncResult = Begin_getBuddyLocation(null, null, mid, index);
        return End_getBuddyLocation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBuddyLocation(AsyncCallback callback, object state, string mid, int index)
      #else
      public void send_getBuddyLocation(string mid, int index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBuddyLocation", TMessageType.Call, seqid_));
        getBuddyLocation_args args = new getBuddyLocation_args();
        args.Mid = mid;
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Geolocation recv_getBuddyLocation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBuddyLocation_result result = new getBuddyLocation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyLocation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompactContactsModifiedSince(AsyncCallback callback, object state, long timestamp)
      {
        return send_getCompactContactsModifiedSince(callback, state, timestamp);
      }

      public List<CompactContact> End_getCompactContactsModifiedSince(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompactContactsModifiedSince();
      }

      #endif

      public List<CompactContact> getCompactContactsModifiedSince(long timestamp)
      {
        #if !SILVERLIGHT
        send_getCompactContactsModifiedSince(timestamp);
        return recv_getCompactContactsModifiedSince();

        #else
        var asyncResult = Begin_getCompactContactsModifiedSince(null, null, timestamp);
        return End_getCompactContactsModifiedSince(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompactContactsModifiedSince(AsyncCallback callback, object state, long timestamp)
      #else
      public void send_getCompactContactsModifiedSince(long timestamp)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.Call, seqid_));
        getCompactContactsModifiedSince_args args = new getCompactContactsModifiedSince_args();
        args.Timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CompactContact> recv_getCompactContactsModifiedSince()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompactContactsModifiedSince_result result = new getCompactContactsModifiedSince_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactContactsModifiedSince failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompactGroup(AsyncCallback callback, object state, string groupId)
      {
        return send_getCompactGroup(callback, state, groupId);
      }

      public Group End_getCompactGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompactGroup();
      }

      #endif

      public Group getCompactGroup(string groupId)
      {
        #if !SILVERLIGHT
        send_getCompactGroup(groupId);
        return recv_getCompactGroup();

        #else
        var asyncResult = Begin_getCompactGroup(null, null, groupId);
        return End_getCompactGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompactGroup(AsyncCallback callback, object state, string groupId)
      #else
      public void send_getCompactGroup(string groupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompactGroup", TMessageType.Call, seqid_));
        getCompactGroup_args args = new getCompactGroup_args();
        args.GroupId = groupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Group recv_getCompactGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompactGroup_result result = new getCompactGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCompactRoom(AsyncCallback callback, object state, string roomId)
      {
        return send_getCompactRoom(callback, state, roomId);
      }

      public Room End_getCompactRoom(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCompactRoom();
      }

      #endif

      public Room getCompactRoom(string roomId)
      {
        #if !SILVERLIGHT
        send_getCompactRoom(roomId);
        return recv_getCompactRoom();

        #else
        var asyncResult = Begin_getCompactRoom(null, null, roomId);
        return End_getCompactRoom(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCompactRoom(AsyncCallback callback, object state, string roomId)
      #else
      public void send_getCompactRoom(string roomId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCompactRoom", TMessageType.Call, seqid_));
        getCompactRoom_args args = new getCompactRoom_args();
        args.RoomId = roomId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Room recv_getCompactRoom()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCompactRoom_result result = new getCompactRoom_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactRoom failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getContact(AsyncCallback callback, object state, string id)
      {
        return send_getContact(callback, state, id);
      }

      public Contact End_getContact(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getContact();
      }

      #endif

      public Contact getContact(string id)
      {
        #if !SILVERLIGHT
        send_getContact(id);
        return recv_getContact();

        #else
        var asyncResult = Begin_getContact(null, null, id);
        return End_getContact(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getContact(AsyncCallback callback, object state, string id)
      #else
      public void send_getContact(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getContact", TMessageType.Call, seqid_));
        getContact_args args = new getContact_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Contact recv_getContact()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getContact_result result = new getContact_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContact failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getContacts(AsyncCallback callback, object state, List<string> ids)
      {
        return send_getContacts(callback, state, ids);
      }

      public List<Contact> End_getContacts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getContacts();
      }

      #endif

      public List<Contact> getContacts(List<string> ids)
      {
        #if !SILVERLIGHT
        send_getContacts(ids);
        return recv_getContacts();

        #else
        var asyncResult = Begin_getContacts(null, null, ids);
        return End_getContacts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getContacts(AsyncCallback callback, object state, List<string> ids)
      #else
      public void send_getContacts(List<string> ids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getContacts", TMessageType.Call, seqid_));
        getContacts_args args = new getContacts_args();
        args.Ids = ids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Contact> recv_getContacts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getContacts_result result = new getContacts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContacts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCountryWithRequestIp(AsyncCallback callback, object state)
      {
        return send_getCountryWithRequestIp(callback, state);
      }

      public string End_getCountryWithRequestIp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCountryWithRequestIp();
      }

      #endif

      public string getCountryWithRequestIp()
      {
        #if !SILVERLIGHT
        send_getCountryWithRequestIp();
        return recv_getCountryWithRequestIp();

        #else
        var asyncResult = Begin_getCountryWithRequestIp(null, null);
        return End_getCountryWithRequestIp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCountryWithRequestIp(AsyncCallback callback, object state)
      #else
      public void send_getCountryWithRequestIp()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.Call, seqid_));
        getCountryWithRequestIp_args args = new getCountryWithRequestIp_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getCountryWithRequestIp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCountryWithRequestIp_result result = new getCountryWithRequestIp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCountryWithRequestIp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFavoriteMids(AsyncCallback callback, object state)
      {
        return send_getFavoriteMids(callback, state);
      }

      public List<string> End_getFavoriteMids(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFavoriteMids();
      }

      #endif

      public List<string> getFavoriteMids()
      {
        #if !SILVERLIGHT
        send_getFavoriteMids();
        return recv_getFavoriteMids();

        #else
        var asyncResult = Begin_getFavoriteMids(null, null);
        return End_getFavoriteMids(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFavoriteMids(AsyncCallback callback, object state)
      #else
      public void send_getFavoriteMids()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFavoriteMids", TMessageType.Call, seqid_));
        getFavoriteMids_args args = new getFavoriteMids_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getFavoriteMids()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFavoriteMids_result result = new getFavoriteMids_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFavoriteMids failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroup(AsyncCallback callback, object state, string groupId)
      {
        return send_getGroup(callback, state, groupId);
      }

      public Group End_getGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroup();
      }

      #endif

      public Group getGroup(string groupId)
      {
        #if !SILVERLIGHT
        send_getGroup(groupId);
        return recv_getGroup();

        #else
        var asyncResult = Begin_getGroup(null, null, groupId);
        return End_getGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroup(AsyncCallback callback, object state, string groupId)
      #else
      public void send_getGroup(string groupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroup", TMessageType.Call, seqid_));
        getGroup_args args = new getGroup_args();
        args.GroupId = groupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Group recv_getGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroup_result result = new getGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroup failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroupIdsInvited(AsyncCallback callback, object state)
      {
        return send_getGroupIdsInvited(callback, state);
      }

      public List<string> End_getGroupIdsInvited(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroupIdsInvited();
      }

      #endif

      public List<string> getGroupIdsInvited()
      {
        #if !SILVERLIGHT
        send_getGroupIdsInvited();
        return recv_getGroupIdsInvited();

        #else
        var asyncResult = Begin_getGroupIdsInvited(null, null);
        return End_getGroupIdsInvited(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroupIdsInvited(AsyncCallback callback, object state)
      #else
      public void send_getGroupIdsInvited()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.Call, seqid_));
        getGroupIdsInvited_args args = new getGroupIdsInvited_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getGroupIdsInvited()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroupIdsInvited_result result = new getGroupIdsInvited_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupIdsInvited failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroupIdsJoined(AsyncCallback callback, object state)
      {
        return send_getGroupIdsJoined(callback, state);
      }

      public List<string> End_getGroupIdsJoined(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroupIdsJoined();
      }

      #endif

      public List<string> getGroupIdsJoined()
      {
        #if !SILVERLIGHT
        send_getGroupIdsJoined();
        return recv_getGroupIdsJoined();

        #else
        var asyncResult = Begin_getGroupIdsJoined(null, null);
        return End_getGroupIdsJoined(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroupIdsJoined(AsyncCallback callback, object state)
      #else
      public void send_getGroupIdsJoined()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.Call, seqid_));
        getGroupIdsJoined_args args = new getGroupIdsJoined_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getGroupIdsJoined()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroupIdsJoined_result result = new getGroupIdsJoined_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupIdsJoined failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getGroups(AsyncCallback callback, object state, List<string> groupIds)
      {
        return send_getGroups(callback, state, groupIds);
      }

      public List<Group> End_getGroups(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getGroups();
      }

      #endif

      public List<Group> getGroups(List<string> groupIds)
      {
        #if !SILVERLIGHT
        send_getGroups(groupIds);
        return recv_getGroups();

        #else
        var asyncResult = Begin_getGroups(null, null, groupIds);
        return End_getGroups(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getGroups(AsyncCallback callback, object state, List<string> groupIds)
      #else
      public void send_getGroups(List<string> groupIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getGroups", TMessageType.Call, seqid_));
        getGroups_args args = new getGroups_args();
        args.GroupIds = groupIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Group> recv_getGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getGroups_result result = new getGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroups failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getHiddenContactMids(AsyncCallback callback, object state)
      {
        return send_getHiddenContactMids(callback, state);
      }

      public List<string> End_getHiddenContactMids(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getHiddenContactMids();
      }

      #endif

      public List<string> getHiddenContactMids()
      {
        #if !SILVERLIGHT
        send_getHiddenContactMids();
        return recv_getHiddenContactMids();

        #else
        var asyncResult = Begin_getHiddenContactMids(null, null);
        return End_getHiddenContactMids(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getHiddenContactMids(AsyncCallback callback, object state)
      #else
      public void send_getHiddenContactMids()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getHiddenContactMids", TMessageType.Call, seqid_));
        getHiddenContactMids_args args = new getHiddenContactMids_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getHiddenContactMids()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getHiddenContactMids_result result = new getHiddenContactMids_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHiddenContactMids failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getIdentityIdentifier(AsyncCallback callback, object state)
      {
        return send_getIdentityIdentifier(callback, state);
      }

      public string End_getIdentityIdentifier(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getIdentityIdentifier();
      }

      #endif

      public string getIdentityIdentifier()
      {
        #if !SILVERLIGHT
        send_getIdentityIdentifier();
        return recv_getIdentityIdentifier();

        #else
        var asyncResult = Begin_getIdentityIdentifier(null, null);
        return End_getIdentityIdentifier(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getIdentityIdentifier(AsyncCallback callback, object state)
      #else
      public void send_getIdentityIdentifier()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.Call, seqid_));
        getIdentityIdentifier_args args = new getIdentityIdentifier_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getIdentityIdentifier()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getIdentityIdentifier_result result = new getIdentityIdentifier_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getIdentityIdentifier failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getLastAnnouncementIndex(AsyncCallback callback, object state)
      {
        return send_getLastAnnouncementIndex(callback, state);
      }

      public int End_getLastAnnouncementIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getLastAnnouncementIndex();
      }

      #endif

      public int getLastAnnouncementIndex()
      {
        #if !SILVERLIGHT
        send_getLastAnnouncementIndex();
        return recv_getLastAnnouncementIndex();

        #else
        var asyncResult = Begin_getLastAnnouncementIndex(null, null);
        return End_getLastAnnouncementIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getLastAnnouncementIndex(AsyncCallback callback, object state)
      #else
      public void send_getLastAnnouncementIndex()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.Call, seqid_));
        getLastAnnouncementIndex_args args = new getLastAnnouncementIndex_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getLastAnnouncementIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getLastAnnouncementIndex_result result = new getLastAnnouncementIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLastAnnouncementIndex failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getLastOpRevision(AsyncCallback callback, object state)
      {
        return send_getLastOpRevision(callback, state);
      }

      public long End_getLastOpRevision(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getLastOpRevision();
      }

      #endif

      public long getLastOpRevision()
      {
        #if !SILVERLIGHT
        send_getLastOpRevision();
        return recv_getLastOpRevision();

        #else
        var asyncResult = Begin_getLastOpRevision(null, null);
        return End_getLastOpRevision(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getLastOpRevision(AsyncCallback callback, object state)
      #else
      public void send_getLastOpRevision()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getLastOpRevision", TMessageType.Call, seqid_));
        getLastOpRevision_args args = new getLastOpRevision_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getLastOpRevision()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getLastOpRevision_result result = new getLastOpRevision_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLastOpRevision failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId, int lastMessagesCount)
      {
        return send_getMessageBox(callback, state, channelId, messageBoxId, lastMessagesCount);
      }

      public TMessageBox End_getMessageBox(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessageBox();
      }

      #endif

      public TMessageBox getMessageBox(string channelId, string messageBoxId, int lastMessagesCount)
      {
        #if !SILVERLIGHT
        send_getMessageBox(channelId, messageBoxId, lastMessagesCount);
        return recv_getMessageBox();

        #else
        var asyncResult = Begin_getMessageBox(null, null, channelId, messageBoxId, lastMessagesCount);
        return End_getMessageBox(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId, int lastMessagesCount)
      #else
      public void send_getMessageBox(string channelId, string messageBoxId, int lastMessagesCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessageBox", TMessageType.Call, seqid_));
        getMessageBox_args args = new getMessageBox_args();
        args.ChannelId = channelId;
        args.MessageBoxId = messageBoxId;
        args.LastMessagesCount = lastMessagesCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TMessageBox recv_getMessageBox()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessageBox_result result = new getMessageBox_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBox failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessageBoxCompactWrapUp(AsyncCallback callback, object state, string mid)
      {
        return send_getMessageBoxCompactWrapUp(callback, state, mid);
      }

      public TMessageBoxWrapUp End_getMessageBoxCompactWrapUp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessageBoxCompactWrapUp();
      }

      #endif

      public TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid)
      {
        #if !SILVERLIGHT
        send_getMessageBoxCompactWrapUp(mid);
        return recv_getMessageBoxCompactWrapUp();

        #else
        var asyncResult = Begin_getMessageBoxCompactWrapUp(null, null, mid);
        return End_getMessageBoxCompactWrapUp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessageBoxCompactWrapUp(AsyncCallback callback, object state, string mid)
      #else
      public void send_getMessageBoxCompactWrapUp(string mid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.Call, seqid_));
        getMessageBoxCompactWrapUp_args args = new getMessageBoxCompactWrapUp_args();
        args.Mid = mid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TMessageBoxWrapUp recv_getMessageBoxCompactWrapUp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessageBoxCompactWrapUp_result result = new getMessageBoxCompactWrapUp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxCompactWrapUp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessageBoxCompactWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
      {
        return send_getMessageBoxCompactWrapUpList(callback, state, start, messageBoxCount);
      }

      public TMessageBoxWrapUpResponse End_getMessageBoxCompactWrapUpList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessageBoxCompactWrapUpList();
      }

      #endif

      public TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(int start, int messageBoxCount)
      {
        #if !SILVERLIGHT
        send_getMessageBoxCompactWrapUpList(start, messageBoxCount);
        return recv_getMessageBoxCompactWrapUpList();

        #else
        var asyncResult = Begin_getMessageBoxCompactWrapUpList(null, null, start, messageBoxCount);
        return End_getMessageBoxCompactWrapUpList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessageBoxCompactWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
      #else
      public void send_getMessageBoxCompactWrapUpList(int start, int messageBoxCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.Call, seqid_));
        getMessageBoxCompactWrapUpList_args args = new getMessageBoxCompactWrapUpList_args();
        args.Start = start;
        args.MessageBoxCount = messageBoxCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TMessageBoxWrapUpResponse recv_getMessageBoxCompactWrapUpList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessageBoxCompactWrapUpList_result result = new getMessageBoxCompactWrapUpList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxCompactWrapUpList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessageBoxList(AsyncCallback callback, object state, string channelId, int lastMessagesCount)
      {
        return send_getMessageBoxList(callback, state, channelId, lastMessagesCount);
      }

      public List<TMessageBox> End_getMessageBoxList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessageBoxList();
      }

      #endif

      public List<TMessageBox> getMessageBoxList(string channelId, int lastMessagesCount)
      {
        #if !SILVERLIGHT
        send_getMessageBoxList(channelId, lastMessagesCount);
        return recv_getMessageBoxList();

        #else
        var asyncResult = Begin_getMessageBoxList(null, null, channelId, lastMessagesCount);
        return End_getMessageBoxList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessageBoxList(AsyncCallback callback, object state, string channelId, int lastMessagesCount)
      #else
      public void send_getMessageBoxList(string channelId, int lastMessagesCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessageBoxList", TMessageType.Call, seqid_));
        getMessageBoxList_args args = new getMessageBoxList_args();
        args.ChannelId = channelId;
        args.LastMessagesCount = lastMessagesCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TMessageBox> recv_getMessageBoxList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessageBoxList_result result = new getMessageBoxList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessageBoxListByStatus(AsyncCallback callback, object state, string channelId, int lastMessagesCount, int status)
      {
        return send_getMessageBoxListByStatus(callback, state, channelId, lastMessagesCount, status);
      }

      public List<TMessageBox> End_getMessageBoxListByStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessageBoxListByStatus();
      }

      #endif

      public List<TMessageBox> getMessageBoxListByStatus(string channelId, int lastMessagesCount, int status)
      {
        #if !SILVERLIGHT
        send_getMessageBoxListByStatus(channelId, lastMessagesCount, status);
        return recv_getMessageBoxListByStatus();

        #else
        var asyncResult = Begin_getMessageBoxListByStatus(null, null, channelId, lastMessagesCount, status);
        return End_getMessageBoxListByStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessageBoxListByStatus(AsyncCallback callback, object state, string channelId, int lastMessagesCount, int status)
      #else
      public void send_getMessageBoxListByStatus(string channelId, int lastMessagesCount, int status)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.Call, seqid_));
        getMessageBoxListByStatus_args args = new getMessageBoxListByStatus_args();
        args.ChannelId = channelId;
        args.LastMessagesCount = lastMessagesCount;
        args.Status = status;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TMessageBox> recv_getMessageBoxListByStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessageBoxListByStatus_result result = new getMessageBoxListByStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxListByStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessageBoxWrapUp(AsyncCallback callback, object state, string mid)
      {
        return send_getMessageBoxWrapUp(callback, state, mid);
      }

      public TMessageBoxWrapUp End_getMessageBoxWrapUp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessageBoxWrapUp();
      }

      #endif

      public TMessageBoxWrapUp getMessageBoxWrapUp(string mid)
      {
        #if !SILVERLIGHT
        send_getMessageBoxWrapUp(mid);
        return recv_getMessageBoxWrapUp();

        #else
        var asyncResult = Begin_getMessageBoxWrapUp(null, null, mid);
        return End_getMessageBoxWrapUp(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessageBoxWrapUp(AsyncCallback callback, object state, string mid)
      #else
      public void send_getMessageBoxWrapUp(string mid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.Call, seqid_));
        getMessageBoxWrapUp_args args = new getMessageBoxWrapUp_args();
        args.Mid = mid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TMessageBoxWrapUp recv_getMessageBoxWrapUp()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessageBoxWrapUp_result result = new getMessageBoxWrapUp_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxWrapUp failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessageBoxWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
      {
        return send_getMessageBoxWrapUpList(callback, state, start, messageBoxCount);
      }

      public TMessageBoxWrapUpResponse End_getMessageBoxWrapUpList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessageBoxWrapUpList();
      }

      #endif

      public TMessageBoxWrapUpResponse getMessageBoxWrapUpList(int start, int messageBoxCount)
      {
        #if !SILVERLIGHT
        send_getMessageBoxWrapUpList(start, messageBoxCount);
        return recv_getMessageBoxWrapUpList();

        #else
        var asyncResult = Begin_getMessageBoxWrapUpList(null, null, start, messageBoxCount);
        return End_getMessageBoxWrapUpList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessageBoxWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
      #else
      public void send_getMessageBoxWrapUpList(int start, int messageBoxCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.Call, seqid_));
        getMessageBoxWrapUpList_args args = new getMessageBoxWrapUpList_args();
        args.Start = start;
        args.MessageBoxCount = messageBoxCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TMessageBoxWrapUpResponse recv_getMessageBoxWrapUpList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessageBoxWrapUpList_result result = new getMessageBoxWrapUpList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxWrapUpList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMessagesBySequenceNumber(AsyncCallback callback, object state, string channelId, string messageBoxId, long startSeq, long endSeq)
      {
        return send_getMessagesBySequenceNumber(callback, state, channelId, messageBoxId, startSeq, endSeq);
      }

      public List<Message> End_getMessagesBySequenceNumber(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMessagesBySequenceNumber();
      }

      #endif

      public List<Message> getMessagesBySequenceNumber(string channelId, string messageBoxId, long startSeq, long endSeq)
      {
        #if !SILVERLIGHT
        send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq);
        return recv_getMessagesBySequenceNumber();

        #else
        var asyncResult = Begin_getMessagesBySequenceNumber(null, null, channelId, messageBoxId, startSeq, endSeq);
        return End_getMessagesBySequenceNumber(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMessagesBySequenceNumber(AsyncCallback callback, object state, string channelId, string messageBoxId, long startSeq, long endSeq)
      #else
      public void send_getMessagesBySequenceNumber(string channelId, string messageBoxId, long startSeq, long endSeq)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.Call, seqid_));
        getMessagesBySequenceNumber_args args = new getMessagesBySequenceNumber_args();
        args.ChannelId = channelId;
        args.MessageBoxId = messageBoxId;
        args.StartSeq = startSeq;
        args.EndSeq = endSeq;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Message> recv_getMessagesBySequenceNumber()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMessagesBySequenceNumber_result result = new getMessagesBySequenceNumber_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessagesBySequenceNumber failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNextMessages(AsyncCallback callback, object state, string messageBoxId, long startSeq, int messagesCount)
      {
        return send_getNextMessages(callback, state, messageBoxId, startSeq, messagesCount);
      }

      public List<Message> End_getNextMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNextMessages();
      }

      #endif

      public List<Message> getNextMessages(string messageBoxId, long startSeq, int messagesCount)
      {
        #if !SILVERLIGHT
        send_getNextMessages(messageBoxId, startSeq, messagesCount);
        return recv_getNextMessages();

        #else
        var asyncResult = Begin_getNextMessages(null, null, messageBoxId, startSeq, messagesCount);
        return End_getNextMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNextMessages(AsyncCallback callback, object state, string messageBoxId, long startSeq, int messagesCount)
      #else
      public void send_getNextMessages(string messageBoxId, long startSeq, int messagesCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNextMessages", TMessageType.Call, seqid_));
        getNextMessages_args args = new getNextMessages_args();
        args.MessageBoxId = messageBoxId;
        args.StartSeq = startSeq;
        args.MessagesCount = messagesCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Message> recv_getNextMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNextMessages_result result = new getNextMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNextMessages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNotificationPolicy(AsyncCallback callback, object state, CarrierCode carrier)
      {
        return send_getNotificationPolicy(callback, state, carrier);
      }

      public List<NotificationType> End_getNotificationPolicy(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNotificationPolicy();
      }

      #endif

      public List<NotificationType> getNotificationPolicy(CarrierCode carrier)
      {
        #if !SILVERLIGHT
        send_getNotificationPolicy(carrier);
        return recv_getNotificationPolicy();

        #else
        var asyncResult = Begin_getNotificationPolicy(null, null, carrier);
        return End_getNotificationPolicy(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNotificationPolicy(AsyncCallback callback, object state, CarrierCode carrier)
      #else
      public void send_getNotificationPolicy(CarrierCode carrier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNotificationPolicy", TMessageType.Call, seqid_));
        getNotificationPolicy_args args = new getNotificationPolicy_args();
        args.Carrier = carrier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<NotificationType> recv_getNotificationPolicy()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNotificationPolicy_result result = new getNotificationPolicy_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotificationPolicy failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPreviousMessages(AsyncCallback callback, object state, string messageBoxId, long endSeq, int messagesCount)
      {
        return send_getPreviousMessages(callback, state, messageBoxId, endSeq, messagesCount);
      }

      public List<Message> End_getPreviousMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPreviousMessages();
      }

      #endif

      public List<Message> getPreviousMessages(string messageBoxId, long endSeq, int messagesCount)
      {
        #if !SILVERLIGHT
        send_getPreviousMessages(messageBoxId, endSeq, messagesCount);
        return recv_getPreviousMessages();

        #else
        var asyncResult = Begin_getPreviousMessages(null, null, messageBoxId, endSeq, messagesCount);
        return End_getPreviousMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPreviousMessages(AsyncCallback callback, object state, string messageBoxId, long endSeq, int messagesCount)
      #else
      public void send_getPreviousMessages(string messageBoxId, long endSeq, int messagesCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPreviousMessages", TMessageType.Call, seqid_));
        getPreviousMessages_args args = new getPreviousMessages_args();
        args.MessageBoxId = messageBoxId;
        args.EndSeq = endSeq;
        args.MessagesCount = messagesCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Message> recv_getPreviousMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPreviousMessages_result result = new getPreviousMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPreviousMessages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProfile(AsyncCallback callback, object state)
      {
        return send_getProfile(callback, state);
      }

      public Profile End_getProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProfile();
      }

      #endif

      public Profile getProfile()
      {
        #if !SILVERLIGHT
        send_getProfile();
        return recv_getProfile();

        #else
        var asyncResult = Begin_getProfile(null, null);
        return End_getProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProfile(AsyncCallback callback, object state)
      #else
      public void send_getProfile()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProfile", TMessageType.Call, seqid_));
        getProfile_args args = new getProfile_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Profile recv_getProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProfile_result result = new getProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProximityMatchCandidateList(AsyncCallback callback, object state, string sessionId)
      {
        return send_getProximityMatchCandidateList(callback, state, sessionId);
      }

      public ProximityMatchCandidateResult End_getProximityMatchCandidateList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProximityMatchCandidateList();
      }

      #endif

      public ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)
      {
        #if !SILVERLIGHT
        send_getProximityMatchCandidateList(sessionId);
        return recv_getProximityMatchCandidateList();

        #else
        var asyncResult = Begin_getProximityMatchCandidateList(null, null, sessionId);
        return End_getProximityMatchCandidateList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProximityMatchCandidateList(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_getProximityMatchCandidateList(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.Call, seqid_));
        getProximityMatchCandidateList_args args = new getProximityMatchCandidateList_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProximityMatchCandidateResult recv_getProximityMatchCandidateList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProximityMatchCandidateList_result result = new getProximityMatchCandidateList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProximityMatchCandidateList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProximityMatchCandidates(AsyncCallback callback, object state, string sessionId)
      {
        return send_getProximityMatchCandidates(callback, state, sessionId);
      }

      public THashSet<Contact> End_getProximityMatchCandidates(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProximityMatchCandidates();
      }

      #endif

      public THashSet<Contact> getProximityMatchCandidates(string sessionId)
      {
        #if !SILVERLIGHT
        send_getProximityMatchCandidates(sessionId);
        return recv_getProximityMatchCandidates();

        #else
        var asyncResult = Begin_getProximityMatchCandidates(null, null, sessionId);
        return End_getProximityMatchCandidates(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProximityMatchCandidates(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_getProximityMatchCandidates(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.Call, seqid_));
        getProximityMatchCandidates_args args = new getProximityMatchCandidates_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<Contact> recv_getProximityMatchCandidates()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProximityMatchCandidates_result result = new getProximityMatchCandidates_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProximityMatchCandidates failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRecentMessages(AsyncCallback callback, object state, string messageBoxId, int messagesCount)
      {
        return send_getRecentMessages(callback, state, messageBoxId, messagesCount);
      }

      public List<Message> End_getRecentMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRecentMessages();
      }

      #endif

      public List<Message> getRecentMessages(string messageBoxId, int messagesCount)
      {
        #if !SILVERLIGHT
        send_getRecentMessages(messageBoxId, messagesCount);
        return recv_getRecentMessages();

        #else
        var asyncResult = Begin_getRecentMessages(null, null, messageBoxId, messagesCount);
        return End_getRecentMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRecentMessages(AsyncCallback callback, object state, string messageBoxId, int messagesCount)
      #else
      public void send_getRecentMessages(string messageBoxId, int messagesCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRecentMessages", TMessageType.Call, seqid_));
        getRecentMessages_args args = new getRecentMessages_args();
        args.MessageBoxId = messageBoxId;
        args.MessagesCount = messagesCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Message> recv_getRecentMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRecentMessages_result result = new getRecentMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRecentMessages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRecommendationIds(AsyncCallback callback, object state)
      {
        return send_getRecommendationIds(callback, state);
      }

      public List<string> End_getRecommendationIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRecommendationIds();
      }

      #endif

      public List<string> getRecommendationIds()
      {
        #if !SILVERLIGHT
        send_getRecommendationIds();
        return recv_getRecommendationIds();

        #else
        var asyncResult = Begin_getRecommendationIds(null, null);
        return End_getRecommendationIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRecommendationIds(AsyncCallback callback, object state)
      #else
      public void send_getRecommendationIds()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRecommendationIds", TMessageType.Call, seqid_));
        getRecommendationIds_args args = new getRecommendationIds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_getRecommendationIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRecommendationIds_result result = new getRecommendationIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRecommendationIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRoom(AsyncCallback callback, object state, string roomId)
      {
        return send_getRoom(callback, state, roomId);
      }

      public Room End_getRoom(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRoom();
      }

      #endif

      public Room getRoom(string roomId)
      {
        #if !SILVERLIGHT
        send_getRoom(roomId);
        return recv_getRoom();

        #else
        var asyncResult = Begin_getRoom(null, null, roomId);
        return End_getRoom(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRoom(AsyncCallback callback, object state, string roomId)
      #else
      public void send_getRoom(string roomId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRoom", TMessageType.Call, seqid_));
        getRoom_args args = new getRoom_args();
        args.RoomId = roomId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Room recv_getRoom()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRoom_result result = new getRoom_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRoom failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRSAKeyInfo(AsyncCallback callback, object state, IdentityProvider provider)
      {
        return send_getRSAKeyInfo(callback, state, provider);
      }

      public RSAKey End_getRSAKeyInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRSAKeyInfo();
      }

      #endif

      public RSAKey getRSAKeyInfo(IdentityProvider provider)
      {
        #if !SILVERLIGHT
        send_getRSAKeyInfo(provider);
        return recv_getRSAKeyInfo();

        #else
        var asyncResult = Begin_getRSAKeyInfo(null, null, provider);
        return End_getRSAKeyInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRSAKeyInfo(AsyncCallback callback, object state, IdentityProvider provider)
      #else
      public void send_getRSAKeyInfo(IdentityProvider provider)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.Call, seqid_));
        getRSAKeyInfo_args args = new getRSAKeyInfo_args();
        args.Provider = provider;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RSAKey recv_getRSAKeyInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRSAKeyInfo_result result = new getRSAKeyInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRSAKeyInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getServerTime(AsyncCallback callback, object state)
      {
        return send_getServerTime(callback, state);
      }

      public long End_getServerTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getServerTime();
      }

      #endif

      public long getServerTime()
      {
        #if !SILVERLIGHT
        send_getServerTime();
        return recv_getServerTime();

        #else
        var asyncResult = Begin_getServerTime(null, null);
        return End_getServerTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getServerTime(AsyncCallback callback, object state)
      #else
      public void send_getServerTime()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getServerTime", TMessageType.Call, seqid_));
        getServerTime_args args = new getServerTime_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getServerTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getServerTime_result result = new getServerTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getServerTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSessions(AsyncCallback callback, object state)
      {
        return send_getSessions(callback, state);
      }

      public List<LoginSession> End_getSessions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSessions();
      }

      #endif

      public List<LoginSession> getSessions()
      {
        #if !SILVERLIGHT
        send_getSessions();
        return recv_getSessions();

        #else
        var asyncResult = Begin_getSessions(null, null);
        return End_getSessions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSessions(AsyncCallback callback, object state)
      #else
      public void send_getSessions()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSessions", TMessageType.Call, seqid_));
        getSessions_args args = new getSessions_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<LoginSession> recv_getSessions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSessions_result result = new getSessions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSessions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettings(AsyncCallback callback, object state)
      {
        return send_getSettings(callback, state);
      }

      public Settings End_getSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettings();
      }

      #endif

      public Settings getSettings()
      {
        #if !SILVERLIGHT
        send_getSettings();
        return recv_getSettings();

        #else
        var asyncResult = Begin_getSettings(null, null);
        return End_getSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettings(AsyncCallback callback, object state)
      #else
      public void send_getSettings()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettings", TMessageType.Call, seqid_));
        getSettings_args args = new getSettings_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Settings recv_getSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettings_result result = new getSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSettingsAttributes(AsyncCallback callback, object state, int attrBitset)
      {
        return send_getSettingsAttributes(callback, state, attrBitset);
      }

      public Settings End_getSettingsAttributes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSettingsAttributes();
      }

      #endif

      public Settings getSettingsAttributes(int attrBitset)
      {
        #if !SILVERLIGHT
        send_getSettingsAttributes(attrBitset);
        return recv_getSettingsAttributes();

        #else
        var asyncResult = Begin_getSettingsAttributes(null, null, attrBitset);
        return End_getSettingsAttributes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSettingsAttributes(AsyncCallback callback, object state, int attrBitset)
      #else
      public void send_getSettingsAttributes(int attrBitset)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSettingsAttributes", TMessageType.Call, seqid_));
        getSettingsAttributes_args args = new getSettingsAttributes_args();
        args.AttrBitset = attrBitset;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Settings recv_getSettingsAttributes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSettingsAttributes_result result = new getSettingsAttributes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettingsAttributes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSystemConfiguration(AsyncCallback callback, object state)
      {
        return send_getSystemConfiguration(callback, state);
      }

      public SystemConfiguration End_getSystemConfiguration(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSystemConfiguration();
      }

      #endif

      public SystemConfiguration getSystemConfiguration()
      {
        #if !SILVERLIGHT
        send_getSystemConfiguration();
        return recv_getSystemConfiguration();

        #else
        var asyncResult = Begin_getSystemConfiguration(null, null);
        return End_getSystemConfiguration(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSystemConfiguration(AsyncCallback callback, object state)
      #else
      public void send_getSystemConfiguration()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSystemConfiguration", TMessageType.Call, seqid_));
        getSystemConfiguration_args args = new getSystemConfiguration_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SystemConfiguration recv_getSystemConfiguration()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSystemConfiguration_result result = new getSystemConfiguration_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSystemConfiguration failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserTicket(AsyncCallback callback, object state)
      {
        return send_getUserTicket(callback, state);
      }

      public Ticket End_getUserTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserTicket();
      }

      #endif

      public Ticket getUserTicket()
      {
        #if !SILVERLIGHT
        send_getUserTicket();
        return recv_getUserTicket();

        #else
        var asyncResult = Begin_getUserTicket(null, null);
        return End_getUserTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserTicket(AsyncCallback callback, object state)
      #else
      public void send_getUserTicket()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserTicket", TMessageType.Call, seqid_));
        getUserTicket_args args = new getUserTicket_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ticket recv_getUserTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserTicket_result result = new getUserTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getWapInvitation(AsyncCallback callback, object state, string invitationHash)
      {
        return send_getWapInvitation(callback, state, invitationHash);
      }

      public WapInvitation End_getWapInvitation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getWapInvitation();
      }

      #endif

      public WapInvitation getWapInvitation(string invitationHash)
      {
        #if !SILVERLIGHT
        send_getWapInvitation(invitationHash);
        return recv_getWapInvitation();

        #else
        var asyncResult = Begin_getWapInvitation(null, null, invitationHash);
        return End_getWapInvitation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getWapInvitation(AsyncCallback callback, object state, string invitationHash)
      #else
      public void send_getWapInvitation(string invitationHash)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getWapInvitation", TMessageType.Call, seqid_));
        getWapInvitation_args args = new getWapInvitation_args();
        args.InvitationHash = invitationHash;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public WapInvitation recv_getWapInvitation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getWapInvitation_result result = new getWapInvitation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getWapInvitation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_invalidateUserTicket(AsyncCallback callback, object state)
      {
        return send_invalidateUserTicket(callback, state);
      }

      public void End_invalidateUserTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_invalidateUserTicket();
      }

      #endif

      public void invalidateUserTicket()
      {
        #if !SILVERLIGHT
        send_invalidateUserTicket();
        recv_invalidateUserTicket();

        #else
        var asyncResult = Begin_invalidateUserTicket(null, null);
        End_invalidateUserTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_invalidateUserTicket(AsyncCallback callback, object state)
      #else
      public void send_invalidateUserTicket()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("invalidateUserTicket", TMessageType.Call, seqid_));
        invalidateUserTicket_args args = new invalidateUserTicket_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_invalidateUserTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        invalidateUserTicket_result result = new invalidateUserTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_inviteFriendsBySms(AsyncCallback callback, object state, List<string> phoneNumberList)
      {
        return send_inviteFriendsBySms(callback, state, phoneNumberList);
      }

      public void End_inviteFriendsBySms(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_inviteFriendsBySms();
      }

      #endif

      public void inviteFriendsBySms(List<string> phoneNumberList)
      {
        #if !SILVERLIGHT
        send_inviteFriendsBySms(phoneNumberList);
        recv_inviteFriendsBySms();

        #else
        var asyncResult = Begin_inviteFriendsBySms(null, null, phoneNumberList);
        End_inviteFriendsBySms(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_inviteFriendsBySms(AsyncCallback callback, object state, List<string> phoneNumberList)
      #else
      public void send_inviteFriendsBySms(List<string> phoneNumberList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.Call, seqid_));
        inviteFriendsBySms_args args = new inviteFriendsBySms_args();
        args.PhoneNumberList = phoneNumberList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_inviteFriendsBySms()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        inviteFriendsBySms_result result = new inviteFriendsBySms_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_inviteIntoGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
      {
        return send_inviteIntoGroup(callback, state, reqSeq, groupId, contactIds);
      }

      public void End_inviteIntoGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_inviteIntoGroup();
      }

      #endif

      public void inviteIntoGroup(int reqSeq, string groupId, List<string> contactIds)
      {
        #if !SILVERLIGHT
        send_inviteIntoGroup(reqSeq, groupId, contactIds);
        recv_inviteIntoGroup();

        #else
        var asyncResult = Begin_inviteIntoGroup(null, null, reqSeq, groupId, contactIds);
        End_inviteIntoGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_inviteIntoGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
      #else
      public void send_inviteIntoGroup(int reqSeq, string groupId, List<string> contactIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("inviteIntoGroup", TMessageType.Call, seqid_));
        inviteIntoGroup_args args = new inviteIntoGroup_args();
        args.ReqSeq = reqSeq;
        args.GroupId = groupId;
        args.ContactIds = contactIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_inviteIntoGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        inviteIntoGroup_result result = new inviteIntoGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_inviteIntoRoom(AsyncCallback callback, object state, int reqSeq, string roomId, List<string> contactIds)
      {
        return send_inviteIntoRoom(callback, state, reqSeq, roomId, contactIds);
      }

      public void End_inviteIntoRoom(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_inviteIntoRoom();
      }

      #endif

      public void inviteIntoRoom(int reqSeq, string roomId, List<string> contactIds)
      {
        #if !SILVERLIGHT
        send_inviteIntoRoom(reqSeq, roomId, contactIds);
        recv_inviteIntoRoom();

        #else
        var asyncResult = Begin_inviteIntoRoom(null, null, reqSeq, roomId, contactIds);
        End_inviteIntoRoom(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_inviteIntoRoom(AsyncCallback callback, object state, int reqSeq, string roomId, List<string> contactIds)
      #else
      public void send_inviteIntoRoom(int reqSeq, string roomId, List<string> contactIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("inviteIntoRoom", TMessageType.Call, seqid_));
        inviteIntoRoom_args args = new inviteIntoRoom_args();
        args.ReqSeq = reqSeq;
        args.RoomId = roomId;
        args.ContactIds = contactIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_inviteIntoRoom()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        inviteIntoRoom_result result = new inviteIntoRoom_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_inviteViaEmail(AsyncCallback callback, object state, int reqSeq, string email, string name)
      {
        return send_inviteViaEmail(callback, state, reqSeq, email, name);
      }

      public void End_inviteViaEmail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_inviteViaEmail();
      }

      #endif

      public void inviteViaEmail(int reqSeq, string email, string name)
      {
        #if !SILVERLIGHT
        send_inviteViaEmail(reqSeq, email, name);
        recv_inviteViaEmail();

        #else
        var asyncResult = Begin_inviteViaEmail(null, null, reqSeq, email, name);
        End_inviteViaEmail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_inviteViaEmail(AsyncCallback callback, object state, int reqSeq, string email, string name)
      #else
      public void send_inviteViaEmail(int reqSeq, string email, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("inviteViaEmail", TMessageType.Call, seqid_));
        inviteViaEmail_args args = new inviteViaEmail_args();
        args.ReqSeq = reqSeq;
        args.Email = email;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_inviteViaEmail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        inviteViaEmail_result result = new inviteViaEmail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_isIdentityIdentifierAvailable(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
      {
        return send_isIdentityIdentifierAvailable(callback, state, provider, identifier);
      }

      public bool End_isIdentityIdentifierAvailable(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isIdentityIdentifierAvailable();
      }

      #endif

      public bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)
      {
        #if !SILVERLIGHT
        send_isIdentityIdentifierAvailable(provider, identifier);
        return recv_isIdentityIdentifierAvailable();

        #else
        var asyncResult = Begin_isIdentityIdentifierAvailable(null, null, provider, identifier);
        return End_isIdentityIdentifierAvailable(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_isIdentityIdentifierAvailable(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
      #else
      public void send_isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.Call, seqid_));
        isIdentityIdentifierAvailable_args args = new isIdentityIdentifierAvailable_args();
        args.Provider = provider;
        args.Identifier = identifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_isIdentityIdentifierAvailable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isIdentityIdentifierAvailable_result result = new isIdentityIdentifierAvailable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isIdentityIdentifierAvailable failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_isUseridAvailable(AsyncCallback callback, object state, string userid)
      {
        return send_isUseridAvailable(callback, state, userid);
      }

      public bool End_isUseridAvailable(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isUseridAvailable();
      }

      #endif

      public bool isUseridAvailable(string userid)
      {
        #if !SILVERLIGHT
        send_isUseridAvailable(userid);
        return recv_isUseridAvailable();

        #else
        var asyncResult = Begin_isUseridAvailable(null, null, userid);
        return End_isUseridAvailable(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_isUseridAvailable(AsyncCallback callback, object state, string userid)
      #else
      public void send_isUseridAvailable(string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("isUseridAvailable", TMessageType.Call, seqid_));
        isUseridAvailable_args args = new isUseridAvailable_args();
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_isUseridAvailable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isUseridAvailable_result result = new isUseridAvailable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isUseridAvailable failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_kickoutFromGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
      {
        return send_kickoutFromGroup(callback, state, reqSeq, groupId, contactIds);
      }

      public void End_kickoutFromGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_kickoutFromGroup();
      }

      #endif

      public void kickoutFromGroup(int reqSeq, string groupId, List<string> contactIds)
      {
        #if !SILVERLIGHT
        send_kickoutFromGroup(reqSeq, groupId, contactIds);
        recv_kickoutFromGroup();

        #else
        var asyncResult = Begin_kickoutFromGroup(null, null, reqSeq, groupId, contactIds);
        End_kickoutFromGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_kickoutFromGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
      #else
      public void send_kickoutFromGroup(int reqSeq, string groupId, List<string> contactIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("kickoutFromGroup", TMessageType.Call, seqid_));
        kickoutFromGroup_args args = new kickoutFromGroup_args();
        args.ReqSeq = reqSeq;
        args.GroupId = groupId;
        args.ContactIds = contactIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_kickoutFromGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        kickoutFromGroup_result result = new kickoutFromGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_leaveGroup(AsyncCallback callback, object state, int reqSeq, string groupId)
      {
        return send_leaveGroup(callback, state, reqSeq, groupId);
      }

      public void End_leaveGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_leaveGroup();
      }

      #endif

      public void leaveGroup(int reqSeq, string groupId)
      {
        #if !SILVERLIGHT
        send_leaveGroup(reqSeq, groupId);
        recv_leaveGroup();

        #else
        var asyncResult = Begin_leaveGroup(null, null, reqSeq, groupId);
        End_leaveGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_leaveGroup(AsyncCallback callback, object state, int reqSeq, string groupId)
      #else
      public void send_leaveGroup(int reqSeq, string groupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Call, seqid_));
        leaveGroup_args args = new leaveGroup_args();
        args.ReqSeq = reqSeq;
        args.GroupId = groupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_leaveGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        leaveGroup_result result = new leaveGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_leaveRoom(AsyncCallback callback, object state, int reqSeq, string roomId)
      {
        return send_leaveRoom(callback, state, reqSeq, roomId);
      }

      public void End_leaveRoom(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_leaveRoom();
      }

      #endif

      public void leaveRoom(int reqSeq, string roomId)
      {
        #if !SILVERLIGHT
        send_leaveRoom(reqSeq, roomId);
        recv_leaveRoom();

        #else
        var asyncResult = Begin_leaveRoom(null, null, reqSeq, roomId);
        End_leaveRoom(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_leaveRoom(AsyncCallback callback, object state, int reqSeq, string roomId)
      #else
      public void send_leaveRoom(int reqSeq, string roomId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("leaveRoom", TMessageType.Call, seqid_));
        leaveRoom_args args = new leaveRoom_args();
        args.ReqSeq = reqSeq;
        args.RoomId = roomId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_leaveRoom()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        leaveRoom_result result = new leaveRoom_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_loginWithIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      {
        return send_loginWithIdentityCredential(callback, state, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      }

      public string End_loginWithIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_loginWithIdentityCredential();
      }

      #endif

      public string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      {
        #if !SILVERLIGHT
        send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
        return recv_loginWithIdentityCredential();

        #else
        var asyncResult = Begin_loginWithIdentityCredential(null, null, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
        return End_loginWithIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_loginWithIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      #else
      public void send_loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.Call, seqid_));
        loginWithIdentityCredential_args args = new loginWithIdentityCredential_args();
        args.IdentityProvider = identityProvider;
        args.Identifier = identifier;
        args.Password = password;
        args.KeepLoggedIn = keepLoggedIn;
        args.AccessLocation = accessLocation;
        args.SystemName = systemName;
        args.Certificate = certificate;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_loginWithIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginWithIdentityCredential_result result = new loginWithIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithIdentityCredential failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_loginWithIdentityCredentialForCertificate(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      {
        return send_loginWithIdentityCredentialForCertificate(callback, state, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      }

      public LoginResult End_loginWithIdentityCredentialForCertificate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_loginWithIdentityCredentialForCertificate();
      }

      #endif

      public LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      {
        #if !SILVERLIGHT
        send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
        return recv_loginWithIdentityCredentialForCertificate();

        #else
        var asyncResult = Begin_loginWithIdentityCredentialForCertificate(null, null, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
        return End_loginWithIdentityCredentialForCertificate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_loginWithIdentityCredentialForCertificate(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      #else
      public void send_loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.Call, seqid_));
        loginWithIdentityCredentialForCertificate_args args = new loginWithIdentityCredentialForCertificate_args();
        args.IdentityProvider = identityProvider;
        args.Identifier = identifier;
        args.Password = password;
        args.KeepLoggedIn = keepLoggedIn;
        args.AccessLocation = accessLocation;
        args.SystemName = systemName;
        args.Certificate = certificate;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LoginResult recv_loginWithIdentityCredentialForCertificate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginWithIdentityCredentialForCertificate_result result = new loginWithIdentityCredentialForCertificate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithIdentityCredentialForCertificate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_loginWithVerifier(AsyncCallback callback, object state, string verifier)
      {
        return send_loginWithVerifier(callback, state, verifier);
      }

      public string End_loginWithVerifier(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_loginWithVerifier();
      }

      #endif

      public string loginWithVerifier(string verifier)
      {
        #if !SILVERLIGHT
        send_loginWithVerifier(verifier);
        return recv_loginWithVerifier();

        #else
        var asyncResult = Begin_loginWithVerifier(null, null, verifier);
        return End_loginWithVerifier(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_loginWithVerifier(AsyncCallback callback, object state, string verifier)
      #else
      public void send_loginWithVerifier(string verifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("loginWithVerifier", TMessageType.Call, seqid_));
        loginWithVerifier_args args = new loginWithVerifier_args();
        args.Verifier = verifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_loginWithVerifier()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginWithVerifier_result result = new loginWithVerifier_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithVerifier failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_loginWithVerifierForCerificate(AsyncCallback callback, object state, string verifier)
      {
        return send_loginWithVerifierForCerificate(callback, state, verifier);
      }

      public LoginResult End_loginWithVerifierForCerificate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_loginWithVerifierForCerificate();
      }

      #endif

      public LoginResult loginWithVerifierForCerificate(string verifier)
      {
        #if !SILVERLIGHT
        send_loginWithVerifierForCerificate(verifier);
        return recv_loginWithVerifierForCerificate();

        #else
        var asyncResult = Begin_loginWithVerifierForCerificate(null, null, verifier);
        return End_loginWithVerifierForCerificate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_loginWithVerifierForCerificate(AsyncCallback callback, object state, string verifier)
      #else
      public void send_loginWithVerifierForCerificate(string verifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.Call, seqid_));
        loginWithVerifierForCerificate_args args = new loginWithVerifierForCerificate_args();
        args.Verifier = verifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LoginResult recv_loginWithVerifierForCerificate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginWithVerifierForCerificate_result result = new loginWithVerifierForCerificate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithVerifierForCerificate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_loginWithVerifierForCertificate(AsyncCallback callback, object state, string verifier)
      {
        return send_loginWithVerifierForCertificate(callback, state, verifier);
      }

      public LoginResult End_loginWithVerifierForCertificate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_loginWithVerifierForCertificate();
      }

      #endif

      public LoginResult loginWithVerifierForCertificate(string verifier)
      {
        #if !SILVERLIGHT
        send_loginWithVerifierForCertificate(verifier);
        return recv_loginWithVerifierForCertificate();

        #else
        var asyncResult = Begin_loginWithVerifierForCertificate(null, null, verifier);
        return End_loginWithVerifierForCertificate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_loginWithVerifierForCertificate(AsyncCallback callback, object state, string verifier)
      #else
      public void send_loginWithVerifierForCertificate(string verifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.Call, seqid_));
        loginWithVerifierForCertificate_args args = new loginWithVerifierForCertificate_args();
        args.Verifier = verifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LoginResult recv_loginWithVerifierForCertificate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginWithVerifierForCertificate_result result = new loginWithVerifierForCertificate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithVerifierForCertificate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logout(AsyncCallback callback, object state)
      {
        return send_logout(callback, state);
      }

      public void End_logout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logout();
      }

      #endif

      public void logout()
      {
        #if !SILVERLIGHT
        send_logout();
        recv_logout();

        #else
        var asyncResult = Begin_logout(null, null);
        End_logout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logout(AsyncCallback callback, object state)
      #else
      public void send_logout()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
        logout_args args = new logout_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logout_result result = new logout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logoutSession(AsyncCallback callback, object state, string tokenKey)
      {
        return send_logoutSession(callback, state, tokenKey);
      }

      public void End_logoutSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logoutSession();
      }

      #endif

      public void logoutSession(string tokenKey)
      {
        #if !SILVERLIGHT
        send_logoutSession(tokenKey);
        recv_logoutSession();

        #else
        var asyncResult = Begin_logoutSession(null, null, tokenKey);
        End_logoutSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logoutSession(AsyncCallback callback, object state, string tokenKey)
      #else
      public void send_logoutSession(string tokenKey)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logoutSession", TMessageType.Call, seqid_));
        logoutSession_args args = new logoutSession_args();
        args.TokenKey = tokenKey;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logoutSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logoutSession_result result = new logoutSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_noop(AsyncCallback callback, object state)
      {
        return send_noop(callback, state);
      }

      public void End_noop(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_noop();
      }

      #endif

      public void noop()
      {
        #if !SILVERLIGHT
        send_noop();
        recv_noop();

        #else
        var asyncResult = Begin_noop(null, null);
        End_noop(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_noop(AsyncCallback callback, object state)
      #else
      public void send_noop()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("noop", TMessageType.Call, seqid_));
        noop_args args = new noop_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_noop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        noop_result result = new noop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifiedRedirect(AsyncCallback callback, object state, Dictionary<string, string> paramMap)
      {
        return send_notifiedRedirect(callback, state, paramMap);
      }

      public void End_notifiedRedirect(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifiedRedirect();
      }

      #endif

      public void notifiedRedirect(Dictionary<string, string> paramMap)
      {
        #if !SILVERLIGHT
        send_notifiedRedirect(paramMap);
        recv_notifiedRedirect();

        #else
        var asyncResult = Begin_notifiedRedirect(null, null, paramMap);
        End_notifiedRedirect(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifiedRedirect(AsyncCallback callback, object state, Dictionary<string, string> paramMap)
      #else
      public void send_notifiedRedirect(Dictionary<string, string> paramMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifiedRedirect", TMessageType.Call, seqid_));
        notifiedRedirect_args args = new notifiedRedirect_args();
        args.ParamMap = paramMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_notifiedRedirect()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifiedRedirect_result result = new notifiedRedirect_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifyBuddyOnAir(AsyncCallback callback, object state, int seq, List<string> receiverMids)
      {
        return send_notifyBuddyOnAir(callback, state, seq, receiverMids);
      }

      public Dictionary<string, string> End_notifyBuddyOnAir(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_notifyBuddyOnAir();
      }

      #endif

      public Dictionary<string, string> notifyBuddyOnAir(int seq, List<string> receiverMids)
      {
        #if !SILVERLIGHT
        send_notifyBuddyOnAir(seq, receiverMids);
        return recv_notifyBuddyOnAir();

        #else
        var asyncResult = Begin_notifyBuddyOnAir(null, null, seq, receiverMids);
        return End_notifyBuddyOnAir(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyBuddyOnAir(AsyncCallback callback, object state, int seq, List<string> receiverMids)
      #else
      public void send_notifyBuddyOnAir(int seq, List<string> receiverMids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.Call, seqid_));
        notifyBuddyOnAir_args args = new notifyBuddyOnAir_args();
        args.Seq = seq;
        args.ReceiverMids = receiverMids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_notifyBuddyOnAir()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyBuddyOnAir_result result = new notifyBuddyOnAir_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "notifyBuddyOnAir failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifyIndividualEvent(AsyncCallback callback, object state, NotificationStatus notificationStatus, List<string> receiverMids)
      {
        return send_notifyIndividualEvent(callback, state, notificationStatus, receiverMids);
      }

      public void End_notifyIndividualEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyIndividualEvent();
      }

      #endif

      public void notifyIndividualEvent(NotificationStatus notificationStatus, List<string> receiverMids)
      {
        #if !SILVERLIGHT
        send_notifyIndividualEvent(notificationStatus, receiverMids);
        recv_notifyIndividualEvent();

        #else
        var asyncResult = Begin_notifyIndividualEvent(null, null, notificationStatus, receiverMids);
        End_notifyIndividualEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyIndividualEvent(AsyncCallback callback, object state, NotificationStatus notificationStatus, List<string> receiverMids)
      #else
      public void send_notifyIndividualEvent(NotificationStatus notificationStatus, List<string> receiverMids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.Call, seqid_));
        notifyIndividualEvent_args args = new notifyIndividualEvent_args();
        args.NotificationStatus = notificationStatus;
        args.ReceiverMids = receiverMids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_notifyIndividualEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyIndividualEvent_result result = new notifyIndividualEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifyInstalled(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
      {
        return send_notifyInstalled(callback, state, udidHash, applicationTypeWithExtensions);
      }

      public void End_notifyInstalled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyInstalled();
      }

      #endif

      public void notifyInstalled(string udidHash, string applicationTypeWithExtensions)
      {
        #if !SILVERLIGHT
        send_notifyInstalled(udidHash, applicationTypeWithExtensions);
        recv_notifyInstalled();

        #else
        var asyncResult = Begin_notifyInstalled(null, null, udidHash, applicationTypeWithExtensions);
        End_notifyInstalled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyInstalled(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
      #else
      public void send_notifyInstalled(string udidHash, string applicationTypeWithExtensions)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifyInstalled", TMessageType.Call, seqid_));
        notifyInstalled_args args = new notifyInstalled_args();
        args.UdidHash = udidHash;
        args.ApplicationTypeWithExtensions = applicationTypeWithExtensions;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_notifyInstalled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyInstalled_result result = new notifyInstalled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifyRegistrationComplete(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
      {
        return send_notifyRegistrationComplete(callback, state, udidHash, applicationTypeWithExtensions);
      }

      public void End_notifyRegistrationComplete(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyRegistrationComplete();
      }

      #endif

      public void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)
      {
        #if !SILVERLIGHT
        send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
        recv_notifyRegistrationComplete();

        #else
        var asyncResult = Begin_notifyRegistrationComplete(null, null, udidHash, applicationTypeWithExtensions);
        End_notifyRegistrationComplete(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyRegistrationComplete(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
      #else
      public void send_notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.Call, seqid_));
        notifyRegistrationComplete_args args = new notifyRegistrationComplete_args();
        args.UdidHash = udidHash;
        args.ApplicationTypeWithExtensions = applicationTypeWithExtensions;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_notifyRegistrationComplete()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyRegistrationComplete_result result = new notifyRegistrationComplete_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifySleep(AsyncCallback callback, object state, long lastRev, int badge)
      {
        return send_notifySleep(callback, state, lastRev, badge);
      }

      public void End_notifySleep(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifySleep();
      }

      #endif

      public void notifySleep(long lastRev, int badge)
      {
        #if !SILVERLIGHT
        send_notifySleep(lastRev, badge);
        recv_notifySleep();

        #else
        var asyncResult = Begin_notifySleep(null, null, lastRev, badge);
        End_notifySleep(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifySleep(AsyncCallback callback, object state, long lastRev, int badge)
      #else
      public void send_notifySleep(long lastRev, int badge)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifySleep", TMessageType.Call, seqid_));
        notifySleep_args args = new notifySleep_args();
        args.LastRev = lastRev;
        args.Badge = badge;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_notifySleep()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifySleep_result result = new notifySleep_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifyUpdated(AsyncCallback callback, object state, long lastRev, DeviceInfo deviceInfo)
      {
        return send_notifyUpdated(callback, state, lastRev, deviceInfo);
      }

      public void End_notifyUpdated(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyUpdated();
      }

      #endif

      public void notifyUpdated(long lastRev, DeviceInfo deviceInfo)
      {
        #if !SILVERLIGHT
        send_notifyUpdated(lastRev, deviceInfo);
        recv_notifyUpdated();

        #else
        var asyncResult = Begin_notifyUpdated(null, null, lastRev, deviceInfo);
        End_notifyUpdated(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyUpdated(AsyncCallback callback, object state, long lastRev, DeviceInfo deviceInfo)
      #else
      public void send_notifyUpdated(long lastRev, DeviceInfo deviceInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifyUpdated", TMessageType.Call, seqid_));
        notifyUpdated_args args = new notifyUpdated_args();
        args.LastRev = lastRev;
        args.DeviceInfo = deviceInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_notifyUpdated()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyUpdated_result result = new notifyUpdated_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_openProximityMatch(AsyncCallback callback, object state, Location location)
      {
        return send_openProximityMatch(callback, state, location);
      }

      public string End_openProximityMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_openProximityMatch();
      }

      #endif

      public string openProximityMatch(Location location)
      {
        #if !SILVERLIGHT
        send_openProximityMatch(location);
        return recv_openProximityMatch();

        #else
        var asyncResult = Begin_openProximityMatch(null, null, location);
        return End_openProximityMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_openProximityMatch(AsyncCallback callback, object state, Location location)
      #else
      public void send_openProximityMatch(Location location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("openProximityMatch", TMessageType.Call, seqid_));
        openProximityMatch_args args = new openProximityMatch_args();
        args.Location = location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_openProximityMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        openProximityMatch_result result = new openProximityMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openProximityMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerBuddyUser(AsyncCallback callback, object state, string buddyId, string registrarPassword)
      {
        return send_registerBuddyUser(callback, state, buddyId, registrarPassword);
      }

      public string End_registerBuddyUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerBuddyUser();
      }

      #endif

      public string registerBuddyUser(string buddyId, string registrarPassword)
      {
        #if !SILVERLIGHT
        send_registerBuddyUser(buddyId, registrarPassword);
        return recv_registerBuddyUser();

        #else
        var asyncResult = Begin_registerBuddyUser(null, null, buddyId, registrarPassword);
        return End_registerBuddyUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerBuddyUser(AsyncCallback callback, object state, string buddyId, string registrarPassword)
      #else
      public void send_registerBuddyUser(string buddyId, string registrarPassword)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerBuddyUser", TMessageType.Call, seqid_));
        registerBuddyUser_args args = new registerBuddyUser_args();
        args.BuddyId = buddyId;
        args.RegistrarPassword = registrarPassword;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerBuddyUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerBuddyUser_result result = new registerBuddyUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerBuddyUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerBuddyUserid(AsyncCallback callback, object state, int seq, string userid)
      {
        return send_registerBuddyUserid(callback, state, seq, userid);
      }

      public void End_registerBuddyUserid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_registerBuddyUserid();
      }

      #endif

      public void registerBuddyUserid(int seq, string userid)
      {
        #if !SILVERLIGHT
        send_registerBuddyUserid(seq, userid);
        recv_registerBuddyUserid();

        #else
        var asyncResult = Begin_registerBuddyUserid(null, null, seq, userid);
        End_registerBuddyUserid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerBuddyUserid(AsyncCallback callback, object state, int seq, string userid)
      #else
      public void send_registerBuddyUserid(int seq, string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerBuddyUserid", TMessageType.Call, seqid_));
        registerBuddyUserid_args args = new registerBuddyUserid_args();
        args.Seq = seq;
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_registerBuddyUserid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerBuddyUserid_result result = new registerBuddyUserid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerDevice(AsyncCallback callback, object state, string sessionId)
      {
        return send_registerDevice(callback, state, sessionId);
      }

      public string End_registerDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerDevice();
      }

      #endif

      public string registerDevice(string sessionId)
      {
        #if !SILVERLIGHT
        send_registerDevice(sessionId);
        return recv_registerDevice();

        #else
        var asyncResult = Begin_registerDevice(null, null, sessionId);
        return End_registerDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerDevice(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_registerDevice(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Call, seqid_));
        registerDevice_args args = new registerDevice_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerDevice_result result = new registerDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDevice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerDeviceWithIdentityCredential(AsyncCallback callback, object state, string sessionId, IdentityProvider provider, string identifier, string verifier)
      {
        return send_registerDeviceWithIdentityCredential(callback, state, sessionId, provider, identifier, verifier);
      }

      public string End_registerDeviceWithIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerDeviceWithIdentityCredential();
      }

      #endif

      public string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)
      {
        #if !SILVERLIGHT
        send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier);
        return recv_registerDeviceWithIdentityCredential();

        #else
        var asyncResult = Begin_registerDeviceWithIdentityCredential(null, null, sessionId, provider, identifier, verifier);
        return End_registerDeviceWithIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerDeviceWithIdentityCredential(AsyncCallback callback, object state, string sessionId, IdentityProvider provider, string identifier, string verifier)
      #else
      public void send_registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.Call, seqid_));
        registerDeviceWithIdentityCredential_args args = new registerDeviceWithIdentityCredential_args();
        args.SessionId = sessionId;
        args.Provider = provider;
        args.Identifier = identifier;
        args.Verifier = verifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerDeviceWithIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerDeviceWithIdentityCredential_result result = new registerDeviceWithIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDeviceWithIdentityCredential failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerDeviceWithoutPhoneNumber(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo)
      {
        return send_registerDeviceWithoutPhoneNumber(callback, state, region, udidHash, deviceInfo);
      }

      public string End_registerDeviceWithoutPhoneNumber(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerDeviceWithoutPhoneNumber();
      }

      #endif

      public string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)
      {
        #if !SILVERLIGHT
        send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo);
        return recv_registerDeviceWithoutPhoneNumber();

        #else
        var asyncResult = Begin_registerDeviceWithoutPhoneNumber(null, null, region, udidHash, deviceInfo);
        return End_registerDeviceWithoutPhoneNumber(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerDeviceWithoutPhoneNumber(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo)
      #else
      public void send_registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.Call, seqid_));
        registerDeviceWithoutPhoneNumber_args args = new registerDeviceWithoutPhoneNumber_args();
        args.Region = region;
        args.UdidHash = udidHash;
        args.DeviceInfo = deviceInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerDeviceWithoutPhoneNumber()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerDeviceWithoutPhoneNumber_result result = new registerDeviceWithoutPhoneNumber_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDeviceWithoutPhoneNumber failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerDeviceWithoutPhoneNumberWithIdentityCredential(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid)
      {
        return send_registerDeviceWithoutPhoneNumberWithIdentityCredential(callback, state, region, udidHash, deviceInfo, provider, identifier, verifier, mid);
      }

      public string End_registerDeviceWithoutPhoneNumberWithIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerDeviceWithoutPhoneNumberWithIdentityCredential();
      }

      #endif

      public string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid)
      {
        #if !SILVERLIGHT
        send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid);
        return recv_registerDeviceWithoutPhoneNumberWithIdentityCredential();

        #else
        var asyncResult = Begin_registerDeviceWithoutPhoneNumberWithIdentityCredential(null, null, region, udidHash, deviceInfo, provider, identifier, verifier, mid);
        return End_registerDeviceWithoutPhoneNumberWithIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerDeviceWithoutPhoneNumberWithIdentityCredential(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid)
      #else
      public void send_registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.Call, seqid_));
        registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
        args.Region = region;
        args.UdidHash = udidHash;
        args.DeviceInfo = deviceInfo;
        args.Provider = provider;
        args.Identifier = identifier;
        args.Verifier = verifier;
        args.Mid = mid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerDeviceWithoutPhoneNumberWithIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerUserid(AsyncCallback callback, object state, int reqSeq, string userid)
      {
        return send_registerUserid(callback, state, reqSeq, userid);
      }

      public bool End_registerUserid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerUserid();
      }

      #endif

      public bool registerUserid(int reqSeq, string userid)
      {
        #if !SILVERLIGHT
        send_registerUserid(reqSeq, userid);
        return recv_registerUserid();

        #else
        var asyncResult = Begin_registerUserid(null, null, reqSeq, userid);
        return End_registerUserid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerUserid(AsyncCallback callback, object state, int reqSeq, string userid)
      #else
      public void send_registerUserid(int reqSeq, string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerUserid", TMessageType.Call, seqid_));
        registerUserid_args args = new registerUserid_args();
        args.ReqSeq = reqSeq;
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_registerUserid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerUserid_result result = new registerUserid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerUserid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerWapDevice(AsyncCallback callback, object state, string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
      {
        return send_registerWapDevice(callback, state, invitationHash, guidHash, email, deviceInfo);
      }

      public string End_registerWapDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerWapDevice();
      }

      #endif

      public string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
      {
        #if !SILVERLIGHT
        send_registerWapDevice(invitationHash, guidHash, email, deviceInfo);
        return recv_registerWapDevice();

        #else
        var asyncResult = Begin_registerWapDevice(null, null, invitationHash, guidHash, email, deviceInfo);
        return End_registerWapDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerWapDevice(AsyncCallback callback, object state, string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
      #else
      public void send_registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerWapDevice", TMessageType.Call, seqid_));
        registerWapDevice_args args = new registerWapDevice_args();
        args.InvitationHash = invitationHash;
        args.GuidHash = guidHash;
        args.Email = email;
        args.DeviceInfo = deviceInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerWapDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerWapDevice_result result = new registerWapDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWapDevice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerWithExistingSnsIdAndIdentityCredential(AsyncCallback callback, object state, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      {
        return send_registerWithExistingSnsIdAndIdentityCredential(callback, state, identityCredential, region, udidHash, deviceInfo);
      }

      public string End_registerWithExistingSnsIdAndIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerWithExistingSnsIdAndIdentityCredential();
      }

      #endif

      public string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      {
        #if !SILVERLIGHT
        send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo);
        return recv_registerWithExistingSnsIdAndIdentityCredential();

        #else
        var asyncResult = Begin_registerWithExistingSnsIdAndIdentityCredential(null, null, identityCredential, region, udidHash, deviceInfo);
        return End_registerWithExistingSnsIdAndIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerWithExistingSnsIdAndIdentityCredential(AsyncCallback callback, object state, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      #else
      public void send_registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.Call, seqid_));
        registerWithExistingSnsIdAndIdentityCredential_args args = new registerWithExistingSnsIdAndIdentityCredential_args();
        args.IdentityCredential = identityCredential;
        args.Region = region;
        args.UdidHash = udidHash;
        args.DeviceInfo = deviceInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerWithExistingSnsIdAndIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithExistingSnsIdAndIdentityCredential failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerWithSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
      {
        return send_registerWithSnsId(callback, state, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
      }

      public RegisterWithSnsIdResult End_registerWithSnsId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerWithSnsId();
      }

      #endif

      public RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
      {
        #if !SILVERLIGHT
        send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
        return recv_registerWithSnsId();

        #else
        var asyncResult = Begin_registerWithSnsId(null, null, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
        return End_registerWithSnsId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerWithSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
      #else
      public void send_registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerWithSnsId", TMessageType.Call, seqid_));
        registerWithSnsId_args args = new registerWithSnsId_args();
        args.SnsIdType = snsIdType;
        args.SnsAccessToken = snsAccessToken;
        args.Region = region;
        args.UdidHash = udidHash;
        args.DeviceInfo = deviceInfo;
        args.Mid = mid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RegisterWithSnsIdResult recv_registerWithSnsId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerWithSnsId_result result = new registerWithSnsId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithSnsId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_registerWithSnsIdAndIdentityCredential(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      {
        return send_registerWithSnsIdAndIdentityCredential(callback, state, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
      }

      public string End_registerWithSnsIdAndIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registerWithSnsIdAndIdentityCredential();
      }

      #endif

      public string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      {
        #if !SILVERLIGHT
        send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
        return recv_registerWithSnsIdAndIdentityCredential();

        #else
        var asyncResult = Begin_registerWithSnsIdAndIdentityCredential(null, null, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
        return End_registerWithSnsIdAndIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registerWithSnsIdAndIdentityCredential(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      #else
      public void send_registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.Call, seqid_));
        registerWithSnsIdAndIdentityCredential_args args = new registerWithSnsIdAndIdentityCredential_args();
        args.SnsIdType = snsIdType;
        args.SnsAccessToken = snsAccessToken;
        args.IdentityCredential = identityCredential;
        args.Region = region;
        args.UdidHash = udidHash;
        args.DeviceInfo = deviceInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registerWithSnsIdAndIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registerWithSnsIdAndIdentityCredential_result result = new registerWithSnsIdAndIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithSnsIdAndIdentityCredential failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reissueDeviceCredential(AsyncCallback callback, object state)
      {
        return send_reissueDeviceCredential(callback, state);
      }

      public string End_reissueDeviceCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reissueDeviceCredential();
      }

      #endif

      public string reissueDeviceCredential()
      {
        #if !SILVERLIGHT
        send_reissueDeviceCredential();
        return recv_reissueDeviceCredential();

        #else
        var asyncResult = Begin_reissueDeviceCredential(null, null);
        return End_reissueDeviceCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reissueDeviceCredential(AsyncCallback callback, object state)
      #else
      public void send_reissueDeviceCredential()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.Call, seqid_));
        reissueDeviceCredential_args args = new reissueDeviceCredential_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_reissueDeviceCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reissueDeviceCredential_result result = new reissueDeviceCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reissueDeviceCredential failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reissueUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
      {
        return send_reissueUserTicket(callback, state, expirationTime, maxUseCount);
      }

      public string End_reissueUserTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reissueUserTicket();
      }

      #endif

      public string reissueUserTicket(long expirationTime, int maxUseCount)
      {
        #if !SILVERLIGHT
        send_reissueUserTicket(expirationTime, maxUseCount);
        return recv_reissueUserTicket();

        #else
        var asyncResult = Begin_reissueUserTicket(null, null, expirationTime, maxUseCount);
        return End_reissueUserTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reissueUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
      #else
      public void send_reissueUserTicket(long expirationTime, int maxUseCount)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reissueUserTicket", TMessageType.Call, seqid_));
        reissueUserTicket_args args = new reissueUserTicket_args();
        args.ExpirationTime = expirationTime;
        args.MaxUseCount = maxUseCount;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_reissueUserTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reissueUserTicket_result result = new reissueUserTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reissueUserTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rejectGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
      {
        return send_rejectGroupInvitation(callback, state, reqSeq, groupId);
      }

      public void End_rejectGroupInvitation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_rejectGroupInvitation();
      }

      #endif

      public void rejectGroupInvitation(int reqSeq, string groupId)
      {
        #if !SILVERLIGHT
        send_rejectGroupInvitation(reqSeq, groupId);
        recv_rejectGroupInvitation();

        #else
        var asyncResult = Begin_rejectGroupInvitation(null, null, reqSeq, groupId);
        End_rejectGroupInvitation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rejectGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
      #else
      public void send_rejectGroupInvitation(int reqSeq, string groupId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.Call, seqid_));
        rejectGroupInvitation_args args = new rejectGroupInvitation_args();
        args.ReqSeq = reqSeq;
        args.GroupId = groupId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_rejectGroupInvitation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rejectGroupInvitation_result result = new rejectGroupInvitation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_releaseSession(AsyncCallback callback, object state)
      {
        return send_releaseSession(callback, state);
      }

      public void End_releaseSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_releaseSession();
      }

      #endif

      public void releaseSession()
      {
        #if !SILVERLIGHT
        send_releaseSession();
        recv_releaseSession();

        #else
        var asyncResult = Begin_releaseSession(null, null);
        End_releaseSession(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_releaseSession(AsyncCallback callback, object state)
      #else
      public void send_releaseSession()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("releaseSession", TMessageType.Call, seqid_));
        releaseSession_args args = new releaseSession_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_releaseSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        releaseSession_result result = new releaseSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeAllMessages(AsyncCallback callback, object state, int seq, string lastMessageId)
      {
        return send_removeAllMessages(callback, state, seq, lastMessageId);
      }

      public void End_removeAllMessages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeAllMessages();
      }

      #endif

      public void removeAllMessages(int seq, string lastMessageId)
      {
        #if !SILVERLIGHT
        send_removeAllMessages(seq, lastMessageId);
        recv_removeAllMessages();

        #else
        var asyncResult = Begin_removeAllMessages(null, null, seq, lastMessageId);
        End_removeAllMessages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeAllMessages(AsyncCallback callback, object state, int seq, string lastMessageId)
      #else
      public void send_removeAllMessages(int seq, string lastMessageId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeAllMessages", TMessageType.Call, seqid_));
        removeAllMessages_args args = new removeAllMessages_args();
        args.Seq = seq;
        args.LastMessageId = lastMessageId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeAllMessages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeAllMessages_result result = new removeAllMessages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeBuddyLocation(AsyncCallback callback, object state, string mid, int index)
      {
        return send_removeBuddyLocation(callback, state, mid, index);
      }

      public void End_removeBuddyLocation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_removeBuddyLocation();
      }

      #endif

      public void removeBuddyLocation(string mid, int index)
      {
        #if !SILVERLIGHT
        send_removeBuddyLocation(mid, index);
        recv_removeBuddyLocation();

        #else
        var asyncResult = Begin_removeBuddyLocation(null, null, mid, index);
        End_removeBuddyLocation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeBuddyLocation(AsyncCallback callback, object state, string mid, int index)
      #else
      public void send_removeBuddyLocation(string mid, int index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeBuddyLocation", TMessageType.Call, seqid_));
        removeBuddyLocation_args args = new removeBuddyLocation_args();
        args.Mid = mid;
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_removeBuddyLocation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeBuddyLocation_result result = new removeBuddyLocation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeMessage(AsyncCallback callback, object state, string messageId)
      {
        return send_removeMessage(callback, state, messageId);
      }

      public bool End_removeMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_removeMessage();
      }

      #endif

      public bool removeMessage(string messageId)
      {
        #if !SILVERLIGHT
        send_removeMessage(messageId);
        return recv_removeMessage();

        #else
        var asyncResult = Begin_removeMessage(null, null, messageId);
        return End_removeMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeMessage(AsyncCallback callback, object state, string messageId)
      #else
      public void send_removeMessage(string messageId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeMessage", TMessageType.Call, seqid_));
        removeMessage_args args = new removeMessage_args();
        args.MessageId = messageId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_removeMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeMessage_result result = new removeMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeMessageFromMyHome(AsyncCallback callback, object state, string messageId)
      {
        return send_removeMessageFromMyHome(callback, state, messageId);
      }

      public bool End_removeMessageFromMyHome(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_removeMessageFromMyHome();
      }

      #endif

      public bool removeMessageFromMyHome(string messageId)
      {
        #if !SILVERLIGHT
        send_removeMessageFromMyHome(messageId);
        return recv_removeMessageFromMyHome();

        #else
        var asyncResult = Begin_removeMessageFromMyHome(null, null, messageId);
        return End_removeMessageFromMyHome(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeMessageFromMyHome(AsyncCallback callback, object state, string messageId)
      #else
      public void send_removeMessageFromMyHome(string messageId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.Call, seqid_));
        removeMessageFromMyHome_args args = new removeMessageFromMyHome_args();
        args.MessageId = messageId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_removeMessageFromMyHome()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeMessageFromMyHome_result result = new removeMessageFromMyHome_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeMessageFromMyHome failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeSnsId(AsyncCallback callback, object state, SnsIdType snsIdType)
      {
        return send_removeSnsId(callback, state, snsIdType);
      }

      public string End_removeSnsId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_removeSnsId();
      }

      #endif

      public string removeSnsId(SnsIdType snsIdType)
      {
        #if !SILVERLIGHT
        send_removeSnsId(snsIdType);
        return recv_removeSnsId();

        #else
        var asyncResult = Begin_removeSnsId(null, null, snsIdType);
        return End_removeSnsId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeSnsId(AsyncCallback callback, object state, SnsIdType snsIdType)
      #else
      public void send_removeSnsId(SnsIdType snsIdType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeSnsId", TMessageType.Call, seqid_));
        removeSnsId_args args = new removeSnsId_args();
        args.SnsIdType = snsIdType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_removeSnsId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        removeSnsId_result result = new removeSnsId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeSnsId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_report(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, string report)
      {
        return send_report(callback, state, syncOpRevision, category, report);
      }

      public void End_report(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_report();
      }

      #endif

      public void report(long syncOpRevision, SyncCategory category, string report)
      {
        #if !SILVERLIGHT
        send_report(syncOpRevision, category, report);
        recv_report();

        #else
        var asyncResult = Begin_report(null, null, syncOpRevision, category, report);
        End_report(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_report(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, string report)
      #else
      public void send_report(long syncOpRevision, SyncCategory category, string report)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("report", TMessageType.Call, seqid_));
        report_args args = new report_args();
        args.SyncOpRevision = syncOpRevision;
        args.Category = category;
        args.Report = report;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_report()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        report_result result = new report_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reportContacts(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
      {
        return send_reportContacts(callback, state, syncOpRevision, category, contactReports, actionType);
      }

      public List<ContactReportResult> End_reportContacts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reportContacts();
      }

      #endif

      public List<ContactReportResult> reportContacts(long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
      {
        #if !SILVERLIGHT
        send_reportContacts(syncOpRevision, category, contactReports, actionType);
        return recv_reportContacts();

        #else
        var asyncResult = Begin_reportContacts(null, null, syncOpRevision, category, contactReports, actionType);
        return End_reportContacts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reportContacts(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
      #else
      public void send_reportContacts(long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reportContacts", TMessageType.Call, seqid_));
        reportContacts_args args = new reportContacts_args();
        args.SyncOpRevision = syncOpRevision;
        args.Category = category;
        args.ContactReports = contactReports;
        args.ActionType = actionType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ContactReportResult> recv_reportContacts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportContacts_result result = new reportContacts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportContacts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reportGroups(AsyncCallback callback, object state, long syncOpRevision, List<Group> groups)
      {
        return send_reportGroups(callback, state, syncOpRevision, groups);
      }

      public void End_reportGroups(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_reportGroups();
      }

      #endif

      public void reportGroups(long syncOpRevision, List<Group> groups)
      {
        #if !SILVERLIGHT
        send_reportGroups(syncOpRevision, groups);
        recv_reportGroups();

        #else
        var asyncResult = Begin_reportGroups(null, null, syncOpRevision, groups);
        End_reportGroups(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reportGroups(AsyncCallback callback, object state, long syncOpRevision, List<Group> groups)
      #else
      public void send_reportGroups(long syncOpRevision, List<Group> groups)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reportGroups", TMessageType.Call, seqid_));
        reportGroups_args args = new reportGroups_args();
        args.SyncOpRevision = syncOpRevision;
        args.Groups = groups;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_reportGroups()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportGroups_result result = new reportGroups_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reportProfile(AsyncCallback callback, object state, long syncOpRevision, Profile profile)
      {
        return send_reportProfile(callback, state, syncOpRevision, profile);
      }

      public void End_reportProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_reportProfile();
      }

      #endif

      public void reportProfile(long syncOpRevision, Profile profile)
      {
        #if !SILVERLIGHT
        send_reportProfile(syncOpRevision, profile);
        recv_reportProfile();

        #else
        var asyncResult = Begin_reportProfile(null, null, syncOpRevision, profile);
        End_reportProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reportProfile(AsyncCallback callback, object state, long syncOpRevision, Profile profile)
      #else
      public void send_reportProfile(long syncOpRevision, Profile profile)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reportProfile", TMessageType.Call, seqid_));
        reportProfile_args args = new reportProfile_args();
        args.SyncOpRevision = syncOpRevision;
        args.Profile = profile;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_reportProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportProfile_result result = new reportProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reportRooms(AsyncCallback callback, object state, long syncOpRevision, List<Room> rooms)
      {
        return send_reportRooms(callback, state, syncOpRevision, rooms);
      }

      public void End_reportRooms(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_reportRooms();
      }

      #endif

      public void reportRooms(long syncOpRevision, List<Room> rooms)
      {
        #if !SILVERLIGHT
        send_reportRooms(syncOpRevision, rooms);
        recv_reportRooms();

        #else
        var asyncResult = Begin_reportRooms(null, null, syncOpRevision, rooms);
        End_reportRooms(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reportRooms(AsyncCallback callback, object state, long syncOpRevision, List<Room> rooms)
      #else
      public void send_reportRooms(long syncOpRevision, List<Room> rooms)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reportRooms", TMessageType.Call, seqid_));
        reportRooms_args args = new reportRooms_args();
        args.SyncOpRevision = syncOpRevision;
        args.Rooms = rooms;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_reportRooms()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportRooms_result result = new reportRooms_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reportSettings(AsyncCallback callback, object state, long syncOpRevision, Settings settings)
      {
        return send_reportSettings(callback, state, syncOpRevision, settings);
      }

      public void End_reportSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_reportSettings();
      }

      #endif

      public void reportSettings(long syncOpRevision, Settings settings)
      {
        #if !SILVERLIGHT
        send_reportSettings(syncOpRevision, settings);
        recv_reportSettings();

        #else
        var asyncResult = Begin_reportSettings(null, null, syncOpRevision, settings);
        End_reportSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reportSettings(AsyncCallback callback, object state, long syncOpRevision, Settings settings)
      #else
      public void send_reportSettings(long syncOpRevision, Settings settings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reportSettings", TMessageType.Call, seqid_));
        reportSettings_args args = new reportSettings_args();
        args.SyncOpRevision = syncOpRevision;
        args.Settings = settings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_reportSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportSettings_result result = new reportSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reportSpammer(AsyncCallback callback, object state, string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
      {
        return send_reportSpammer(callback, state, spammerMid, spammerReasons, spamMessageIds);
      }

      public void End_reportSpammer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_reportSpammer();
      }

      #endif

      public void reportSpammer(string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
      {
        #if !SILVERLIGHT
        send_reportSpammer(spammerMid, spammerReasons, spamMessageIds);
        recv_reportSpammer();

        #else
        var asyncResult = Begin_reportSpammer(null, null, spammerMid, spammerReasons, spamMessageIds);
        End_reportSpammer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reportSpammer(AsyncCallback callback, object state, string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
      #else
      public void send_reportSpammer(string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reportSpammer", TMessageType.Call, seqid_));
        reportSpammer_args args = new reportSpammer_args();
        args.SpammerMid = spammerMid;
        args.SpammerReasons = spammerReasons;
        args.SpamMessageIds = spamMessageIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_reportSpammer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reportSpammer_result result = new reportSpammer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_requestAccountPasswordReset(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string locale)
      {
        return send_requestAccountPasswordReset(callback, state, provider, identifier, locale);
      }

      public void End_requestAccountPasswordReset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_requestAccountPasswordReset();
      }

      #endif

      public void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)
      {
        #if !SILVERLIGHT
        send_requestAccountPasswordReset(provider, identifier, locale);
        recv_requestAccountPasswordReset();

        #else
        var asyncResult = Begin_requestAccountPasswordReset(null, null, provider, identifier, locale);
        End_requestAccountPasswordReset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_requestAccountPasswordReset(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string locale)
      #else
      public void send_requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.Call, seqid_));
        requestAccountPasswordReset_args args = new requestAccountPasswordReset_args();
        args.Provider = provider;
        args.Identifier = identifier;
        args.Locale = locale;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_requestAccountPasswordReset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        requestAccountPasswordReset_result result = new requestAccountPasswordReset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_requestEmailConfirmation(AsyncCallback callback, object state, EmailConfirmation emailConfirmation)
      {
        return send_requestEmailConfirmation(callback, state, emailConfirmation);
      }

      public EmailConfirmationSession End_requestEmailConfirmation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_requestEmailConfirmation();
      }

      #endif

      public EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation)
      {
        #if !SILVERLIGHT
        send_requestEmailConfirmation(emailConfirmation);
        return recv_requestEmailConfirmation();

        #else
        var asyncResult = Begin_requestEmailConfirmation(null, null, emailConfirmation);
        return End_requestEmailConfirmation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_requestEmailConfirmation(AsyncCallback callback, object state, EmailConfirmation emailConfirmation)
      #else
      public void send_requestEmailConfirmation(EmailConfirmation emailConfirmation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.Call, seqid_));
        requestEmailConfirmation_args args = new requestEmailConfirmation_args();
        args.EmailConfirmation = emailConfirmation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public EmailConfirmationSession recv_requestEmailConfirmation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        requestEmailConfirmation_result result = new requestEmailConfirmation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestEmailConfirmation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_requestIdentityUnbind(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
      {
        return send_requestIdentityUnbind(callback, state, provider, identifier);
      }

      public void End_requestIdentityUnbind(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_requestIdentityUnbind();
      }

      #endif

      public void requestIdentityUnbind(IdentityProvider provider, string identifier)
      {
        #if !SILVERLIGHT
        send_requestIdentityUnbind(provider, identifier);
        recv_requestIdentityUnbind();

        #else
        var asyncResult = Begin_requestIdentityUnbind(null, null, provider, identifier);
        End_requestIdentityUnbind(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_requestIdentityUnbind(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
      #else
      public void send_requestIdentityUnbind(IdentityProvider provider, string identifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.Call, seqid_));
        requestIdentityUnbind_args args = new requestIdentityUnbind_args();
        args.Provider = provider;
        args.Identifier = identifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_requestIdentityUnbind()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        requestIdentityUnbind_result result = new requestIdentityUnbind_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_resendEmailConfirmation(AsyncCallback callback, object state, string verifier)
      {
        return send_resendEmailConfirmation(callback, state, verifier);
      }

      public EmailConfirmationSession End_resendEmailConfirmation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_resendEmailConfirmation();
      }

      #endif

      public EmailConfirmationSession resendEmailConfirmation(string verifier)
      {
        #if !SILVERLIGHT
        send_resendEmailConfirmation(verifier);
        return recv_resendEmailConfirmation();

        #else
        var asyncResult = Begin_resendEmailConfirmation(null, null, verifier);
        return End_resendEmailConfirmation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_resendEmailConfirmation(AsyncCallback callback, object state, string verifier)
      #else
      public void send_resendEmailConfirmation(string verifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.Call, seqid_));
        resendEmailConfirmation_args args = new resendEmailConfirmation_args();
        args.Verifier = verifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public EmailConfirmationSession recv_resendEmailConfirmation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resendEmailConfirmation_result result = new resendEmailConfirmation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resendEmailConfirmation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_resendPinCode(AsyncCallback callback, object state, string sessionId)
      {
        return send_resendPinCode(callback, state, sessionId);
      }

      public void End_resendPinCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_resendPinCode();
      }

      #endif

      public void resendPinCode(string sessionId)
      {
        #if !SILVERLIGHT
        send_resendPinCode(sessionId);
        recv_resendPinCode();

        #else
        var asyncResult = Begin_resendPinCode(null, null, sessionId);
        End_resendPinCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_resendPinCode(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_resendPinCode(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("resendPinCode", TMessageType.Call, seqid_));
        resendPinCode_args args = new resendPinCode_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_resendPinCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resendPinCode_result result = new resendPinCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_resendPinCodeBySMS(AsyncCallback callback, object state, string sessionId)
      {
        return send_resendPinCodeBySMS(callback, state, sessionId);
      }

      public void End_resendPinCodeBySMS(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_resendPinCodeBySMS();
      }

      #endif

      public void resendPinCodeBySMS(string sessionId)
      {
        #if !SILVERLIGHT
        send_resendPinCodeBySMS(sessionId);
        recv_resendPinCodeBySMS();

        #else
        var asyncResult = Begin_resendPinCodeBySMS(null, null, sessionId);
        End_resendPinCodeBySMS(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_resendPinCodeBySMS(AsyncCallback callback, object state, string sessionId)
      #else
      public void send_resendPinCodeBySMS(string sessionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.Call, seqid_));
        resendPinCodeBySMS_args args = new resendPinCodeBySMS_args();
        args.SessionId = sessionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_resendPinCodeBySMS()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resendPinCodeBySMS_result result = new resendPinCodeBySMS_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendChatChecked(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
      {
        return send_sendChatChecked(callback, state, seq, consumer, lastMessageId);
      }

      public void End_sendChatChecked(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_sendChatChecked();
      }

      #endif

      public void sendChatChecked(int seq, string consumer, string lastMessageId)
      {
        #if !SILVERLIGHT
        send_sendChatChecked(seq, consumer, lastMessageId);
        recv_sendChatChecked();

        #else
        var asyncResult = Begin_sendChatChecked(null, null, seq, consumer, lastMessageId);
        End_sendChatChecked(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendChatChecked(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
      #else
      public void send_sendChatChecked(int seq, string consumer, string lastMessageId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendChatChecked", TMessageType.Call, seqid_));
        sendChatChecked_args args = new sendChatChecked_args();
        args.Seq = seq;
        args.Consumer = consumer;
        args.LastMessageId = lastMessageId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_sendChatChecked()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendChatChecked_result result = new sendChatChecked_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendChatRemoved(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
      {
        return send_sendChatRemoved(callback, state, seq, consumer, lastMessageId);
      }

      public void End_sendChatRemoved(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_sendChatRemoved();
      }

      #endif

      public void sendChatRemoved(int seq, string consumer, string lastMessageId)
      {
        #if !SILVERLIGHT
        send_sendChatRemoved(seq, consumer, lastMessageId);
        recv_sendChatRemoved();

        #else
        var asyncResult = Begin_sendChatRemoved(null, null, seq, consumer, lastMessageId);
        End_sendChatRemoved(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendChatRemoved(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
      #else
      public void send_sendChatRemoved(int seq, string consumer, string lastMessageId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendChatRemoved", TMessageType.Call, seqid_));
        sendChatRemoved_args args = new sendChatRemoved_args();
        args.Seq = seq;
        args.Consumer = consumer;
        args.LastMessageId = lastMessageId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_sendChatRemoved()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendChatRemoved_result result = new sendChatRemoved_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendContentPreviewUpdated(AsyncCallback callback, object state, int esq, string messageId, List<string> receiverMids)
      {
        return send_sendContentPreviewUpdated(callback, state, esq, messageId, receiverMids);
      }

      public Dictionary<string, string> End_sendContentPreviewUpdated(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sendContentPreviewUpdated();
      }

      #endif

      public Dictionary<string, string> sendContentPreviewUpdated(int esq, string messageId, List<string> receiverMids)
      {
        #if !SILVERLIGHT
        send_sendContentPreviewUpdated(esq, messageId, receiverMids);
        return recv_sendContentPreviewUpdated();

        #else
        var asyncResult = Begin_sendContentPreviewUpdated(null, null, esq, messageId, receiverMids);
        return End_sendContentPreviewUpdated(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendContentPreviewUpdated(AsyncCallback callback, object state, int esq, string messageId, List<string> receiverMids)
      #else
      public void send_sendContentPreviewUpdated(int esq, string messageId, List<string> receiverMids)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.Call, seqid_));
        sendContentPreviewUpdated_args args = new sendContentPreviewUpdated_args();
        args.Esq = esq;
        args.MessageId = messageId;
        args.ReceiverMids = receiverMids;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_sendContentPreviewUpdated()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendContentPreviewUpdated_result result = new sendContentPreviewUpdated_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendContentPreviewUpdated failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendContentReceipt(AsyncCallback callback, object state, int seq, string consumer, string messageId)
      {
        return send_sendContentReceipt(callback, state, seq, consumer, messageId);
      }

      public void End_sendContentReceipt(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_sendContentReceipt();
      }

      #endif

      public void sendContentReceipt(int seq, string consumer, string messageId)
      {
        #if !SILVERLIGHT
        send_sendContentReceipt(seq, consumer, messageId);
        recv_sendContentReceipt();

        #else
        var asyncResult = Begin_sendContentReceipt(null, null, seq, consumer, messageId);
        End_sendContentReceipt(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendContentReceipt(AsyncCallback callback, object state, int seq, string consumer, string messageId)
      #else
      public void send_sendContentReceipt(int seq, string consumer, string messageId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendContentReceipt", TMessageType.Call, seqid_));
        sendContentReceipt_args args = new sendContentReceipt_args();
        args.Seq = seq;
        args.Consumer = consumer;
        args.MessageId = messageId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_sendContentReceipt()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendContentReceipt_result result = new sendContentReceipt_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendDummyPush(AsyncCallback callback, object state)
      {
        return send_sendDummyPush(callback, state);
      }

      public void End_sendDummyPush(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_sendDummyPush();
      }

      #endif

      public void sendDummyPush()
      {
        #if !SILVERLIGHT
        send_sendDummyPush();
        recv_sendDummyPush();

        #else
        var asyncResult = Begin_sendDummyPush(null, null);
        End_sendDummyPush(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendDummyPush(AsyncCallback callback, object state)
      #else
      public void send_sendDummyPush()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendDummyPush", TMessageType.Call, seqid_));
        sendDummyPush_args args = new sendDummyPush_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_sendDummyPush()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendDummyPush_result result = new sendDummyPush_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendEvent(AsyncCallback callback, object state, int seq, Message message)
      {
        return send_sendEvent(callback, state, seq, message);
      }

      public Message End_sendEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sendEvent();
      }

      #endif

      public Message sendEvent(int seq, Message message)
      {
        #if !SILVERLIGHT
        send_sendEvent(seq, message);
        return recv_sendEvent();

        #else
        var asyncResult = Begin_sendEvent(null, null, seq, message);
        return End_sendEvent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendEvent(AsyncCallback callback, object state, int seq, Message message)
      #else
      public void send_sendEvent(int seq, Message message)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendEvent", TMessageType.Call, seqid_));
        sendEvent_args args = new sendEvent_args();
        args.Seq = seq;
        args.Message = message;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Message recv_sendEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendEvent_result result = new sendEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, int seq, Message message)
      {
        return send_sendMessage(callback, state, seq, message);
      }

      public Message End_sendMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sendMessage();
      }

      #endif

      public Message sendMessage(int seq, Message message)
      {
        #if !SILVERLIGHT
        send_sendMessage(seq, message);
        return recv_sendMessage();

        #else
        var asyncResult = Begin_sendMessage(null, null, seq, message);
        return End_sendMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendMessage(AsyncCallback callback, object state, int seq, Message message)
      #else
      public void send_sendMessage(int seq, Message message)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
        sendMessage_args args = new sendMessage_args();
        args.Seq = seq;
        args.Message = message;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Message recv_sendMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendMessage_result result = new sendMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendMessageIgnored(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
      {
        return send_sendMessageIgnored(callback, state, seq, consumer, messageIds);
      }

      public void End_sendMessageIgnored(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_sendMessageIgnored();
      }

      #endif

      public void sendMessageIgnored(int seq, string consumer, List<string> messageIds)
      {
        #if !SILVERLIGHT
        send_sendMessageIgnored(seq, consumer, messageIds);
        recv_sendMessageIgnored();

        #else
        var asyncResult = Begin_sendMessageIgnored(null, null, seq, consumer, messageIds);
        End_sendMessageIgnored(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendMessageIgnored(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
      #else
      public void send_sendMessageIgnored(int seq, string consumer, List<string> messageIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendMessageIgnored", TMessageType.Call, seqid_));
        sendMessageIgnored_args args = new sendMessageIgnored_args();
        args.Seq = seq;
        args.Consumer = consumer;
        args.MessageIds = messageIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_sendMessageIgnored()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendMessageIgnored_result result = new sendMessageIgnored_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendMessageReceipt(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
      {
        return send_sendMessageReceipt(callback, state, seq, consumer, messageIds);
      }

      public void End_sendMessageReceipt(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_sendMessageReceipt();
      }

      #endif

      public void sendMessageReceipt(int seq, string consumer, List<string> messageIds)
      {
        #if !SILVERLIGHT
        send_sendMessageReceipt(seq, consumer, messageIds);
        recv_sendMessageReceipt();

        #else
        var asyncResult = Begin_sendMessageReceipt(null, null, seq, consumer, messageIds);
        End_sendMessageReceipt(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendMessageReceipt(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
      #else
      public void send_sendMessageReceipt(int seq, string consumer, List<string> messageIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendMessageReceipt", TMessageType.Call, seqid_));
        sendMessageReceipt_args args = new sendMessageReceipt_args();
        args.Seq = seq;
        args.Consumer = consumer;
        args.MessageIds = messageIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_sendMessageReceipt()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendMessageReceipt_result result = new sendMessageReceipt_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendMessageToMyHome(AsyncCallback callback, object state, int seq, Message message)
      {
        return send_sendMessageToMyHome(callback, state, seq, message);
      }

      public Message End_sendMessageToMyHome(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sendMessageToMyHome();
      }

      #endif

      public Message sendMessageToMyHome(int seq, Message message)
      {
        #if !SILVERLIGHT
        send_sendMessageToMyHome(seq, message);
        return recv_sendMessageToMyHome();

        #else
        var asyncResult = Begin_sendMessageToMyHome(null, null, seq, message);
        return End_sendMessageToMyHome(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendMessageToMyHome(AsyncCallback callback, object state, int seq, Message message)
      #else
      public void send_sendMessageToMyHome(int seq, Message message)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.Call, seqid_));
        sendMessageToMyHome_args args = new sendMessageToMyHome_args();
        args.Seq = seq;
        args.Message = message;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Message recv_sendMessageToMyHome()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendMessageToMyHome_result result = new sendMessageToMyHome_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessageToMyHome failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setBuddyLocation(AsyncCallback callback, object state, string mid, int index, Geolocation location)
      {
        return send_setBuddyLocation(callback, state, mid, index, location);
      }

      public void End_setBuddyLocation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setBuddyLocation();
      }

      #endif

      public void setBuddyLocation(string mid, int index, Geolocation location)
      {
        #if !SILVERLIGHT
        send_setBuddyLocation(mid, index, location);
        recv_setBuddyLocation();

        #else
        var asyncResult = Begin_setBuddyLocation(null, null, mid, index, location);
        End_setBuddyLocation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setBuddyLocation(AsyncCallback callback, object state, string mid, int index, Geolocation location)
      #else
      public void send_setBuddyLocation(string mid, int index, Geolocation location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setBuddyLocation", TMessageType.Call, seqid_));
        setBuddyLocation_args args = new setBuddyLocation_args();
        args.Mid = mid;
        args.Index = index;
        args.Location = location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setBuddyLocation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setBuddyLocation_result result = new setBuddyLocation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setIdentityCredential(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string verifier)
      {
        return send_setIdentityCredential(callback, state, provider, identifier, verifier);
      }

      public void End_setIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setIdentityCredential();
      }

      #endif

      public void setIdentityCredential(IdentityProvider provider, string identifier, string verifier)
      {
        #if !SILVERLIGHT
        send_setIdentityCredential(provider, identifier, verifier);
        recv_setIdentityCredential();

        #else
        var asyncResult = Begin_setIdentityCredential(null, null, provider, identifier, verifier);
        End_setIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setIdentityCredential(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string verifier)
      #else
      public void send_setIdentityCredential(IdentityProvider provider, string identifier, string verifier)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setIdentityCredential", TMessageType.Call, seqid_));
        setIdentityCredential_args args = new setIdentityCredential_args();
        args.Provider = provider;
        args.Identifier = identifier;
        args.Verifier = verifier;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setIdentityCredential_result result = new setIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setNotificationsEnabled(AsyncCallback callback, object state, int reqSeq, MIDType type, string target, bool enablement)
      {
        return send_setNotificationsEnabled(callback, state, reqSeq, type, target, enablement);
      }

      public void End_setNotificationsEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setNotificationsEnabled();
      }

      #endif

      public void setNotificationsEnabled(int reqSeq, MIDType type, string target, bool enablement)
      {
        #if !SILVERLIGHT
        send_setNotificationsEnabled(reqSeq, type, target, enablement);
        recv_setNotificationsEnabled();

        #else
        var asyncResult = Begin_setNotificationsEnabled(null, null, reqSeq, type, target, enablement);
        End_setNotificationsEnabled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setNotificationsEnabled(AsyncCallback callback, object state, int reqSeq, MIDType type, string target, bool enablement)
      #else
      public void send_setNotificationsEnabled(int reqSeq, MIDType type, string target, bool enablement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.Call, seqid_));
        setNotificationsEnabled_args args = new setNotificationsEnabled_args();
        args.ReqSeq = reqSeq;
        args.Type = type;
        args.Target = target;
        args.Enablement = enablement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setNotificationsEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setNotificationsEnabled_result result = new setNotificationsEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_startUpdateVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
      {
        return send_startUpdateVerification(callback, state, region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
      }

      public VerificationSessionData End_startUpdateVerification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_startUpdateVerification();
      }

      #endif

      public VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
      {
        #if !SILVERLIGHT
        send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
        return recv_startUpdateVerification();

        #else
        var asyncResult = Begin_startUpdateVerification(null, null, region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
        return End_startUpdateVerification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_startUpdateVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
      #else
      public void send_startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("startUpdateVerification", TMessageType.Call, seqid_));
        startUpdateVerification_args args = new startUpdateVerification_args();
        args.Region = region;
        args.Carrier = carrier;
        args.Phone = phone;
        args.UdidHash = udidHash;
        args.DeviceInfo = deviceInfo;
        args.NetworkCode = networkCode;
        args.Locale = locale;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public VerificationSessionData recv_startUpdateVerification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        startUpdateVerification_result result = new startUpdateVerification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startUpdateVerification failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_startVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale)
      {
        return send_startVerification(callback, state, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale);
      }

      public VerificationSessionData End_startVerification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_startVerification();
      }

      #endif

      public VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale)
      {
        #if !SILVERLIGHT
        send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale);
        return recv_startVerification();

        #else
        var asyncResult = Begin_startVerification(null, null, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale);
        return End_startVerification(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_startVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale)
      #else
      public void send_startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("startVerification", TMessageType.Call, seqid_));
        startVerification_args args = new startVerification_args();
        args.Region = region;
        args.Carrier = carrier;
        args.Phone = phone;
        args.UdidHash = udidHash;
        args.DeviceInfo = deviceInfo;
        args.NetworkCode = networkCode;
        args.Mid = mid;
        args.Locale = locale;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public VerificationSessionData recv_startVerification()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        startVerification_result result = new startVerification_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startVerification failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_storeUpdateProfileAttribute(AsyncCallback callback, object state, int seq, ProfileAttribute profileAttribute, string value)
      {
        return send_storeUpdateProfileAttribute(callback, state, seq, profileAttribute, value);
      }

      public void End_storeUpdateProfileAttribute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_storeUpdateProfileAttribute();
      }

      #endif

      public void storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, string value)
      {
        #if !SILVERLIGHT
        send_storeUpdateProfileAttribute(seq, profileAttribute, value);
        recv_storeUpdateProfileAttribute();

        #else
        var asyncResult = Begin_storeUpdateProfileAttribute(null, null, seq, profileAttribute, value);
        End_storeUpdateProfileAttribute(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_storeUpdateProfileAttribute(AsyncCallback callback, object state, int seq, ProfileAttribute profileAttribute, string value)
      #else
      public void send_storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, string value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.Call, seqid_));
        storeUpdateProfileAttribute_args args = new storeUpdateProfileAttribute_args();
        args.Seq = seq;
        args.ProfileAttribute = profileAttribute;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_storeUpdateProfileAttribute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        storeUpdateProfileAttribute_result result = new storeUpdateProfileAttribute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_syncContactBySnsIds(AsyncCallback callback, object state, int reqSeq, List<SnsFriendModification> modifications)
      {
        return send_syncContactBySnsIds(callback, state, reqSeq, modifications);
      }

      public List<SnsFriendContactRegistration> End_syncContactBySnsIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_syncContactBySnsIds();
      }

      #endif

      public List<SnsFriendContactRegistration> syncContactBySnsIds(int reqSeq, List<SnsFriendModification> modifications)
      {
        #if !SILVERLIGHT
        send_syncContactBySnsIds(reqSeq, modifications);
        return recv_syncContactBySnsIds();

        #else
        var asyncResult = Begin_syncContactBySnsIds(null, null, reqSeq, modifications);
        return End_syncContactBySnsIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_syncContactBySnsIds(AsyncCallback callback, object state, int reqSeq, List<SnsFriendModification> modifications)
      #else
      public void send_syncContactBySnsIds(int reqSeq, List<SnsFriendModification> modifications)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.Call, seqid_));
        syncContactBySnsIds_args args = new syncContactBySnsIds_args();
        args.ReqSeq = reqSeq;
        args.Modifications = modifications;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<SnsFriendContactRegistration> recv_syncContactBySnsIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        syncContactBySnsIds_result result = new syncContactBySnsIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "syncContactBySnsIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_syncContacts(AsyncCallback callback, object state, int reqSeq, List<ContactModification> localContacts)
      {
        return send_syncContacts(callback, state, reqSeq, localContacts);
      }

      public Dictionary<string, ContactRegistration> End_syncContacts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_syncContacts();
      }

      #endif

      public Dictionary<string, ContactRegistration> syncContacts(int reqSeq, List<ContactModification> localContacts)
      {
        #if !SILVERLIGHT
        send_syncContacts(reqSeq, localContacts);
        return recv_syncContacts();

        #else
        var asyncResult = Begin_syncContacts(null, null, reqSeq, localContacts);
        return End_syncContacts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_syncContacts(AsyncCallback callback, object state, int reqSeq, List<ContactModification> localContacts)
      #else
      public void send_syncContacts(int reqSeq, List<ContactModification> localContacts)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("syncContacts", TMessageType.Call, seqid_));
        syncContacts_args args = new syncContacts_args();
        args.ReqSeq = reqSeq;
        args.LocalContacts = localContacts;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, ContactRegistration> recv_syncContacts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        syncContacts_result result = new syncContacts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "syncContacts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_trySendMessage(AsyncCallback callback, object state, int seq, Message message)
      {
        return send_trySendMessage(callback, state, seq, message);
      }

      public Message End_trySendMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_trySendMessage();
      }

      #endif

      public Message trySendMessage(int seq, Message message)
      {
        #if !SILVERLIGHT
        send_trySendMessage(seq, message);
        return recv_trySendMessage();

        #else
        var asyncResult = Begin_trySendMessage(null, null, seq, message);
        return End_trySendMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_trySendMessage(AsyncCallback callback, object state, int seq, Message message)
      #else
      public void send_trySendMessage(int seq, Message message)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("trySendMessage", TMessageType.Call, seqid_));
        trySendMessage_args args = new trySendMessage_args();
        args.Seq = seq;
        args.Message = message;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Message recv_trySendMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        trySendMessage_result result = new trySendMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trySendMessage failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_unblockContact(AsyncCallback callback, object state, int reqSeq, string id)
      {
        return send_unblockContact(callback, state, reqSeq, id);
      }

      public void End_unblockContact(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_unblockContact();
      }

      #endif

      public void unblockContact(int reqSeq, string id)
      {
        #if !SILVERLIGHT
        send_unblockContact(reqSeq, id);
        recv_unblockContact();

        #else
        var asyncResult = Begin_unblockContact(null, null, reqSeq, id);
        End_unblockContact(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_unblockContact(AsyncCallback callback, object state, int reqSeq, string id)
      #else
      public void send_unblockContact(int reqSeq, string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("unblockContact", TMessageType.Call, seqid_));
        unblockContact_args args = new unblockContact_args();
        args.ReqSeq = reqSeq;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_unblockContact()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        unblockContact_result result = new unblockContact_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_unblockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
      {
        return send_unblockRecommendation(callback, state, reqSeq, id);
      }

      public void End_unblockRecommendation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_unblockRecommendation();
      }

      #endif

      public void unblockRecommendation(int reqSeq, string id)
      {
        #if !SILVERLIGHT
        send_unblockRecommendation(reqSeq, id);
        recv_unblockRecommendation();

        #else
        var asyncResult = Begin_unblockRecommendation(null, null, reqSeq, id);
        End_unblockRecommendation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_unblockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
      #else
      public void send_unblockRecommendation(int reqSeq, string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("unblockRecommendation", TMessageType.Call, seqid_));
        unblockRecommendation_args args = new unblockRecommendation_args();
        args.ReqSeq = reqSeq;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_unblockRecommendation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        unblockRecommendation_result result = new unblockRecommendation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_unregisterUserAndDevice(AsyncCallback callback, object state)
      {
        return send_unregisterUserAndDevice(callback, state);
      }

      public string End_unregisterUserAndDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_unregisterUserAndDevice();
      }

      #endif

      public string unregisterUserAndDevice()
      {
        #if !SILVERLIGHT
        send_unregisterUserAndDevice();
        return recv_unregisterUserAndDevice();

        #else
        var asyncResult = Begin_unregisterUserAndDevice(null, null);
        return End_unregisterUserAndDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_unregisterUserAndDevice(AsyncCallback callback, object state)
      #else
      public void send_unregisterUserAndDevice()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.Call, seqid_));
        unregisterUserAndDevice_args args = new unregisterUserAndDevice_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_unregisterUserAndDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        unregisterUserAndDevice_result result = new unregisterUserAndDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unregisterUserAndDevice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateApnsDeviceToken(AsyncCallback callback, object state, byte[] apnsDeviceToken)
      {
        return send_updateApnsDeviceToken(callback, state, apnsDeviceToken);
      }

      public void End_updateApnsDeviceToken(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateApnsDeviceToken();
      }

      #endif

      public void updateApnsDeviceToken(byte[] apnsDeviceToken)
      {
        #if !SILVERLIGHT
        send_updateApnsDeviceToken(apnsDeviceToken);
        recv_updateApnsDeviceToken();

        #else
        var asyncResult = Begin_updateApnsDeviceToken(null, null, apnsDeviceToken);
        End_updateApnsDeviceToken(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateApnsDeviceToken(AsyncCallback callback, object state, byte[] apnsDeviceToken)
      #else
      public void send_updateApnsDeviceToken(byte[] apnsDeviceToken)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.Call, seqid_));
        updateApnsDeviceToken_args args = new updateApnsDeviceToken_args();
        args.ApnsDeviceToken = apnsDeviceToken;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateApnsDeviceToken()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateApnsDeviceToken_result result = new updateApnsDeviceToken_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateBuddySetting(AsyncCallback callback, object state, string key, string value)
      {
        return send_updateBuddySetting(callback, state, key, value);
      }

      public void End_updateBuddySetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateBuddySetting();
      }

      #endif

      public void updateBuddySetting(string key, string value)
      {
        #if !SILVERLIGHT
        send_updateBuddySetting(key, value);
        recv_updateBuddySetting();

        #else
        var asyncResult = Begin_updateBuddySetting(null, null, key, value);
        End_updateBuddySetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateBuddySetting(AsyncCallback callback, object state, string key, string value)
      #else
      public void send_updateBuddySetting(string key, string value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateBuddySetting", TMessageType.Call, seqid_));
        updateBuddySetting_args args = new updateBuddySetting_args();
        args.Key = key;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateBuddySetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateBuddySetting_result result = new updateBuddySetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateC2DMRegistrationId(AsyncCallback callback, object state, string registrationId)
      {
        return send_updateC2DMRegistrationId(callback, state, registrationId);
      }

      public void End_updateC2DMRegistrationId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateC2DMRegistrationId();
      }

      #endif

      public void updateC2DMRegistrationId(string registrationId)
      {
        #if !SILVERLIGHT
        send_updateC2DMRegistrationId(registrationId);
        recv_updateC2DMRegistrationId();

        #else
        var asyncResult = Begin_updateC2DMRegistrationId(null, null, registrationId);
        End_updateC2DMRegistrationId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateC2DMRegistrationId(AsyncCallback callback, object state, string registrationId)
      #else
      public void send_updateC2DMRegistrationId(string registrationId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.Call, seqid_));
        updateC2DMRegistrationId_args args = new updateC2DMRegistrationId_args();
        args.RegistrationId = registrationId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateC2DMRegistrationId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateC2DMRegistrationId_result result = new updateC2DMRegistrationId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateContactSetting(AsyncCallback callback, object state, int reqSeq, string mid, ContactSetting flag, string value)
      {
        return send_updateContactSetting(callback, state, reqSeq, mid, flag, value);
      }

      public void End_updateContactSetting(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateContactSetting();
      }

      #endif

      public void updateContactSetting(int reqSeq, string mid, ContactSetting flag, string value)
      {
        #if !SILVERLIGHT
        send_updateContactSetting(reqSeq, mid, flag, value);
        recv_updateContactSetting();

        #else
        var asyncResult = Begin_updateContactSetting(null, null, reqSeq, mid, flag, value);
        End_updateContactSetting(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateContactSetting(AsyncCallback callback, object state, int reqSeq, string mid, ContactSetting flag, string value)
      #else
      public void send_updateContactSetting(int reqSeq, string mid, ContactSetting flag, string value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateContactSetting", TMessageType.Call, seqid_));
        updateContactSetting_args args = new updateContactSetting_args();
        args.ReqSeq = reqSeq;
        args.Mid = mid;
        args.Flag = flag;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateContactSetting()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateContactSetting_result result = new updateContactSetting_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateCustomModeSettings(AsyncCallback callback, object state, CustomMode customMode, Dictionary<string, string> paramMap)
      {
        return send_updateCustomModeSettings(callback, state, customMode, paramMap);
      }

      public void End_updateCustomModeSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateCustomModeSettings();
      }

      #endif

      public void updateCustomModeSettings(CustomMode customMode, Dictionary<string, string> paramMap)
      {
        #if !SILVERLIGHT
        send_updateCustomModeSettings(customMode, paramMap);
        recv_updateCustomModeSettings();

        #else
        var asyncResult = Begin_updateCustomModeSettings(null, null, customMode, paramMap);
        End_updateCustomModeSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateCustomModeSettings(AsyncCallback callback, object state, CustomMode customMode, Dictionary<string, string> paramMap)
      #else
      public void send_updateCustomModeSettings(CustomMode customMode, Dictionary<string, string> paramMap)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.Call, seqid_));
        updateCustomModeSettings_args args = new updateCustomModeSettings_args();
        args.CustomMode = customMode;
        args.ParamMap = paramMap;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateCustomModeSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateCustomModeSettings_result result = new updateCustomModeSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateDeviceInfo(AsyncCallback callback, object state, string deviceUid, DeviceInfo deviceInfo)
      {
        return send_updateDeviceInfo(callback, state, deviceUid, deviceInfo);
      }

      public void End_updateDeviceInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateDeviceInfo();
      }

      #endif

      public void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)
      {
        #if !SILVERLIGHT
        send_updateDeviceInfo(deviceUid, deviceInfo);
        recv_updateDeviceInfo();

        #else
        var asyncResult = Begin_updateDeviceInfo(null, null, deviceUid, deviceInfo);
        End_updateDeviceInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateDeviceInfo(AsyncCallback callback, object state, string deviceUid, DeviceInfo deviceInfo)
      #else
      public void send_updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateDeviceInfo", TMessageType.Call, seqid_));
        updateDeviceInfo_args args = new updateDeviceInfo_args();
        args.DeviceUid = deviceUid;
        args.DeviceInfo = deviceInfo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateDeviceInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateDeviceInfo_result result = new updateDeviceInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateGroup(AsyncCallback callback, object state, int reqSeq, Group group)
      {
        return send_updateGroup(callback, state, reqSeq, group);
      }

      public void End_updateGroup(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateGroup();
      }

      #endif

      public void updateGroup(int reqSeq, Group group)
      {
        #if !SILVERLIGHT
        send_updateGroup(reqSeq, group);
        recv_updateGroup();

        #else
        var asyncResult = Begin_updateGroup(null, null, reqSeq, group);
        End_updateGroup(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateGroup(AsyncCallback callback, object state, int reqSeq, Group group)
      #else
      public void send_updateGroup(int reqSeq, Group group)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Call, seqid_));
        updateGroup_args args = new updateGroup_args();
        args.ReqSeq = reqSeq;
        args.Group = group;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateGroup()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateGroup_result result = new updateGroup_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateNotificationToken(AsyncCallback callback, object state, NotificationType type, string token)
      {
        return send_updateNotificationToken(callback, state, type, token);
      }

      public void End_updateNotificationToken(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateNotificationToken();
      }

      #endif

      public void updateNotificationToken(NotificationType type, string token)
      {
        #if !SILVERLIGHT
        send_updateNotificationToken(type, token);
        recv_updateNotificationToken();

        #else
        var asyncResult = Begin_updateNotificationToken(null, null, type, token);
        End_updateNotificationToken(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateNotificationToken(AsyncCallback callback, object state, NotificationType type, string token)
      #else
      public void send_updateNotificationToken(NotificationType type, string token)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateNotificationToken", TMessageType.Call, seqid_));
        updateNotificationToken_args args = new updateNotificationToken_args();
        args.Type = type;
        args.Token = token;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateNotificationToken()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateNotificationToken_result result = new updateNotificationToken_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateNotificationTokenWithBytes(AsyncCallback callback, object state, NotificationType type, byte[] token)
      {
        return send_updateNotificationTokenWithBytes(callback, state, type, token);
      }

      public void End_updateNotificationTokenWithBytes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateNotificationTokenWithBytes();
      }

      #endif

      public void updateNotificationTokenWithBytes(NotificationType type, byte[] token)
      {
        #if !SILVERLIGHT
        send_updateNotificationTokenWithBytes(type, token);
        recv_updateNotificationTokenWithBytes();

        #else
        var asyncResult = Begin_updateNotificationTokenWithBytes(null, null, type, token);
        End_updateNotificationTokenWithBytes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateNotificationTokenWithBytes(AsyncCallback callback, object state, NotificationType type, byte[] token)
      #else
      public void send_updateNotificationTokenWithBytes(NotificationType type, byte[] token)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.Call, seqid_));
        updateNotificationTokenWithBytes_args args = new updateNotificationTokenWithBytes_args();
        args.Type = type;
        args.Token = token;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateNotificationTokenWithBytes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateNotificationTokenWithBytes_result result = new updateNotificationTokenWithBytes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateProfile(AsyncCallback callback, object state, int reqSeq, Profile profile)
      {
        return send_updateProfile(callback, state, reqSeq, profile);
      }

      public void End_updateProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateProfile();
      }

      #endif

      public void updateProfile(int reqSeq, Profile profile)
      {
        #if !SILVERLIGHT
        send_updateProfile(reqSeq, profile);
        recv_updateProfile();

        #else
        var asyncResult = Begin_updateProfile(null, null, reqSeq, profile);
        End_updateProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateProfile(AsyncCallback callback, object state, int reqSeq, Profile profile)
      #else
      public void send_updateProfile(int reqSeq, Profile profile)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateProfile", TMessageType.Call, seqid_));
        updateProfile_args args = new updateProfile_args();
        args.ReqSeq = reqSeq;
        args.Profile = profile;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateProfile_result result = new updateProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateProfileAttribute(AsyncCallback callback, object state, int reqSeq, ProfileAttribute attr, string value)
      {
        return send_updateProfileAttribute(callback, state, reqSeq, attr, value);
      }

      public void End_updateProfileAttribute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateProfileAttribute();
      }

      #endif

      public void updateProfileAttribute(int reqSeq, ProfileAttribute attr, string value)
      {
        #if !SILVERLIGHT
        send_updateProfileAttribute(reqSeq, attr, value);
        recv_updateProfileAttribute();

        #else
        var asyncResult = Begin_updateProfileAttribute(null, null, reqSeq, attr, value);
        End_updateProfileAttribute(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateProfileAttribute(AsyncCallback callback, object state, int reqSeq, ProfileAttribute attr, string value)
      #else
      public void send_updateProfileAttribute(int reqSeq, ProfileAttribute attr, string value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateProfileAttribute", TMessageType.Call, seqid_));
        updateProfileAttribute_args args = new updateProfileAttribute_args();
        args.ReqSeq = reqSeq;
        args.Attr = attr;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateProfileAttribute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateProfileAttribute_result result = new updateProfileAttribute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateRegion(AsyncCallback callback, object state, string region)
      {
        return send_updateRegion(callback, state, region);
      }

      public void End_updateRegion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateRegion();
      }

      #endif

      public void updateRegion(string region)
      {
        #if !SILVERLIGHT
        send_updateRegion(region);
        recv_updateRegion();

        #else
        var asyncResult = Begin_updateRegion(null, null, region);
        End_updateRegion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateRegion(AsyncCallback callback, object state, string region)
      #else
      public void send_updateRegion(string region)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateRegion", TMessageType.Call, seqid_));
        updateRegion_args args = new updateRegion_args();
        args.Region = region;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateRegion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateRegion_result result = new updateRegion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSettings(AsyncCallback callback, object state, int reqSeq, Settings settings)
      {
        return send_updateSettings(callback, state, reqSeq, settings);
      }

      public void End_updateSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateSettings();
      }

      #endif

      public void updateSettings(int reqSeq, Settings settings)
      {
        #if !SILVERLIGHT
        send_updateSettings(reqSeq, settings);
        recv_updateSettings();

        #else
        var asyncResult = Begin_updateSettings(null, null, reqSeq, settings);
        End_updateSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSettings(AsyncCallback callback, object state, int reqSeq, Settings settings)
      #else
      public void send_updateSettings(int reqSeq, Settings settings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSettings", TMessageType.Call, seqid_));
        updateSettings_args args = new updateSettings_args();
        args.ReqSeq = reqSeq;
        args.Settings = settings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSettings_result result = new updateSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSettings2(AsyncCallback callback, object state, int reqSeq, Settings settings)
      {
        return send_updateSettings2(callback, state, reqSeq, settings);
      }

      public int End_updateSettings2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateSettings2();
      }

      #endif

      public int updateSettings2(int reqSeq, Settings settings)
      {
        #if !SILVERLIGHT
        send_updateSettings2(reqSeq, settings);
        return recv_updateSettings2();

        #else
        var asyncResult = Begin_updateSettings2(null, null, reqSeq, settings);
        return End_updateSettings2(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSettings2(AsyncCallback callback, object state, int reqSeq, Settings settings)
      #else
      public void send_updateSettings2(int reqSeq, Settings settings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSettings2", TMessageType.Call, seqid_));
        updateSettings2_args args = new updateSettings2_args();
        args.ReqSeq = reqSeq;
        args.Settings = settings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_updateSettings2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSettings2_result result = new updateSettings2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSettings2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSettingsAttribute(AsyncCallback callback, object state, int reqSeq, SettingsAttribute attr, string value)
      {
        return send_updateSettingsAttribute(callback, state, reqSeq, attr, value);
      }

      public void End_updateSettingsAttribute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateSettingsAttribute();
      }

      #endif

      public void updateSettingsAttribute(int reqSeq, SettingsAttribute attr, string value)
      {
        #if !SILVERLIGHT
        send_updateSettingsAttribute(reqSeq, attr, value);
        recv_updateSettingsAttribute();

        #else
        var asyncResult = Begin_updateSettingsAttribute(null, null, reqSeq, attr, value);
        End_updateSettingsAttribute(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSettingsAttribute(AsyncCallback callback, object state, int reqSeq, SettingsAttribute attr, string value)
      #else
      public void send_updateSettingsAttribute(int reqSeq, SettingsAttribute attr, string value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.Call, seqid_));
        updateSettingsAttribute_args args = new updateSettingsAttribute_args();
        args.ReqSeq = reqSeq;
        args.Attr = attr;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateSettingsAttribute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSettingsAttribute_result result = new updateSettingsAttribute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSettingsAttributes(AsyncCallback callback, object state, int reqSeq, int attrBitset, Settings settings)
      {
        return send_updateSettingsAttributes(callback, state, reqSeq, attrBitset, settings);
      }

      public int End_updateSettingsAttributes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateSettingsAttributes();
      }

      #endif

      public int updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings)
      {
        #if !SILVERLIGHT
        send_updateSettingsAttributes(reqSeq, attrBitset, settings);
        return recv_updateSettingsAttributes();

        #else
        var asyncResult = Begin_updateSettingsAttributes(null, null, reqSeq, attrBitset, settings);
        return End_updateSettingsAttributes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSettingsAttributes(AsyncCallback callback, object state, int reqSeq, int attrBitset, Settings settings)
      #else
      public void send_updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.Call, seqid_));
        updateSettingsAttributes_args args = new updateSettingsAttributes_args();
        args.ReqSeq = reqSeq;
        args.AttrBitset = attrBitset;
        args.Settings = settings;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_updateSettingsAttributes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSettingsAttributes_result result = new updateSettingsAttributes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSettingsAttributes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_verifyIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password)
      {
        return send_verifyIdentityCredential(callback, state, identityProvider, identifier, password);
      }

      public void End_verifyIdentityCredential(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_verifyIdentityCredential();
      }

      #endif

      public void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)
      {
        #if !SILVERLIGHT
        send_verifyIdentityCredential(identityProvider, identifier, password);
        recv_verifyIdentityCredential();

        #else
        var asyncResult = Begin_verifyIdentityCredential(null, null, identityProvider, identifier, password);
        End_verifyIdentityCredential(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_verifyIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password)
      #else
      public void send_verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.Call, seqid_));
        verifyIdentityCredential_args args = new verifyIdentityCredential_args();
        args.IdentityProvider = identityProvider;
        args.Identifier = identifier;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_verifyIdentityCredential()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        verifyIdentityCredential_result result = new verifyIdentityCredential_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_verifyIdentityCredentialWithResult(AsyncCallback callback, object state, IdentityCredential identityCredential)
      {
        return send_verifyIdentityCredentialWithResult(callback, state, identityCredential);
      }

      public UserAuthStatus End_verifyIdentityCredentialWithResult(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_verifyIdentityCredentialWithResult();
      }

      #endif

      public UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential)
      {
        #if !SILVERLIGHT
        send_verifyIdentityCredentialWithResult(identityCredential);
        return recv_verifyIdentityCredentialWithResult();

        #else
        var asyncResult = Begin_verifyIdentityCredentialWithResult(null, null, identityCredential);
        return End_verifyIdentityCredentialWithResult(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_verifyIdentityCredentialWithResult(AsyncCallback callback, object state, IdentityCredential identityCredential)
      #else
      public void send_verifyIdentityCredentialWithResult(IdentityCredential identityCredential)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.Call, seqid_));
        verifyIdentityCredentialWithResult_args args = new verifyIdentityCredentialWithResult_args();
        args.IdentityCredential = identityCredential;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserAuthStatus recv_verifyIdentityCredentialWithResult()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        verifyIdentityCredentialWithResult_result result = new verifyIdentityCredentialWithResult_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyIdentityCredentialWithResult failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_verifyPhone(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash)
      {
        return send_verifyPhone(callback, state, sessionId, pinCode, udidHash);
      }

      public VerificationResult End_verifyPhone(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_verifyPhone();
      }

      #endif

      public VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash)
      {
        #if !SILVERLIGHT
        send_verifyPhone(sessionId, pinCode, udidHash);
        return recv_verifyPhone();

        #else
        var asyncResult = Begin_verifyPhone(null, null, sessionId, pinCode, udidHash);
        return End_verifyPhone(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_verifyPhone(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash)
      #else
      public void send_verifyPhone(string sessionId, string pinCode, string udidHash)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("verifyPhone", TMessageType.Call, seqid_));
        verifyPhone_args args = new verifyPhone_args();
        args.SessionId = sessionId;
        args.PinCode = pinCode;
        args.UdidHash = udidHash;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public VerificationResult recv_verifyPhone()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        verifyPhone_result result = new verifyPhone_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyPhone failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_verifyQrcode(AsyncCallback callback, object state, string verifier, string pinCode)
      {
        return send_verifyQrcode(callback, state, verifier, pinCode);
      }

      public string End_verifyQrcode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_verifyQrcode();
      }

      #endif

      public string verifyQrcode(string verifier, string pinCode)
      {
        #if !SILVERLIGHT
        send_verifyQrcode(verifier, pinCode);
        return recv_verifyQrcode();

        #else
        var asyncResult = Begin_verifyQrcode(null, null, verifier, pinCode);
        return End_verifyQrcode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_verifyQrcode(AsyncCallback callback, object state, string verifier, string pinCode)
      #else
      public void send_verifyQrcode(string verifier, string pinCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("verifyQrcode", TMessageType.Call, seqid_));
        verifyQrcode_args args = new verifyQrcode_args();
        args.Verifier = verifier;
        args.PinCode = pinCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_verifyQrcode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        verifyQrcode_result result = new verifyQrcode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyQrcode failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["acceptGroupInvitation"] = acceptGroupInvitation_Process;
        processMap_["acceptProximityMatches"] = acceptProximityMatches_Process;
        processMap_["acquireCallRoute"] = acquireCallRoute_Process;
        processMap_["acquireCallTicket"] = acquireCallTicket_Process;
        processMap_["acquireEncryptedAccessToken"] = acquireEncryptedAccessToken_Process;
        processMap_["addSnsId"] = addSnsId_Process;
        processMap_["blockContact"] = blockContact_Process;
        processMap_["blockRecommendation"] = blockRecommendation_Process;
        processMap_["cancelGroupInvitation"] = cancelGroupInvitation_Process;
        processMap_["changeVerificationMethod"] = changeVerificationMethod_Process;
        processMap_["clearIdentityCredential"] = clearIdentityCredential_Process;
        processMap_["clearMessageBox"] = clearMessageBox_Process;
        processMap_["closeProximityMatch"] = closeProximityMatch_Process;
        processMap_["commitSendMessage"] = commitSendMessage_Process;
        processMap_["commitSendMessages"] = commitSendMessages_Process;
        processMap_["commitUpdateProfile"] = commitUpdateProfile_Process;
        processMap_["confirmEmail"] = confirmEmail_Process;
        processMap_["createGroup"] = createGroup_Process;
        processMap_["createQrcodeBase64Image"] = createQrcodeBase64Image_Process;
        processMap_["createRoom"] = createRoom_Process;
        processMap_["createSession"] = createSession_Process;
        processMap_["fetchAnnouncements"] = fetchAnnouncements_Process;
        processMap_["fetchMessages"] = fetchMessages_Process;
        processMap_["fetchOperations"] = fetchOperations_Process;
        processMap_["fetchOps"] = fetchOps_Process;
        processMap_["findAndAddContactsByEmail"] = findAndAddContactsByEmail_Process;
        processMap_["findAndAddContactsByMid"] = findAndAddContactsByMid_Process;
        processMap_["findAndAddContactsByPhone"] = findAndAddContactsByPhone_Process;
        processMap_["findAndAddContactsByUserid"] = findAndAddContactsByUserid_Process;
        processMap_["findContactByUserid"] = findContactByUserid_Process;
        processMap_["findContactByUserTicket"] = findContactByUserTicket_Process;
        processMap_["findContactsByEmail"] = findContactsByEmail_Process;
        processMap_["findContactsByPhone"] = findContactsByPhone_Process;
        processMap_["findSnsIdUserStatus"] = findSnsIdUserStatus_Process;
        processMap_["finishUpdateVerification"] = finishUpdateVerification_Process;
        processMap_["generateUserTicket"] = generateUserTicket_Process;
        processMap_["getAcceptedProximityMatches"] = getAcceptedProximityMatches_Process;
        processMap_["getActiveBuddySubscriberIds"] = getActiveBuddySubscriberIds_Process;
        processMap_["getAllContactIds"] = getAllContactIds_Process;
        processMap_["getAuthQrcode"] = getAuthQrcode_Process;
        processMap_["getBlockedContactIds"] = getBlockedContactIds_Process;
        processMap_["getBlockedContactIdsByRange"] = getBlockedContactIdsByRange_Process;
        processMap_["getBlockedRecommendationIds"] = getBlockedRecommendationIds_Process;
        processMap_["getBuddyBlockerIds"] = getBuddyBlockerIds_Process;
        processMap_["getBuddyLocation"] = getBuddyLocation_Process;
        processMap_["getCompactContactsModifiedSince"] = getCompactContactsModifiedSince_Process;
        processMap_["getCompactGroup"] = getCompactGroup_Process;
        processMap_["getCompactRoom"] = getCompactRoom_Process;
        processMap_["getContact"] = getContact_Process;
        processMap_["getContacts"] = getContacts_Process;
        processMap_["getCountryWithRequestIp"] = getCountryWithRequestIp_Process;
        processMap_["getFavoriteMids"] = getFavoriteMids_Process;
        processMap_["getGroup"] = getGroup_Process;
        processMap_["getGroupIdsInvited"] = getGroupIdsInvited_Process;
        processMap_["getGroupIdsJoined"] = getGroupIdsJoined_Process;
        processMap_["getGroups"] = getGroups_Process;
        processMap_["getHiddenContactMids"] = getHiddenContactMids_Process;
        processMap_["getIdentityIdentifier"] = getIdentityIdentifier_Process;
        processMap_["getLastAnnouncementIndex"] = getLastAnnouncementIndex_Process;
        processMap_["getLastOpRevision"] = getLastOpRevision_Process;
        processMap_["getMessageBox"] = getMessageBox_Process;
        processMap_["getMessageBoxCompactWrapUp"] = getMessageBoxCompactWrapUp_Process;
        processMap_["getMessageBoxCompactWrapUpList"] = getMessageBoxCompactWrapUpList_Process;
        processMap_["getMessageBoxList"] = getMessageBoxList_Process;
        processMap_["getMessageBoxListByStatus"] = getMessageBoxListByStatus_Process;
        processMap_["getMessageBoxWrapUp"] = getMessageBoxWrapUp_Process;
        processMap_["getMessageBoxWrapUpList"] = getMessageBoxWrapUpList_Process;
        processMap_["getMessagesBySequenceNumber"] = getMessagesBySequenceNumber_Process;
        processMap_["getNextMessages"] = getNextMessages_Process;
        processMap_["getNotificationPolicy"] = getNotificationPolicy_Process;
        processMap_["getPreviousMessages"] = getPreviousMessages_Process;
        processMap_["getProfile"] = getProfile_Process;
        processMap_["getProximityMatchCandidateList"] = getProximityMatchCandidateList_Process;
        processMap_["getProximityMatchCandidates"] = getProximityMatchCandidates_Process;
        processMap_["getRecentMessages"] = getRecentMessages_Process;
        processMap_["getRecommendationIds"] = getRecommendationIds_Process;
        processMap_["getRoom"] = getRoom_Process;
        processMap_["getRSAKeyInfo"] = getRSAKeyInfo_Process;
        processMap_["getServerTime"] = getServerTime_Process;
        processMap_["getSessions"] = getSessions_Process;
        processMap_["getSettings"] = getSettings_Process;
        processMap_["getSettingsAttributes"] = getSettingsAttributes_Process;
        processMap_["getSystemConfiguration"] = getSystemConfiguration_Process;
        processMap_["getUserTicket"] = getUserTicket_Process;
        processMap_["getWapInvitation"] = getWapInvitation_Process;
        processMap_["invalidateUserTicket"] = invalidateUserTicket_Process;
        processMap_["inviteFriendsBySms"] = inviteFriendsBySms_Process;
        processMap_["inviteIntoGroup"] = inviteIntoGroup_Process;
        processMap_["inviteIntoRoom"] = inviteIntoRoom_Process;
        processMap_["inviteViaEmail"] = inviteViaEmail_Process;
        processMap_["isIdentityIdentifierAvailable"] = isIdentityIdentifierAvailable_Process;
        processMap_["isUseridAvailable"] = isUseridAvailable_Process;
        processMap_["kickoutFromGroup"] = kickoutFromGroup_Process;
        processMap_["leaveGroup"] = leaveGroup_Process;
        processMap_["leaveRoom"] = leaveRoom_Process;
        processMap_["loginWithIdentityCredential"] = loginWithIdentityCredential_Process;
        processMap_["loginWithIdentityCredentialForCertificate"] = loginWithIdentityCredentialForCertificate_Process;
        processMap_["loginWithVerifier"] = loginWithVerifier_Process;
        processMap_["loginWithVerifierForCerificate"] = loginWithVerifierForCerificate_Process;
        processMap_["loginWithVerifierForCertificate"] = loginWithVerifierForCertificate_Process;
        processMap_["logout"] = logout_Process;
        processMap_["logoutSession"] = logoutSession_Process;
        processMap_["noop"] = noop_Process;
        processMap_["notifiedRedirect"] = notifiedRedirect_Process;
        processMap_["notifyBuddyOnAir"] = notifyBuddyOnAir_Process;
        processMap_["notifyIndividualEvent"] = notifyIndividualEvent_Process;
        processMap_["notifyInstalled"] = notifyInstalled_Process;
        processMap_["notifyRegistrationComplete"] = notifyRegistrationComplete_Process;
        processMap_["notifySleep"] = notifySleep_Process;
        processMap_["notifyUpdated"] = notifyUpdated_Process;
        processMap_["openProximityMatch"] = openProximityMatch_Process;
        processMap_["registerBuddyUser"] = registerBuddyUser_Process;
        processMap_["registerBuddyUserid"] = registerBuddyUserid_Process;
        processMap_["registerDevice"] = registerDevice_Process;
        processMap_["registerDeviceWithIdentityCredential"] = registerDeviceWithIdentityCredential_Process;
        processMap_["registerDeviceWithoutPhoneNumber"] = registerDeviceWithoutPhoneNumber_Process;
        processMap_["registerDeviceWithoutPhoneNumberWithIdentityCredential"] = registerDeviceWithoutPhoneNumberWithIdentityCredential_Process;
        processMap_["registerUserid"] = registerUserid_Process;
        processMap_["registerWapDevice"] = registerWapDevice_Process;
        processMap_["registerWithExistingSnsIdAndIdentityCredential"] = registerWithExistingSnsIdAndIdentityCredential_Process;
        processMap_["registerWithSnsId"] = registerWithSnsId_Process;
        processMap_["registerWithSnsIdAndIdentityCredential"] = registerWithSnsIdAndIdentityCredential_Process;
        processMap_["reissueDeviceCredential"] = reissueDeviceCredential_Process;
        processMap_["reissueUserTicket"] = reissueUserTicket_Process;
        processMap_["rejectGroupInvitation"] = rejectGroupInvitation_Process;
        processMap_["releaseSession"] = releaseSession_Process;
        processMap_["removeAllMessages"] = removeAllMessages_Process;
        processMap_["removeBuddyLocation"] = removeBuddyLocation_Process;
        processMap_["removeMessage"] = removeMessage_Process;
        processMap_["removeMessageFromMyHome"] = removeMessageFromMyHome_Process;
        processMap_["removeSnsId"] = removeSnsId_Process;
        processMap_["report"] = report_Process;
        processMap_["reportContacts"] = reportContacts_Process;
        processMap_["reportGroups"] = reportGroups_Process;
        processMap_["reportProfile"] = reportProfile_Process;
        processMap_["reportRooms"] = reportRooms_Process;
        processMap_["reportSettings"] = reportSettings_Process;
        processMap_["reportSpammer"] = reportSpammer_Process;
        processMap_["requestAccountPasswordReset"] = requestAccountPasswordReset_Process;
        processMap_["requestEmailConfirmation"] = requestEmailConfirmation_Process;
        processMap_["requestIdentityUnbind"] = requestIdentityUnbind_Process;
        processMap_["resendEmailConfirmation"] = resendEmailConfirmation_Process;
        processMap_["resendPinCode"] = resendPinCode_Process;
        processMap_["resendPinCodeBySMS"] = resendPinCodeBySMS_Process;
        processMap_["sendChatChecked"] = sendChatChecked_Process;
        processMap_["sendChatRemoved"] = sendChatRemoved_Process;
        processMap_["sendContentPreviewUpdated"] = sendContentPreviewUpdated_Process;
        processMap_["sendContentReceipt"] = sendContentReceipt_Process;
        processMap_["sendDummyPush"] = sendDummyPush_Process;
        processMap_["sendEvent"] = sendEvent_Process;
        processMap_["sendMessage"] = sendMessage_Process;
        processMap_["sendMessageIgnored"] = sendMessageIgnored_Process;
        processMap_["sendMessageReceipt"] = sendMessageReceipt_Process;
        processMap_["sendMessageToMyHome"] = sendMessageToMyHome_Process;
        processMap_["setBuddyLocation"] = setBuddyLocation_Process;
        processMap_["setIdentityCredential"] = setIdentityCredential_Process;
        processMap_["setNotificationsEnabled"] = setNotificationsEnabled_Process;
        processMap_["startUpdateVerification"] = startUpdateVerification_Process;
        processMap_["startVerification"] = startVerification_Process;
        processMap_["storeUpdateProfileAttribute"] = storeUpdateProfileAttribute_Process;
        processMap_["syncContactBySnsIds"] = syncContactBySnsIds_Process;
        processMap_["syncContacts"] = syncContacts_Process;
        processMap_["trySendMessage"] = trySendMessage_Process;
        processMap_["unblockContact"] = unblockContact_Process;
        processMap_["unblockRecommendation"] = unblockRecommendation_Process;
        processMap_["unregisterUserAndDevice"] = unregisterUserAndDevice_Process;
        processMap_["updateApnsDeviceToken"] = updateApnsDeviceToken_Process;
        processMap_["updateBuddySetting"] = updateBuddySetting_Process;
        processMap_["updateC2DMRegistrationId"] = updateC2DMRegistrationId_Process;
        processMap_["updateContactSetting"] = updateContactSetting_Process;
        processMap_["updateCustomModeSettings"] = updateCustomModeSettings_Process;
        processMap_["updateDeviceInfo"] = updateDeviceInfo_Process;
        processMap_["updateGroup"] = updateGroup_Process;
        processMap_["updateNotificationToken"] = updateNotificationToken_Process;
        processMap_["updateNotificationTokenWithBytes"] = updateNotificationTokenWithBytes_Process;
        processMap_["updateProfile"] = updateProfile_Process;
        processMap_["updateProfileAttribute"] = updateProfileAttribute_Process;
        processMap_["updateRegion"] = updateRegion_Process;
        processMap_["updateSettings"] = updateSettings_Process;
        processMap_["updateSettings2"] = updateSettings2_Process;
        processMap_["updateSettingsAttribute"] = updateSettingsAttribute_Process;
        processMap_["updateSettingsAttributes"] = updateSettingsAttributes_Process;
        processMap_["verifyIdentityCredential"] = verifyIdentityCredential_Process;
        processMap_["verifyIdentityCredentialWithResult"] = verifyIdentityCredentialWithResult_Process;
        processMap_["verifyPhone"] = verifyPhone_Process;
        processMap_["verifyQrcode"] = verifyQrcode_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void acceptGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acceptGroupInvitation_args args = new acceptGroupInvitation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acceptGroupInvitation_result result = new acceptGroupInvitation_result();
        try {
          iface_.acceptGroupInvitation(args.ReqSeq, args.GroupId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void acceptProximityMatches_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acceptProximityMatches_args args = new acceptProximityMatches_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acceptProximityMatches_result result = new acceptProximityMatches_result();
        try {
          iface_.acceptProximityMatches(args.SessionId, args.Ids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acceptProximityMatches", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void acquireCallRoute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acquireCallRoute_args args = new acquireCallRoute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acquireCallRoute_result result = new acquireCallRoute_result();
        try {
          result.Success = iface_.acquireCallRoute(args.To);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquireCallRoute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void acquireCallTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acquireCallTicket_args args = new acquireCallTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acquireCallTicket_result result = new acquireCallTicket_result();
        try {
          result.Success = iface_.acquireCallTicket(args.To);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquireCallTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void acquireEncryptedAccessToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        acquireEncryptedAccessToken_args args = new acquireEncryptedAccessToken_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        acquireEncryptedAccessToken_result result = new acquireEncryptedAccessToken_result();
        try {
          result.Success = iface_.acquireEncryptedAccessToken(args.FeatureType);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addSnsId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addSnsId_args args = new addSnsId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addSnsId_result result = new addSnsId_result();
        try {
          result.Success = iface_.addSnsId(args.SnsIdType, args.SnsAccessToken);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("addSnsId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void blockContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        blockContact_args args = new blockContact_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        blockContact_result result = new blockContact_result();
        try {
          iface_.blockContact(args.ReqSeq, args.Id);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("blockContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void blockRecommendation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        blockRecommendation_args args = new blockRecommendation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        blockRecommendation_result result = new blockRecommendation_result();
        try {
          iface_.blockRecommendation(args.ReqSeq, args.Id);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("blockRecommendation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancelGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancelGroupInvitation_args args = new cancelGroupInvitation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancelGroupInvitation_result result = new cancelGroupInvitation_result();
        try {
          iface_.cancelGroupInvitation(args.ReqSeq, args.GroupId, args.ContactIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changeVerificationMethod_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changeVerificationMethod_args args = new changeVerificationMethod_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changeVerificationMethod_result result = new changeVerificationMethod_result();
        try {
          result.Success = iface_.changeVerificationMethod(args.SessionId, args.Method);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("changeVerificationMethod", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clearIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearIdentityCredential_args args = new clearIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearIdentityCredential_result result = new clearIdentityCredential_result();
        try {
          iface_.clearIdentityCredential();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("clearIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clearMessageBox_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearMessageBox_args args = new clearMessageBox_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearMessageBox_result result = new clearMessageBox_result();
        try {
          iface_.clearMessageBox(args.ChannelId, args.MessageBoxId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("clearMessageBox", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void closeProximityMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        closeProximityMatch_args args = new closeProximityMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        closeProximityMatch_result result = new closeProximityMatch_result();
        try {
          iface_.closeProximityMatch(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("closeProximityMatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void commitSendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        commitSendMessage_args args = new commitSendMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        commitSendMessage_result result = new commitSendMessage_result();
        try {
          result.Success = iface_.commitSendMessage(args.Seq, args.MessageId, args.ReceiverMids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("commitSendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void commitSendMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        commitSendMessages_args args = new commitSendMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        commitSendMessages_result result = new commitSendMessages_result();
        try {
          result.Success = iface_.commitSendMessages(args.Seq, args.MessageIds, args.ReceiverMids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("commitSendMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void commitUpdateProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        commitUpdateProfile_args args = new commitUpdateProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        commitUpdateProfile_result result = new commitUpdateProfile_result();
        try {
          result.Success = iface_.commitUpdateProfile(args.Seq, args.Attrs, args.ReceiverMids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("commitUpdateProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void confirmEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        confirmEmail_args args = new confirmEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        confirmEmail_result result = new confirmEmail_result();
        try {
          iface_.confirmEmail(args.Verifier, args.PinCode);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("confirmEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createGroup_args args = new createGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createGroup_result result = new createGroup_result();
        try {
          result.Success = iface_.createGroup(args.Seq, args.Name, args.ContactIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createQrcodeBase64Image_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createQrcodeBase64Image_args args = new createQrcodeBase64Image_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createQrcodeBase64Image_result result = new createQrcodeBase64Image_result();
        try {
          result.Success = iface_.createQrcodeBase64Image(args.Url, args.CharacterSet, args.ImageSize, args.X, args.Y, args.Width, args.Height);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createRoom_args args = new createRoom_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createRoom_result result = new createRoom_result();
        try {
          result.Success = iface_.createRoom(args.ReqSeq, args.ContactIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createSession_args args = new createSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createSession_result result = new createSession_result();
        try {
          result.Success = iface_.createSession();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fetchAnnouncements_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fetchAnnouncements_args args = new fetchAnnouncements_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fetchAnnouncements_result result = new fetchAnnouncements_result();
        try {
          result.Success = iface_.fetchAnnouncements(args.LastFetchedIndex);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchAnnouncements", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fetchMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fetchMessages_args args = new fetchMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fetchMessages_result result = new fetchMessages_result();
        try {
          result.Success = iface_.fetchMessages(args.LocalTs, args.Count);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fetchOperations_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fetchOperations_args args = new fetchOperations_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fetchOperations_result result = new fetchOperations_result();
        try {
          result.Success = iface_.fetchOperations(args.LocalRev, args.Count);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchOperations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fetchOps_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fetchOps_args args = new fetchOps_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fetchOps_result result = new fetchOps_result();
        try {
          result.Success = iface_.fetchOps(args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchOps", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAndAddContactsByEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAndAddContactsByEmail_args args = new findAndAddContactsByEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAndAddContactsByEmail_result result = new findAndAddContactsByEmail_result();
        try {
          result.Success = iface_.findAndAddContactsByEmail(args.ReqSeq, args.Emails);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAndAddContactsByMid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAndAddContactsByMid_args args = new findAndAddContactsByMid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAndAddContactsByMid_result result = new findAndAddContactsByMid_result();
        try {
          result.Success = iface_.findAndAddContactsByMid(args.ReqSeq, args.Mid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAndAddContactsByPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAndAddContactsByPhone_args args = new findAndAddContactsByPhone_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAndAddContactsByPhone_result result = new findAndAddContactsByPhone_result();
        try {
          result.Success = iface_.findAndAddContactsByPhone(args.ReqSeq, args.Phones);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findAndAddContactsByUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findAndAddContactsByUserid_args args = new findAndAddContactsByUserid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findAndAddContactsByUserid_result result = new findAndAddContactsByUserid_result();
        try {
          result.Success = iface_.findAndAddContactsByUserid(args.ReqSeq, args.Userid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findContactByUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findContactByUserid_args args = new findContactByUserid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findContactByUserid_result result = new findContactByUserid_result();
        try {
          result.Success = iface_.findContactByUserid(args.Userid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactByUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findContactByUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findContactByUserTicket_args args = new findContactByUserTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findContactByUserTicket_result result = new findContactByUserTicket_result();
        try {
          result.Success = iface_.findContactByUserTicket(args.TicketId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactByUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findContactsByEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findContactsByEmail_args args = new findContactsByEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findContactsByEmail_result result = new findContactsByEmail_result();
        try {
          result.Success = iface_.findContactsByEmail(args.Emails);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactsByEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findContactsByPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findContactsByPhone_args args = new findContactsByPhone_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findContactsByPhone_result result = new findContactsByPhone_result();
        try {
          result.Success = iface_.findContactsByPhone(args.Phones);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactsByPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findSnsIdUserStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findSnsIdUserStatus_args args = new findSnsIdUserStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findSnsIdUserStatus_result result = new findSnsIdUserStatus_result();
        try {
          result.Success = iface_.findSnsIdUserStatus(args.SnsIdType, args.SnsAccessToken, args.UdidHash);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void finishUpdateVerification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        finishUpdateVerification_args args = new finishUpdateVerification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        finishUpdateVerification_result result = new finishUpdateVerification_result();
        try {
          iface_.finishUpdateVerification(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("finishUpdateVerification", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void generateUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        generateUserTicket_args args = new generateUserTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        generateUserTicket_result result = new generateUserTicket_result();
        try {
          result.Success = iface_.generateUserTicket(args.ExpirationTime, args.MaxUseCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("generateUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAcceptedProximityMatches_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAcceptedProximityMatches_args args = new getAcceptedProximityMatches_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAcceptedProximityMatches_result result = new getAcceptedProximityMatches_result();
        try {
          result.Success = iface_.getAcceptedProximityMatches(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActiveBuddySubscriberIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActiveBuddySubscriberIds_args args = new getActiveBuddySubscriberIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActiveBuddySubscriberIds_result result = new getActiveBuddySubscriberIds_result();
        try {
          result.Success = iface_.getActiveBuddySubscriberIds();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAllContactIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAllContactIds_args args = new getAllContactIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAllContactIds_result result = new getAllContactIds_result();
        try {
          result.Success = iface_.getAllContactIds();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAllContactIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAuthQrcode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAuthQrcode_args args = new getAuthQrcode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAuthQrcode_result result = new getAuthQrcode_result();
        try {
          result.Success = iface_.getAuthQrcode(args.KeepLoggedIn, args.SystemName);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAuthQrcode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBlockedContactIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBlockedContactIds_args args = new getBlockedContactIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBlockedContactIds_result result = new getBlockedContactIds_result();
        try {
          result.Success = iface_.getBlockedContactIds();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBlockedContactIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBlockedContactIdsByRange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBlockedContactIdsByRange_args args = new getBlockedContactIdsByRange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBlockedContactIdsByRange_result result = new getBlockedContactIdsByRange_result();
        try {
          result.Success = iface_.getBlockedContactIdsByRange(args.Start, args.Count);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBlockedRecommendationIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBlockedRecommendationIds_args args = new getBlockedRecommendationIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBlockedRecommendationIds_result result = new getBlockedRecommendationIds_result();
        try {
          result.Success = iface_.getBlockedRecommendationIds();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBuddyBlockerIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBuddyBlockerIds_args args = new getBuddyBlockerIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBuddyBlockerIds_result result = new getBuddyBlockerIds_result();
        try {
          result.Success = iface_.getBuddyBlockerIds();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBuddyLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBuddyLocation_args args = new getBuddyLocation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBuddyLocation_result result = new getBuddyLocation_result();
        try {
          result.Success = iface_.getBuddyLocation(args.Mid, args.Index);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBuddyLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompactContactsModifiedSince_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompactContactsModifiedSince_args args = new getCompactContactsModifiedSince_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompactContactsModifiedSince_result result = new getCompactContactsModifiedSince_result();
        try {
          result.Success = iface_.getCompactContactsModifiedSince(args.Timestamp);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompactGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompactGroup_args args = new getCompactGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompactGroup_result result = new getCompactGroup_result();
        try {
          result.Success = iface_.getCompactGroup(args.GroupId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCompactRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCompactRoom_args args = new getCompactRoom_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCompactRoom_result result = new getCompactRoom_result();
        try {
          result.Success = iface_.getCompactRoom(args.RoomId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getContact_args args = new getContact_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getContact_result result = new getContact_result();
        try {
          result.Success = iface_.getContact(args.Id);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getContacts_args args = new getContacts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getContacts_result result = new getContacts_result();
        try {
          result.Success = iface_.getContacts(args.Ids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCountryWithRequestIp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCountryWithRequestIp_args args = new getCountryWithRequestIp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCountryWithRequestIp_result result = new getCountryWithRequestIp_result();
        try {
          result.Success = iface_.getCountryWithRequestIp();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFavoriteMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFavoriteMids_args args = new getFavoriteMids_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFavoriteMids_result result = new getFavoriteMids_result();
        try {
          result.Success = iface_.getFavoriteMids();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFavoriteMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroup_args args = new getGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroup_result result = new getGroup_result();
        try {
          result.Success = iface_.getGroup(args.GroupId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroupIdsInvited_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroupIdsInvited_args args = new getGroupIdsInvited_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroupIdsInvited_result result = new getGroupIdsInvited_result();
        try {
          result.Success = iface_.getGroupIdsInvited();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroupIdsJoined_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroupIdsJoined_args args = new getGroupIdsJoined_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroupIdsJoined_result result = new getGroupIdsJoined_result();
        try {
          result.Success = iface_.getGroupIdsJoined();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getGroups_args args = new getGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getGroups_result result = new getGroups_result();
        try {
          result.Success = iface_.getGroups(args.GroupIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getHiddenContactMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getHiddenContactMids_args args = new getHiddenContactMids_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getHiddenContactMids_result result = new getHiddenContactMids_result();
        try {
          result.Success = iface_.getHiddenContactMids();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getHiddenContactMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getIdentityIdentifier_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getIdentityIdentifier_args args = new getIdentityIdentifier_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getIdentityIdentifier_result result = new getIdentityIdentifier_result();
        try {
          result.Success = iface_.getIdentityIdentifier();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getLastAnnouncementIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getLastAnnouncementIndex_args args = new getLastAnnouncementIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getLastAnnouncementIndex_result result = new getLastAnnouncementIndex_result();
        try {
          result.Success = iface_.getLastAnnouncementIndex();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getLastOpRevision_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getLastOpRevision_args args = new getLastOpRevision_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getLastOpRevision_result result = new getLastOpRevision_result();
        try {
          result.Success = iface_.getLastOpRevision();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getLastOpRevision", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessageBox_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessageBox_args args = new getMessageBox_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessageBox_result result = new getMessageBox_result();
        try {
          result.Success = iface_.getMessageBox(args.ChannelId, args.MessageBoxId, args.LastMessagesCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBox", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessageBoxCompactWrapUp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessageBoxCompactWrapUp_args args = new getMessageBoxCompactWrapUp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessageBoxCompactWrapUp_result result = new getMessageBoxCompactWrapUp_result();
        try {
          result.Success = iface_.getMessageBoxCompactWrapUp(args.Mid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessageBoxCompactWrapUpList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessageBoxCompactWrapUpList_args args = new getMessageBoxCompactWrapUpList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessageBoxCompactWrapUpList_result result = new getMessageBoxCompactWrapUpList_result();
        try {
          result.Success = iface_.getMessageBoxCompactWrapUpList(args.Start, args.MessageBoxCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessageBoxList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessageBoxList_args args = new getMessageBoxList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessageBoxList_result result = new getMessageBoxList_result();
        try {
          result.Success = iface_.getMessageBoxList(args.ChannelId, args.LastMessagesCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessageBoxListByStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessageBoxListByStatus_args args = new getMessageBoxListByStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessageBoxListByStatus_result result = new getMessageBoxListByStatus_result();
        try {
          result.Success = iface_.getMessageBoxListByStatus(args.ChannelId, args.LastMessagesCount, args.Status);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessageBoxWrapUp_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessageBoxWrapUp_args args = new getMessageBoxWrapUp_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessageBoxWrapUp_result result = new getMessageBoxWrapUp_result();
        try {
          result.Success = iface_.getMessageBoxWrapUp(args.Mid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessageBoxWrapUpList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessageBoxWrapUpList_args args = new getMessageBoxWrapUpList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessageBoxWrapUpList_result result = new getMessageBoxWrapUpList_result();
        try {
          result.Success = iface_.getMessageBoxWrapUpList(args.Start, args.MessageBoxCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMessagesBySequenceNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMessagesBySequenceNumber_args args = new getMessagesBySequenceNumber_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMessagesBySequenceNumber_result result = new getMessagesBySequenceNumber_result();
        try {
          result.Success = iface_.getMessagesBySequenceNumber(args.ChannelId, args.MessageBoxId, args.StartSeq, args.EndSeq);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNextMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNextMessages_args args = new getNextMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNextMessages_result result = new getNextMessages_result();
        try {
          result.Success = iface_.getNextMessages(args.MessageBoxId, args.StartSeq, args.MessagesCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNextMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNotificationPolicy_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNotificationPolicy_args args = new getNotificationPolicy_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNotificationPolicy_result result = new getNotificationPolicy_result();
        try {
          result.Success = iface_.getNotificationPolicy(args.Carrier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNotificationPolicy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPreviousMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPreviousMessages_args args = new getPreviousMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPreviousMessages_result result = new getPreviousMessages_result();
        try {
          result.Success = iface_.getPreviousMessages(args.MessageBoxId, args.EndSeq, args.MessagesCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPreviousMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProfile_args args = new getProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProfile_result result = new getProfile_result();
        try {
          result.Success = iface_.getProfile();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProximityMatchCandidateList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProximityMatchCandidateList_args args = new getProximityMatchCandidateList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProximityMatchCandidateList_result result = new getProximityMatchCandidateList_result();
        try {
          result.Success = iface_.getProximityMatchCandidateList(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProximityMatchCandidates_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProximityMatchCandidates_args args = new getProximityMatchCandidates_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProximityMatchCandidates_result result = new getProximityMatchCandidates_result();
        try {
          result.Success = iface_.getProximityMatchCandidates(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRecentMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRecentMessages_args args = new getRecentMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRecentMessages_result result = new getRecentMessages_result();
        try {
          result.Success = iface_.getRecentMessages(args.MessageBoxId, args.MessagesCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRecentMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRecommendationIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRecommendationIds_args args = new getRecommendationIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRecommendationIds_result result = new getRecommendationIds_result();
        try {
          result.Success = iface_.getRecommendationIds();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRecommendationIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRoom_args args = new getRoom_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRoom_result result = new getRoom_result();
        try {
          result.Success = iface_.getRoom(args.RoomId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRSAKeyInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRSAKeyInfo_args args = new getRSAKeyInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRSAKeyInfo_result result = new getRSAKeyInfo_result();
        try {
          result.Success = iface_.getRSAKeyInfo(args.Provider);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getServerTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getServerTime_args args = new getServerTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getServerTime_result result = new getServerTime_result();
        try {
          result.Success = iface_.getServerTime();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getServerTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSessions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSessions_args args = new getSessions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSessions_result result = new getSessions_result();
        try {
          result.Success = iface_.getSessions();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSessions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettings_args args = new getSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettings_result result = new getSettings_result();
        try {
          result.Success = iface_.getSettings();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSettingsAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSettingsAttributes_args args = new getSettingsAttributes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSettingsAttributes_result result = new getSettingsAttributes_result();
        try {
          result.Success = iface_.getSettingsAttributes(args.AttrBitset);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSettingsAttributes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSystemConfiguration_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSystemConfiguration_args args = new getSystemConfiguration_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSystemConfiguration_result result = new getSystemConfiguration_result();
        try {
          result.Success = iface_.getSystemConfiguration();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSystemConfiguration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserTicket_args args = new getUserTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserTicket_result result = new getUserTicket_result();
        try {
          result.Success = iface_.getUserTicket();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getWapInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getWapInvitation_args args = new getWapInvitation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getWapInvitation_result result = new getWapInvitation_result();
        try {
          result.Success = iface_.getWapInvitation(args.InvitationHash);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getWapInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void invalidateUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        invalidateUserTicket_args args = new invalidateUserTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        invalidateUserTicket_result result = new invalidateUserTicket_result();
        try {
          iface_.invalidateUserTicket();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("invalidateUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void inviteFriendsBySms_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        inviteFriendsBySms_args args = new inviteFriendsBySms_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        inviteFriendsBySms_result result = new inviteFriendsBySms_result();
        try {
          iface_.inviteFriendsBySms(args.PhoneNumberList);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void inviteIntoGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        inviteIntoGroup_args args = new inviteIntoGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        inviteIntoGroup_result result = new inviteIntoGroup_result();
        try {
          iface_.inviteIntoGroup(args.ReqSeq, args.GroupId, args.ContactIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteIntoGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void inviteIntoRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        inviteIntoRoom_args args = new inviteIntoRoom_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        inviteIntoRoom_result result = new inviteIntoRoom_result();
        try {
          iface_.inviteIntoRoom(args.ReqSeq, args.RoomId, args.ContactIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteIntoRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void inviteViaEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        inviteViaEmail_args args = new inviteViaEmail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        inviteViaEmail_result result = new inviteViaEmail_result();
        try {
          iface_.inviteViaEmail(args.ReqSeq, args.Email, args.Name);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteViaEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isIdentityIdentifierAvailable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isIdentityIdentifierAvailable_args args = new isIdentityIdentifierAvailable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isIdentityIdentifierAvailable_result result = new isIdentityIdentifierAvailable_result();
        try {
          result.Success = iface_.isIdentityIdentifierAvailable(args.Provider, args.Identifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isUseridAvailable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isUseridAvailable_args args = new isUseridAvailable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isUseridAvailable_result result = new isUseridAvailable_result();
        try {
          result.Success = iface_.isUseridAvailable(args.Userid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isUseridAvailable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void kickoutFromGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        kickoutFromGroup_args args = new kickoutFromGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        kickoutFromGroup_result result = new kickoutFromGroup_result();
        try {
          iface_.kickoutFromGroup(args.ReqSeq, args.GroupId, args.ContactIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("kickoutFromGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void leaveGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        leaveGroup_args args = new leaveGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        leaveGroup_result result = new leaveGroup_result();
        try {
          iface_.leaveGroup(args.ReqSeq, args.GroupId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void leaveRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        leaveRoom_args args = new leaveRoom_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        leaveRoom_result result = new leaveRoom_result();
        try {
          iface_.leaveRoom(args.ReqSeq, args.RoomId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("leaveRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginWithIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginWithIdentityCredential_args args = new loginWithIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginWithIdentityCredential_result result = new loginWithIdentityCredential_result();
        try {
          result.Success = iface_.loginWithIdentityCredential(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginWithIdentityCredentialForCertificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginWithIdentityCredentialForCertificate_args args = new loginWithIdentityCredentialForCertificate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginWithIdentityCredentialForCertificate_result result = new loginWithIdentityCredentialForCertificate_result();
        try {
          result.Success = iface_.loginWithIdentityCredentialForCertificate(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginWithVerifier_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginWithVerifier_args args = new loginWithVerifier_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginWithVerifier_result result = new loginWithVerifier_result();
        try {
          result.Success = iface_.loginWithVerifier(args.Verifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithVerifier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginWithVerifierForCerificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginWithVerifierForCerificate_args args = new loginWithVerifierForCerificate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginWithVerifierForCerificate_result result = new loginWithVerifierForCerificate_result();
        try {
          result.Success = iface_.loginWithVerifierForCerificate(args.Verifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginWithVerifierForCertificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginWithVerifierForCertificate_args args = new loginWithVerifierForCertificate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginWithVerifierForCertificate_result result = new loginWithVerifierForCertificate_result();
        try {
          result.Success = iface_.loginWithVerifierForCertificate(args.Verifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logout_args args = new logout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logout_result result = new logout_result();
        try {
          iface_.logout();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logoutSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logoutSession_args args = new logoutSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logoutSession_result result = new logoutSession_result();
        try {
          iface_.logoutSession(args.TokenKey);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("logoutSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void noop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        noop_args args = new noop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        noop_result result = new noop_result();
        try {
          iface_.noop();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("noop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifiedRedirect_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifiedRedirect_args args = new notifiedRedirect_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifiedRedirect_result result = new notifiedRedirect_result();
        try {
          iface_.notifiedRedirect(args.ParamMap);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifiedRedirect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyBuddyOnAir_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyBuddyOnAir_args args = new notifyBuddyOnAir_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyBuddyOnAir_result result = new notifyBuddyOnAir_result();
        try {
          result.Success = iface_.notifyBuddyOnAir(args.Seq, args.ReceiverMids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyIndividualEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyIndividualEvent_args args = new notifyIndividualEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyIndividualEvent_result result = new notifyIndividualEvent_result();
        try {
          iface_.notifyIndividualEvent(args.NotificationStatus, args.ReceiverMids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyInstalled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyInstalled_args args = new notifyInstalled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyInstalled_result result = new notifyInstalled_result();
        iface_.notifyInstalled(args.UdidHash, args.ApplicationTypeWithExtensions);
        oprot.WriteMessageBegin(new TMessage("notifyInstalled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyRegistrationComplete_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyRegistrationComplete_args args = new notifyRegistrationComplete_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyRegistrationComplete_result result = new notifyRegistrationComplete_result();
        iface_.notifyRegistrationComplete(args.UdidHash, args.ApplicationTypeWithExtensions);
        oprot.WriteMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifySleep_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifySleep_args args = new notifySleep_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifySleep_result result = new notifySleep_result();
        try {
          iface_.notifySleep(args.LastRev, args.Badge);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifySleep", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyUpdated_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyUpdated_args args = new notifyUpdated_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyUpdated_result result = new notifyUpdated_result();
        try {
          iface_.notifyUpdated(args.LastRev, args.DeviceInfo);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyUpdated", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void openProximityMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        openProximityMatch_args args = new openProximityMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        openProximityMatch_result result = new openProximityMatch_result();
        try {
          result.Success = iface_.openProximityMatch(args.Location);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("openProximityMatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerBuddyUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerBuddyUser_args args = new registerBuddyUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerBuddyUser_result result = new registerBuddyUser_result();
        try {
          result.Success = iface_.registerBuddyUser(args.BuddyId, args.RegistrarPassword);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerBuddyUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerBuddyUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerBuddyUserid_args args = new registerBuddyUserid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerBuddyUserid_result result = new registerBuddyUserid_result();
        try {
          iface_.registerBuddyUserid(args.Seq, args.Userid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerBuddyUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerDevice_args args = new registerDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerDevice_result result = new registerDevice_result();
        try {
          result.Success = iface_.registerDevice(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerDeviceWithIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerDeviceWithIdentityCredential_args args = new registerDeviceWithIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerDeviceWithIdentityCredential_result result = new registerDeviceWithIdentityCredential_result();
        try {
          result.Success = iface_.registerDeviceWithIdentityCredential(args.SessionId, args.Provider, args.Identifier, args.Verifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerDeviceWithoutPhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerDeviceWithoutPhoneNumber_args args = new registerDeviceWithoutPhoneNumber_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerDeviceWithoutPhoneNumber_result result = new registerDeviceWithoutPhoneNumber_result();
        try {
          result.Success = iface_.registerDeviceWithoutPhoneNumber(args.Region, args.UdidHash, args.DeviceInfo);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerDeviceWithoutPhoneNumberWithIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
        try {
          result.Success = iface_.registerDeviceWithoutPhoneNumberWithIdentityCredential(args.Region, args.UdidHash, args.DeviceInfo, args.Provider, args.Identifier, args.Verifier, args.Mid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerUserid_args args = new registerUserid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerUserid_result result = new registerUserid_result();
        try {
          result.Success = iface_.registerUserid(args.ReqSeq, args.Userid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerWapDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerWapDevice_args args = new registerWapDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerWapDevice_result result = new registerWapDevice_result();
        try {
          result.Success = iface_.registerWapDevice(args.InvitationHash, args.GuidHash, args.Email, args.DeviceInfo);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWapDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerWithExistingSnsIdAndIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerWithExistingSnsIdAndIdentityCredential_args args = new registerWithExistingSnsIdAndIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result();
        try {
          result.Success = iface_.registerWithExistingSnsIdAndIdentityCredential(args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerWithSnsId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerWithSnsId_args args = new registerWithSnsId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerWithSnsId_result result = new registerWithSnsId_result();
        try {
          result.Success = iface_.registerWithSnsId(args.SnsIdType, args.SnsAccessToken, args.Region, args.UdidHash, args.DeviceInfo, args.Mid);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithSnsId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void registerWithSnsIdAndIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registerWithSnsIdAndIdentityCredential_args args = new registerWithSnsIdAndIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registerWithSnsIdAndIdentityCredential_result result = new registerWithSnsIdAndIdentityCredential_result();
        try {
          result.Success = iface_.registerWithSnsIdAndIdentityCredential(args.SnsIdType, args.SnsAccessToken, args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reissueDeviceCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reissueDeviceCredential_args args = new reissueDeviceCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reissueDeviceCredential_result result = new reissueDeviceCredential_result();
        try {
          result.Success = iface_.reissueDeviceCredential();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reissueUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reissueUserTicket_args args = new reissueUserTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reissueUserTicket_result result = new reissueUserTicket_result();
        try {
          result.Success = iface_.reissueUserTicket(args.ExpirationTime, args.MaxUseCount);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reissueUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rejectGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rejectGroupInvitation_args args = new rejectGroupInvitation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rejectGroupInvitation_result result = new rejectGroupInvitation_result();
        try {
          iface_.rejectGroupInvitation(args.ReqSeq, args.GroupId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void releaseSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        releaseSession_args args = new releaseSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        releaseSession_result result = new releaseSession_result();
        try {
          iface_.releaseSession();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("releaseSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeAllMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeAllMessages_args args = new removeAllMessages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeAllMessages_result result = new removeAllMessages_result();
        try {
          iface_.removeAllMessages(args.Seq, args.LastMessageId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeAllMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeBuddyLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeBuddyLocation_args args = new removeBuddyLocation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeBuddyLocation_result result = new removeBuddyLocation_result();
        try {
          iface_.removeBuddyLocation(args.Mid, args.Index);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeBuddyLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeMessage_args args = new removeMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeMessage_result result = new removeMessage_result();
        try {
          result.Success = iface_.removeMessage(args.MessageId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeMessageFromMyHome_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeMessageFromMyHome_args args = new removeMessageFromMyHome_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeMessageFromMyHome_result result = new removeMessageFromMyHome_result();
        try {
          result.Success = iface_.removeMessageFromMyHome(args.MessageId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void removeSnsId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeSnsId_args args = new removeSnsId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        removeSnsId_result result = new removeSnsId_result();
        try {
          result.Success = iface_.removeSnsId(args.SnsIdType);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeSnsId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void report_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        report_args args = new report_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        report_result result = new report_result();
        try {
          iface_.report(args.SyncOpRevision, args.Category, args.Report);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("report", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportContacts_args args = new reportContacts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportContacts_result result = new reportContacts_result();
        try {
          result.Success = iface_.reportContacts(args.SyncOpRevision, args.Category, args.ContactReports, args.ActionType);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportGroups_args args = new reportGroups_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportGroups_result result = new reportGroups_result();
        try {
          iface_.reportGroups(args.SyncOpRevision, args.Groups);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportProfile_args args = new reportProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportProfile_result result = new reportProfile_result();
        try {
          iface_.reportProfile(args.SyncOpRevision, args.Profile);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportRooms_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportRooms_args args = new reportRooms_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportRooms_result result = new reportRooms_result();
        try {
          iface_.reportRooms(args.SyncOpRevision, args.Rooms);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportRooms", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportSettings_args args = new reportSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportSettings_result result = new reportSettings_result();
        try {
          iface_.reportSettings(args.SyncOpRevision, args.Settings);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reportSpammer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reportSpammer_args args = new reportSpammer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reportSpammer_result result = new reportSpammer_result();
        try {
          iface_.reportSpammer(args.SpammerMid, args.SpammerReasons, args.SpamMessageIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSpammer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void requestAccountPasswordReset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        requestAccountPasswordReset_args args = new requestAccountPasswordReset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        requestAccountPasswordReset_result result = new requestAccountPasswordReset_result();
        try {
          iface_.requestAccountPasswordReset(args.Provider, args.Identifier, args.Locale);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void requestEmailConfirmation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        requestEmailConfirmation_args args = new requestEmailConfirmation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        requestEmailConfirmation_result result = new requestEmailConfirmation_result();
        try {
          result.Success = iface_.requestEmailConfirmation(args.EmailConfirmation);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void requestIdentityUnbind_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        requestIdentityUnbind_args args = new requestIdentityUnbind_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        requestIdentityUnbind_result result = new requestIdentityUnbind_result();
        try {
          iface_.requestIdentityUnbind(args.Provider, args.Identifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resendEmailConfirmation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resendEmailConfirmation_args args = new resendEmailConfirmation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resendEmailConfirmation_result result = new resendEmailConfirmation_result();
        try {
          result.Success = iface_.resendEmailConfirmation(args.Verifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resendPinCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resendPinCode_args args = new resendPinCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resendPinCode_result result = new resendPinCode_result();
        try {
          iface_.resendPinCode(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("resendPinCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resendPinCodeBySMS_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resendPinCodeBySMS_args args = new resendPinCodeBySMS_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resendPinCodeBySMS_result result = new resendPinCodeBySMS_result();
        try {
          iface_.resendPinCodeBySMS(args.SessionId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendChatChecked_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendChatChecked_args args = new sendChatChecked_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendChatChecked_result result = new sendChatChecked_result();
        try {
          iface_.sendChatChecked(args.Seq, args.Consumer, args.LastMessageId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendChatChecked", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendChatRemoved_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendChatRemoved_args args = new sendChatRemoved_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendChatRemoved_result result = new sendChatRemoved_result();
        try {
          iface_.sendChatRemoved(args.Seq, args.Consumer, args.LastMessageId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendChatRemoved", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendContentPreviewUpdated_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendContentPreviewUpdated_args args = new sendContentPreviewUpdated_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendContentPreviewUpdated_result result = new sendContentPreviewUpdated_result();
        try {
          result.Success = iface_.sendContentPreviewUpdated(args.Esq, args.MessageId, args.ReceiverMids);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendContentReceipt_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendContentReceipt_args args = new sendContentReceipt_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendContentReceipt_result result = new sendContentReceipt_result();
        try {
          iface_.sendContentReceipt(args.Seq, args.Consumer, args.MessageId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendContentReceipt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendDummyPush_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendDummyPush_args args = new sendDummyPush_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendDummyPush_result result = new sendDummyPush_result();
        try {
          iface_.sendDummyPush();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendDummyPush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendEvent_args args = new sendEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendEvent_result result = new sendEvent_result();
        try {
          result.Success = iface_.sendEvent(args.Seq, args.Message);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendMessage_args args = new sendMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendMessage_result result = new sendMessage_result();
        try {
          result.Success = iface_.sendMessage(args.Seq, args.Message);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendMessageIgnored_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendMessageIgnored_args args = new sendMessageIgnored_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendMessageIgnored_result result = new sendMessageIgnored_result();
        try {
          iface_.sendMessageIgnored(args.Seq, args.Consumer, args.MessageIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageIgnored", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendMessageReceipt_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendMessageReceipt_args args = new sendMessageReceipt_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendMessageReceipt_result result = new sendMessageReceipt_result();
        try {
          iface_.sendMessageReceipt(args.Seq, args.Consumer, args.MessageIds);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageReceipt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendMessageToMyHome_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendMessageToMyHome_args args = new sendMessageToMyHome_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendMessageToMyHome_result result = new sendMessageToMyHome_result();
        try {
          result.Success = iface_.sendMessageToMyHome(args.Seq, args.Message);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setBuddyLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setBuddyLocation_args args = new setBuddyLocation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setBuddyLocation_result result = new setBuddyLocation_result();
        try {
          iface_.setBuddyLocation(args.Mid, args.Index, args.Location);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("setBuddyLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setIdentityCredential_args args = new setIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setIdentityCredential_result result = new setIdentityCredential_result();
        try {
          iface_.setIdentityCredential(args.Provider, args.Identifier, args.Verifier);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("setIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setNotificationsEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setNotificationsEnabled_args args = new setNotificationsEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setNotificationsEnabled_result result = new setNotificationsEnabled_result();
        try {
          iface_.setNotificationsEnabled(args.ReqSeq, args.Type, args.Target, args.Enablement);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void startUpdateVerification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        startUpdateVerification_args args = new startUpdateVerification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        startUpdateVerification_result result = new startUpdateVerification_result();
        try {
          result.Success = iface_.startUpdateVerification(args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Locale);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("startUpdateVerification", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void startVerification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        startVerification_args args = new startVerification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        startVerification_result result = new startVerification_result();
        try {
          result.Success = iface_.startVerification(args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Mid, args.Locale);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("startVerification", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void storeUpdateProfileAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        storeUpdateProfileAttribute_args args = new storeUpdateProfileAttribute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        storeUpdateProfileAttribute_result result = new storeUpdateProfileAttribute_result();
        try {
          iface_.storeUpdateProfileAttribute(args.Seq, args.ProfileAttribute, args.Value);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void syncContactBySnsIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        syncContactBySnsIds_args args = new syncContactBySnsIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        syncContactBySnsIds_result result = new syncContactBySnsIds_result();
        try {
          result.Success = iface_.syncContactBySnsIds(args.ReqSeq, args.Modifications);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void syncContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        syncContacts_args args = new syncContacts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        syncContacts_result result = new syncContacts_result();
        try {
          result.Success = iface_.syncContacts(args.ReqSeq, args.LocalContacts);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("syncContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void trySendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        trySendMessage_args args = new trySendMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        trySendMessage_result result = new trySendMessage_result();
        try {
          result.Success = iface_.trySendMessage(args.Seq, args.Message);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("trySendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void unblockContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        unblockContact_args args = new unblockContact_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        unblockContact_result result = new unblockContact_result();
        try {
          iface_.unblockContact(args.ReqSeq, args.Id);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unblockContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void unblockRecommendation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        unblockRecommendation_args args = new unblockRecommendation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        unblockRecommendation_result result = new unblockRecommendation_result();
        try {
          iface_.unblockRecommendation(args.ReqSeq, args.Id);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unblockRecommendation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void unregisterUserAndDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        unregisterUserAndDevice_args args = new unregisterUserAndDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        unregisterUserAndDevice_result result = new unregisterUserAndDevice_result();
        try {
          result.Success = iface_.unregisterUserAndDevice();
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateApnsDeviceToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateApnsDeviceToken_args args = new updateApnsDeviceToken_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateApnsDeviceToken_result result = new updateApnsDeviceToken_result();
        try {
          iface_.updateApnsDeviceToken(args.ApnsDeviceToken);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateBuddySetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateBuddySetting_args args = new updateBuddySetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateBuddySetting_result result = new updateBuddySetting_result();
        try {
          iface_.updateBuddySetting(args.Key, args.Value);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateBuddySetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateC2DMRegistrationId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateC2DMRegistrationId_args args = new updateC2DMRegistrationId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateC2DMRegistrationId_result result = new updateC2DMRegistrationId_result();
        try {
          iface_.updateC2DMRegistrationId(args.RegistrationId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateContactSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateContactSetting_args args = new updateContactSetting_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateContactSetting_result result = new updateContactSetting_result();
        try {
          iface_.updateContactSetting(args.ReqSeq, args.Mid, args.Flag, args.Value);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateContactSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateCustomModeSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateCustomModeSettings_args args = new updateCustomModeSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateCustomModeSettings_result result = new updateCustomModeSettings_result();
        try {
          iface_.updateCustomModeSettings(args.CustomMode, args.ParamMap);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateDeviceInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateDeviceInfo_args args = new updateDeviceInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateDeviceInfo_result result = new updateDeviceInfo_result();
        try {
          iface_.updateDeviceInfo(args.DeviceUid, args.DeviceInfo);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateDeviceInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateGroup_args args = new updateGroup_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateGroup_result result = new updateGroup_result();
        try {
          iface_.updateGroup(args.ReqSeq, args.Group);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateNotificationToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateNotificationToken_args args = new updateNotificationToken_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateNotificationToken_result result = new updateNotificationToken_result();
        try {
          iface_.updateNotificationToken(args.Type, args.Token);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateNotificationToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateNotificationTokenWithBytes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateNotificationTokenWithBytes_args args = new updateNotificationTokenWithBytes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateNotificationTokenWithBytes_result result = new updateNotificationTokenWithBytes_result();
        try {
          iface_.updateNotificationTokenWithBytes(args.Type, args.Token);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateProfile_args args = new updateProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateProfile_result result = new updateProfile_result();
        try {
          iface_.updateProfile(args.ReqSeq, args.Profile);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateProfileAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateProfileAttribute_args args = new updateProfileAttribute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateProfileAttribute_result result = new updateProfileAttribute_result();
        try {
          iface_.updateProfileAttribute(args.ReqSeq, args.Attr, args.Value);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateProfileAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateRegion_args args = new updateRegion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateRegion_result result = new updateRegion_result();
        try {
          iface_.updateRegion(args.Region);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateRegion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSettings_args args = new updateSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSettings_result result = new updateSettings_result();
        try {
          iface_.updateSettings(args.ReqSeq, args.Settings);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSettings2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSettings2_args args = new updateSettings2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSettings2_result result = new updateSettings2_result();
        try {
          result.Success = iface_.updateSettings2(args.ReqSeq, args.Settings);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettings2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSettingsAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSettingsAttribute_args args = new updateSettingsAttribute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSettingsAttribute_result result = new updateSettingsAttribute_result();
        try {
          iface_.updateSettingsAttribute(args.ReqSeq, args.Attr, args.Value);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSettingsAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSettingsAttributes_args args = new updateSettingsAttributes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSettingsAttributes_result result = new updateSettingsAttributes_result();
        try {
          result.Success = iface_.updateSettingsAttributes(args.ReqSeq, args.AttrBitset, args.Settings);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void verifyIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        verifyIdentityCredential_args args = new verifyIdentityCredential_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        verifyIdentityCredential_result result = new verifyIdentityCredential_result();
        try {
          iface_.verifyIdentityCredential(args.IdentityProvider, args.Identifier, args.Password);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void verifyIdentityCredentialWithResult_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        verifyIdentityCredentialWithResult_args args = new verifyIdentityCredentialWithResult_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        verifyIdentityCredentialWithResult_result result = new verifyIdentityCredentialWithResult_result();
        try {
          result.Success = iface_.verifyIdentityCredentialWithResult(args.IdentityCredential);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void verifyPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        verifyPhone_args args = new verifyPhone_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        verifyPhone_result result = new verifyPhone_result();
        try {
          result.Success = iface_.verifyPhone(args.SessionId, args.PinCode, args.UdidHash);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void verifyQrcode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        verifyQrcode_args args = new verifyQrcode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        verifyQrcode_result result = new verifyQrcode_result();
        try {
          result.Success = iface_.verifyQrcode(args.Verifier, args.PinCode);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyQrcode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acceptGroupInvitation_args : TBase
    {
      private int _reqSeq;
      private string _groupId;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool groupId;
      }

      public acceptGroupInvitation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acceptGroupInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acceptGroupInvitation_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",GroupId: ");
        sb.Append(GroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acceptGroupInvitation_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public acceptGroupInvitation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acceptGroupInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acceptGroupInvitation_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acceptProximityMatches_args : TBase
    {
      private string _sessionId;
      private THashSet<string> _ids;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public THashSet<string> Ids
      {
        get
        {
          return _ids;
        }
        set
        {
          __isset.ids = true;
          this._ids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool ids;
      }

      public acceptProximityMatches_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  Ids = new THashSet<string>();
                  TSet _set105 = iprot.ReadSetBegin();
                  for( int _i106 = 0; _i106 < _set105.Count; ++_i106)
                  {
                    string _elem107 = null;
                    _elem107 = iprot.ReadString();
                    Ids.Add(_elem107);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acceptProximityMatches_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Ids.Count));
            foreach (string _iter108 in Ids)
            {
              oprot.WriteString(_iter108);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acceptProximityMatches_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(",Ids: ");
        sb.Append(Ids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acceptProximityMatches_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public acceptProximityMatches_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acceptProximityMatches_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acceptProximityMatches_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireCallRoute_args : TBase
    {
      private string _to;

      public string To
      {
        get
        {
          return _to;
        }
        set
        {
          __isset.to = true;
          this._to = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool to;
      }

      public acquireCallRoute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                To = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireCallRoute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (To != null && __isset.to) {
          field.Name = "to";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(To);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireCallRoute_args(");
        sb.Append("To: ");
        sb.Append(To);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireCallRoute_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public acquireCallRoute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list109 = iprot.ReadListBegin();
                  for( int _i110 = 0; _i110 < _list109.Count; ++_i110)
                  {
                    string _elem111 = null;
                    _elem111 = iprot.ReadString();
                    Success.Add(_elem111);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireCallRoute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter112 in Success)
              {
                oprot.WriteString(_iter112);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireCallRoute_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireCallTicket_args : TBase
    {
      private string _to;

      public string To
      {
        get
        {
          return _to;
        }
        set
        {
          __isset.to = true;
          this._to = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool to;
      }

      public acquireCallTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                To = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireCallTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (To != null && __isset.to) {
          field.Name = "to";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(To);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireCallTicket_args(");
        sb.Append("To: ");
        sb.Append(To);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireCallTicket_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public acquireCallTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireCallTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireCallTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireEncryptedAccessToken_args : TBase
    {
      private FeatureType _featureType;

      /// <summary>
      /// 
      /// <seealso cref="FeatureType"/>
      /// </summary>
      public FeatureType FeatureType
      {
        get
        {
          return _featureType;
        }
        set
        {
          __isset.featureType = true;
          this._featureType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool featureType;
      }

      public acquireEncryptedAccessToken_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                FeatureType = (FeatureType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireEncryptedAccessToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.featureType) {
          field.Name = "featureType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FeatureType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireEncryptedAccessToken_args(");
        sb.Append("FeatureType: ");
        sb.Append(FeatureType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class acquireEncryptedAccessToken_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public acquireEncryptedAccessToken_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("acquireEncryptedAccessToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("acquireEncryptedAccessToken_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSnsId_args : TBase
    {
      private SnsIdType _snsIdType;
      private string _snsAccessToken;

      /// <summary>
      /// 
      /// <seealso cref="SnsIdType"/>
      /// </summary>
      public SnsIdType SnsIdType
      {
        get
        {
          return _snsIdType;
        }
        set
        {
          __isset.snsIdType = true;
          this._snsIdType = value;
        }
      }

      public string SnsAccessToken
      {
        get
        {
          return _snsAccessToken;
        }
        set
        {
          __isset.snsAccessToken = true;
          this._snsAccessToken = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snsIdType;
        public bool snsAccessToken;
      }

      public addSnsId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSnsId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSnsId_args(");
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
        sb.Append(",SnsAccessToken: ");
        sb.Append(SnsAccessToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addSnsId_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public addSnsId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addSnsId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addSnsId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class blockContact_args : TBase
    {
      private int _reqSeq;
      private string _id;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool id;
      }

      public blockContact_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("blockContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("blockContact_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class blockContact_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public blockContact_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("blockContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("blockContact_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class blockRecommendation_args : TBase
    {
      private int _reqSeq;
      private string _id;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool id;
      }

      public blockRecommendation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("blockRecommendation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("blockRecommendation_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class blockRecommendation_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public blockRecommendation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("blockRecommendation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("blockRecommendation_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelGroupInvitation_args : TBase
    {
      private int _reqSeq;
      private string _groupId;
      private List<string> _contactIds;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public List<string> ContactIds
      {
        get
        {
          return _contactIds;
        }
        set
        {
          __isset.contactIds = true;
          this._contactIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool groupId;
        public bool contactIds;
      }

      public cancelGroupInvitation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list113 = iprot.ReadListBegin();
                  for( int _i114 = 0; _i114 < _list113.Count; ++_i114)
                  {
                    string _elem115 = null;
                    _elem115 = iprot.ReadString();
                    ContactIds.Add(_elem115);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelGroupInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter116 in ContactIds)
            {
              oprot.WriteString(_iter116);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelGroupInvitation_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",GroupId: ");
        sb.Append(GroupId);
        sb.Append(",ContactIds: ");
        sb.Append(ContactIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelGroupInvitation_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public cancelGroupInvitation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelGroupInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelGroupInvitation_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeVerificationMethod_args : TBase
    {
      private string _sessionId;
      private VerificationMethod _method;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="VerificationMethod"/>
      /// </summary>
      public VerificationMethod Method
      {
        get
        {
          return _method;
        }
        set
        {
          __isset.method = true;
          this._method = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool method;
      }

      public changeVerificationMethod_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Method = (VerificationMethod)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeVerificationMethod_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (__isset.method) {
          field.Name = "method";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Method);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeVerificationMethod_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(",Method: ");
        sb.Append(Method);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeVerificationMethod_result : TBase
    {
      private VerificationSessionData _success;
      private TalkException _e;

      public VerificationSessionData Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public changeVerificationMethod_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new VerificationSessionData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("changeVerificationMethod_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("changeVerificationMethod_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearIdentityCredential_args : TBase
    {

      public clearIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearIdentityCredential_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearIdentityCredential_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public clearIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearIdentityCredential_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearMessageBox_args : TBase
    {
      private string _channelId;
      private string _messageBoxId;

      public string ChannelId
      {
        get
        {
          return _channelId;
        }
        set
        {
          __isset.channelId = true;
          this._channelId = value;
        }
      }

      public string MessageBoxId
      {
        get
        {
          return _messageBoxId;
        }
        set
        {
          __isset.messageBoxId = true;
          this._messageBoxId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool channelId;
        public bool messageBoxId;
      }

      public clearMessageBox_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearMessageBox_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearMessageBox_args(");
        sb.Append("ChannelId: ");
        sb.Append(ChannelId);
        sb.Append(",MessageBoxId: ");
        sb.Append(MessageBoxId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearMessageBox_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public clearMessageBox_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearMessageBox_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearMessageBox_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class closeProximityMatch_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public closeProximityMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("closeProximityMatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("closeProximityMatch_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class closeProximityMatch_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public closeProximityMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("closeProximityMatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("closeProximityMatch_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitSendMessage_args : TBase
    {
      private int _seq;
      private string _messageId;
      private List<string> _receiverMids;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string MessageId
      {
        get
        {
          return _messageId;
        }
        set
        {
          __isset.messageId = true;
          this._messageId = value;
        }
      }

      public List<string> ReceiverMids
      {
        get
        {
          return _receiverMids;
        }
        set
        {
          __isset.receiverMids = true;
          this._receiverMids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool messageId;
        public bool receiverMids;
      }

      public commitSendMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list117 = iprot.ReadListBegin();
                  for( int _i118 = 0; _i118 < _list117.Count; ++_i118)
                  {
                    string _elem119 = null;
                    _elem119 = iprot.ReadString();
                    ReceiverMids.Add(_elem119);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitSendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter120 in ReceiverMids)
            {
              oprot.WriteString(_iter120);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitSendMessage_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",MessageId: ");
        sb.Append(MessageId);
        sb.Append(",ReceiverMids: ");
        sb.Append(ReceiverMids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitSendMessage_result : TBase
    {
      private Dictionary<string, string> _success;
      private TalkException _e;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public commitSendMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map121 = iprot.ReadMapBegin();
                  for( int _i122 = 0; _i122 < _map121.Count; ++_i122)
                  {
                    string _key123;
                    string _val124;
                    _key123 = iprot.ReadString();
                    _val124 = iprot.ReadString();
                    Success[_key123] = _val124;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitSendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter125 in Success.Keys)
              {
                oprot.WriteString(_iter125);
                oprot.WriteString(Success[_iter125]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitSendMessage_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitSendMessages_args : TBase
    {
      private int _seq;
      private List<string> _messageIds;
      private List<string> _receiverMids;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public List<string> MessageIds
      {
        get
        {
          return _messageIds;
        }
        set
        {
          __isset.messageIds = true;
          this._messageIds = value;
        }
      }

      public List<string> ReceiverMids
      {
        get
        {
          return _receiverMids;
        }
        set
        {
          __isset.receiverMids = true;
          this._receiverMids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool messageIds;
        public bool receiverMids;
      }

      public commitSendMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  MessageIds = new List<string>();
                  TList _list126 = iprot.ReadListBegin();
                  for( int _i127 = 0; _i127 < _list126.Count; ++_i127)
                  {
                    string _elem128 = null;
                    _elem128 = iprot.ReadString();
                    MessageIds.Add(_elem128);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list129 = iprot.ReadListBegin();
                  for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                  {
                    string _elem131 = null;
                    _elem131 = iprot.ReadString();
                    ReceiverMids.Add(_elem131);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitSendMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (MessageIds != null && __isset.messageIds) {
          field.Name = "messageIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MessageIds.Count));
            foreach (string _iter132 in MessageIds)
            {
              oprot.WriteString(_iter132);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter133 in ReceiverMids)
            {
              oprot.WriteString(_iter133);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitSendMessages_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",MessageIds: ");
        sb.Append(MessageIds);
        sb.Append(",ReceiverMids: ");
        sb.Append(ReceiverMids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitSendMessages_result : TBase
    {
      private Dictionary<string, string> _success;
      private TalkException _e;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public commitSendMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map134 = iprot.ReadMapBegin();
                  for( int _i135 = 0; _i135 < _map134.Count; ++_i135)
                  {
                    string _key136;
                    string _val137;
                    _key136 = iprot.ReadString();
                    _val137 = iprot.ReadString();
                    Success[_key136] = _val137;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitSendMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter138 in Success.Keys)
              {
                oprot.WriteString(_iter138);
                oprot.WriteString(Success[_iter138]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitSendMessages_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitUpdateProfile_args : TBase
    {
      private int _seq;
      private List<ProfileAttribute> _attrs;
      private List<string> _receiverMids;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public List<ProfileAttribute> Attrs
      {
        get
        {
          return _attrs;
        }
        set
        {
          __isset.attrs = true;
          this._attrs = value;
        }
      }

      public List<string> ReceiverMids
      {
        get
        {
          return _receiverMids;
        }
        set
        {
          __isset.receiverMids = true;
          this._receiverMids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool attrs;
        public bool receiverMids;
      }

      public commitUpdateProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Attrs = new List<ProfileAttribute>();
                  TList _list139 = iprot.ReadListBegin();
                  for( int _i140 = 0; _i140 < _list139.Count; ++_i140)
                  {
                    ProfileAttribute _elem141 = (ProfileAttribute)0;
                    _elem141 = (ProfileAttribute)iprot.ReadI32();
                    Attrs.Add(_elem141);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list142 = iprot.ReadListBegin();
                  for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                  {
                    string _elem144 = null;
                    _elem144 = iprot.ReadString();
                    ReceiverMids.Add(_elem144);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitUpdateProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Attrs != null && __isset.attrs) {
          field.Name = "attrs";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Attrs.Count));
            foreach (ProfileAttribute _iter145 in Attrs)
            {
              oprot.WriteI32((int)_iter145);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter146 in ReceiverMids)
            {
              oprot.WriteString(_iter146);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitUpdateProfile_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Attrs: ");
        sb.Append(Attrs);
        sb.Append(",ReceiverMids: ");
        sb.Append(ReceiverMids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class commitUpdateProfile_result : TBase
    {
      private Dictionary<string, string> _success;
      private TalkException _e;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public commitUpdateProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map147 = iprot.ReadMapBegin();
                  for( int _i148 = 0; _i148 < _map147.Count; ++_i148)
                  {
                    string _key149;
                    string _val150;
                    _key149 = iprot.ReadString();
                    _val150 = iprot.ReadString();
                    Success[_key149] = _val150;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("commitUpdateProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter151 in Success.Keys)
              {
                oprot.WriteString(_iter151);
                oprot.WriteString(Success[_iter151]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("commitUpdateProfile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class confirmEmail_args : TBase
    {
      private string _verifier;
      private string _pinCode;

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }

      public string PinCode
      {
        get
        {
          return _pinCode;
        }
        set
        {
          __isset.pinCode = true;
          this._pinCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool verifier;
        public bool pinCode;
      }

      public confirmEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("confirmEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("confirmEmail_args(");
        sb.Append("Verifier: ");
        sb.Append(Verifier);
        sb.Append(",PinCode: ");
        sb.Append(PinCode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class confirmEmail_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public confirmEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("confirmEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("confirmEmail_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createGroup_args : TBase
    {
      private int _seq;
      private string _name;
      private List<string> _contactIds;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public List<string> ContactIds
      {
        get
        {
          return _contactIds;
        }
        set
        {
          __isset.contactIds = true;
          this._contactIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool name;
        public bool contactIds;
      }

      public createGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list152 = iprot.ReadListBegin();
                  for( int _i153 = 0; _i153 < _list152.Count; ++_i153)
                  {
                    string _elem154 = null;
                    _elem154 = iprot.ReadString();
                    ContactIds.Add(_elem154);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter155 in ContactIds)
            {
              oprot.WriteString(_iter155);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createGroup_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(",ContactIds: ");
        sb.Append(ContactIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createGroup_result : TBase
    {
      private Group _success;
      private TalkException _e;

      public Group Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public createGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createGroup_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createQrcodeBase64Image_args : TBase
    {
      private string _url;
      private string _characterSet;
      private int _imageSize;
      private int _x;
      private int _y;
      private int _width;
      private int _height;

      public string Url
      {
        get
        {
          return _url;
        }
        set
        {
          __isset.url = true;
          this._url = value;
        }
      }

      public string CharacterSet
      {
        get
        {
          return _characterSet;
        }
        set
        {
          __isset.characterSet = true;
          this._characterSet = value;
        }
      }

      public int ImageSize
      {
        get
        {
          return _imageSize;
        }
        set
        {
          __isset.imageSize = true;
          this._imageSize = value;
        }
      }

      public int X
      {
        get
        {
          return _x;
        }
        set
        {
          __isset.x = true;
          this._x = value;
        }
      }

      public int Y
      {
        get
        {
          return _y;
        }
        set
        {
          __isset.y = true;
          this._y = value;
        }
      }

      public int Width
      {
        get
        {
          return _width;
        }
        set
        {
          __isset.width = true;
          this._width = value;
        }
      }

      public int Height
      {
        get
        {
          return _height;
        }
        set
        {
          __isset.height = true;
          this._height = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool url;
        public bool characterSet;
        public bool imageSize;
        public bool x;
        public bool y;
        public bool width;
        public bool height;
      }

      public createQrcodeBase64Image_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Url = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CharacterSet = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ImageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                X = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Y = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                Width = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                Height = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createQrcodeBase64Image_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Url != null && __isset.url) {
          field.Name = "url";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Url);
          oprot.WriteFieldEnd();
        }
        if (CharacterSet != null && __isset.characterSet) {
          field.Name = "characterSet";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CharacterSet);
          oprot.WriteFieldEnd();
        }
        if (__isset.imageSize) {
          field.Name = "imageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ImageSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.x) {
          field.Name = "x";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(X);
          oprot.WriteFieldEnd();
        }
        if (__isset.y) {
          field.Name = "y";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Y);
          oprot.WriteFieldEnd();
        }
        if (__isset.width) {
          field.Name = "width";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Width);
          oprot.WriteFieldEnd();
        }
        if (__isset.height) {
          field.Name = "height";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Height);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createQrcodeBase64Image_args(");
        sb.Append("Url: ");
        sb.Append(Url);
        sb.Append(",CharacterSet: ");
        sb.Append(CharacterSet);
        sb.Append(",ImageSize: ");
        sb.Append(ImageSize);
        sb.Append(",X: ");
        sb.Append(X);
        sb.Append(",Y: ");
        sb.Append(Y);
        sb.Append(",Width: ");
        sb.Append(Width);
        sb.Append(",Height: ");
        sb.Append(Height);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createQrcodeBase64Image_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public createQrcodeBase64Image_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createQrcodeBase64Image_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createQrcodeBase64Image_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createRoom_args : TBase
    {
      private int _reqSeq;
      private List<string> _contactIds;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public List<string> ContactIds
      {
        get
        {
          return _contactIds;
        }
        set
        {
          __isset.contactIds = true;
          this._contactIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool contactIds;
      }

      public createRoom_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list156 = iprot.ReadListBegin();
                  for( int _i157 = 0; _i157 < _list156.Count; ++_i157)
                  {
                    string _elem158 = null;
                    _elem158 = iprot.ReadString();
                    ContactIds.Add(_elem158);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter159 in ContactIds)
            {
              oprot.WriteString(_iter159);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createRoom_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",ContactIds: ");
        sb.Append(ContactIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createRoom_result : TBase
    {
      private Room _success;
      private TalkException _e;

      public Room Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public createRoom_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createRoom_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createSession_args : TBase
    {

      public createSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSession_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSession_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createSession_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public createSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createSession_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchAnnouncements_args : TBase
    {
      private int _lastFetchedIndex;

      public int LastFetchedIndex
      {
        get
        {
          return _lastFetchedIndex;
        }
        set
        {
          __isset.lastFetchedIndex = true;
          this._lastFetchedIndex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lastFetchedIndex;
      }

      public fetchAnnouncements_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                LastFetchedIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchAnnouncements_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastFetchedIndex) {
          field.Name = "lastFetchedIndex";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastFetchedIndex);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchAnnouncements_args(");
        sb.Append("LastFetchedIndex: ");
        sb.Append(LastFetchedIndex);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchAnnouncements_result : TBase
    {
      private List<Announcement> _success;
      private TalkException _e;

      public List<Announcement> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public fetchAnnouncements_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Announcement>();
                  TList _list160 = iprot.ReadListBegin();
                  for( int _i161 = 0; _i161 < _list160.Count; ++_i161)
                  {
                    Announcement _elem162 = new Announcement();
                    _elem162 = new Announcement();
                    _elem162.Read(iprot);
                    Success.Add(_elem162);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchAnnouncements_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Announcement _iter163 in Success)
              {
                _iter163.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchAnnouncements_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchMessages_args : TBase
    {
      private long _localTs;
      private int _count;

      public long LocalTs
      {
        get
        {
          return _localTs;
        }
        set
        {
          __isset.localTs = true;
          this._localTs = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool localTs;
        public bool count;
      }

      public fetchMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalTs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localTs) {
          field.Name = "localTs";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalTs);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchMessages_args(");
        sb.Append("LocalTs: ");
        sb.Append(LocalTs);
        sb.Append(",Count: ");
        sb.Append(Count);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchMessages_result : TBase
    {
      private List<Message> _success;
      private TalkException _e;

      public List<Message> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public fetchMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list164 = iprot.ReadListBegin();
                  for( int _i165 = 0; _i165 < _list164.Count; ++_i165)
                  {
                    Message _elem166 = new Message();
                    _elem166 = new Message();
                    _elem166.Read(iprot);
                    Success.Add(_elem166);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter167 in Success)
              {
                _iter167.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchMessages_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchOperations_args : TBase
    {
      private long _localRev;
      private int _count;

      public long LocalRev
      {
        get
        {
          return _localRev;
        }
        set
        {
          __isset.localRev = true;
          this._localRev = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool localRev;
        public bool count;
      }

      public fetchOperations_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchOperations_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localRev) {
          field.Name = "localRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchOperations_args(");
        sb.Append("LocalRev: ");
        sb.Append(LocalRev);
        sb.Append(",Count: ");
        sb.Append(Count);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchOperations_result : TBase
    {
      private List<Operation> _success;
      private TalkException _e;

      public List<Operation> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public fetchOperations_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Operation>();
                  TList _list168 = iprot.ReadListBegin();
                  for( int _i169 = 0; _i169 < _list168.Count; ++_i169)
                  {
                    Operation _elem170 = new Operation();
                    _elem170 = new Operation();
                    _elem170.Read(iprot);
                    Success.Add(_elem170);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchOperations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Operation _iter171 in Success)
              {
                _iter171.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchOperations_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchOps_args : TBase
    {
      private long _localRev;
      private int _count;
      private long _globalRev;
      private long _individualRev;

      public long LocalRev
      {
        get
        {
          return _localRev;
        }
        set
        {
          __isset.localRev = true;
          this._localRev = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      public long GlobalRev
      {
        get
        {
          return _globalRev;
        }
        set
        {
          __isset.globalRev = true;
          this._globalRev = value;
        }
      }

      public long IndividualRev
      {
        get
        {
          return _individualRev;
        }
        set
        {
          __isset.individualRev = true;
          this._individualRev = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool localRev;
        public bool count;
        public bool globalRev;
        public bool individualRev;
      }

      public fetchOps_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                GlobalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                IndividualRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchOps_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localRev) {
          field.Name = "localRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        if (__isset.globalRev) {
          field.Name = "globalRev";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(GlobalRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.individualRev) {
          field.Name = "individualRev";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(IndividualRev);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchOps_args(");
        sb.Append("LocalRev: ");
        sb.Append(LocalRev);
        sb.Append(",Count: ");
        sb.Append(Count);
        sb.Append(",GlobalRev: ");
        sb.Append(GlobalRev);
        sb.Append(",IndividualRev: ");
        sb.Append(IndividualRev);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetchOps_result : TBase
    {
      private List<Operation> _success;
      private TalkException _e;

      public List<Operation> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public fetchOps_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Operation>();
                  TList _list172 = iprot.ReadListBegin();
                  for( int _i173 = 0; _i173 < _list172.Count; ++_i173)
                  {
                    Operation _elem174 = new Operation();
                    _elem174 = new Operation();
                    _elem174.Read(iprot);
                    Success.Add(_elem174);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetchOps_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Operation _iter175 in Success)
              {
                _iter175.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetchOps_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByEmail_args : TBase
    {
      private int _reqSeq;
      private THashSet<string> _emails;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public THashSet<string> Emails
      {
        get
        {
          return _emails;
        }
        set
        {
          __isset.emails = true;
          this._emails = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool emails;
      }

      public findAndAddContactsByEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  Emails = new THashSet<string>();
                  TSet _set176 = iprot.ReadSetBegin();
                  for( int _i177 = 0; _i177 < _set176.Count; ++_i177)
                  {
                    string _elem178 = null;
                    _elem178 = iprot.ReadString();
                    Emails.Add(_elem178);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Emails != null && __isset.emails) {
          field.Name = "emails";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Emails.Count));
            foreach (string _iter179 in Emails)
            {
              oprot.WriteString(_iter179);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByEmail_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Emails: ");
        sb.Append(Emails);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByEmail_result : TBase
    {
      private Dictionary<string, Contact> _success;
      private TalkException _e;

      public Dictionary<string, Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findAndAddContactsByEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map180 = iprot.ReadMapBegin();
                  for( int _i181 = 0; _i181 < _map180.Count; ++_i181)
                  {
                    string _key182;
                    Contact _val183;
                    _key182 = iprot.ReadString();
                    _val183 = new Contact();
                    _val183.Read(iprot);
                    Success[_key182] = _val183;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter184 in Success.Keys)
              {
                oprot.WriteString(_iter184);
                Success[_iter184].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByEmail_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByMid_args : TBase
    {
      private int _reqSeq;
      private string _mid;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool mid;
      }

      public findAndAddContactsByMid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByMid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByMid_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Mid: ");
        sb.Append(Mid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByMid_result : TBase
    {
      private Dictionary<string, Contact> _success;
      private TalkException _e;

      public Dictionary<string, Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findAndAddContactsByMid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map185 = iprot.ReadMapBegin();
                  for( int _i186 = 0; _i186 < _map185.Count; ++_i186)
                  {
                    string _key187;
                    Contact _val188;
                    _key187 = iprot.ReadString();
                    _val188 = new Contact();
                    _val188.Read(iprot);
                    Success[_key187] = _val188;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByMid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter189 in Success.Keys)
              {
                oprot.WriteString(_iter189);
                Success[_iter189].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByMid_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByPhone_args : TBase
    {
      private int _reqSeq;
      private THashSet<string> _phones;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public THashSet<string> Phones
      {
        get
        {
          return _phones;
        }
        set
        {
          __isset.phones = true;
          this._phones = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool phones;
      }

      public findAndAddContactsByPhone_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  Phones = new THashSet<string>();
                  TSet _set190 = iprot.ReadSetBegin();
                  for( int _i191 = 0; _i191 < _set190.Count; ++_i191)
                  {
                    string _elem192 = null;
                    _elem192 = iprot.ReadString();
                    Phones.Add(_elem192);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByPhone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Phones != null && __isset.phones) {
          field.Name = "phones";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Phones.Count));
            foreach (string _iter193 in Phones)
            {
              oprot.WriteString(_iter193);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByPhone_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Phones: ");
        sb.Append(Phones);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByPhone_result : TBase
    {
      private Dictionary<string, Contact> _success;
      private TalkException _e;

      public Dictionary<string, Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findAndAddContactsByPhone_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map194 = iprot.ReadMapBegin();
                  for( int _i195 = 0; _i195 < _map194.Count; ++_i195)
                  {
                    string _key196;
                    Contact _val197;
                    _key196 = iprot.ReadString();
                    _val197 = new Contact();
                    _val197.Read(iprot);
                    Success[_key196] = _val197;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByPhone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter198 in Success.Keys)
              {
                oprot.WriteString(_iter198);
                Success[_iter198].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByPhone_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByUserid_args : TBase
    {
      private int _reqSeq;
      private string _userid;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool userid;
      }

      public findAndAddContactsByUserid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByUserid_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Userid: ");
        sb.Append(Userid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findAndAddContactsByUserid_result : TBase
    {
      private Dictionary<string, Contact> _success;
      private TalkException _e;

      public Dictionary<string, Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findAndAddContactsByUserid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map199 = iprot.ReadMapBegin();
                  for( int _i200 = 0; _i200 < _map199.Count; ++_i200)
                  {
                    string _key201;
                    Contact _val202;
                    _key201 = iprot.ReadString();
                    _val202 = new Contact();
                    _val202.Read(iprot);
                    Success[_key201] = _val202;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findAndAddContactsByUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter203 in Success.Keys)
              {
                oprot.WriteString(_iter203);
                Success[_iter203].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findAndAddContactsByUserid_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactByUserid_args : TBase
    {
      private string _userid;

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userid;
      }

      public findContactByUserid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactByUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactByUserid_args(");
        sb.Append("Userid: ");
        sb.Append(Userid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactByUserid_result : TBase
    {
      private Contact _success;
      private TalkException _e;

      public Contact Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findContactByUserid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactByUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactByUserid_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactByUserTicket_args : TBase
    {
      private string _ticketId;

      public string TicketId
      {
        get
        {
          return _ticketId;
        }
        set
        {
          __isset.ticketId = true;
          this._ticketId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ticketId;
      }

      public findContactByUserTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactByUserTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactByUserTicket_args(");
        sb.Append("TicketId: ");
        sb.Append(TicketId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactByUserTicket_result : TBase
    {
      private Contact _success;
      private TalkException _e;

      public Contact Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findContactByUserTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactByUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactByUserTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactsByEmail_args : TBase
    {
      private THashSet<string> _emails;

      public THashSet<string> Emails
      {
        get
        {
          return _emails;
        }
        set
        {
          __isset.emails = true;
          this._emails = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool emails;
      }

      public findContactsByEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Set) {
                {
                  Emails = new THashSet<string>();
                  TSet _set204 = iprot.ReadSetBegin();
                  for( int _i205 = 0; _i205 < _set204.Count; ++_i205)
                  {
                    string _elem206 = null;
                    _elem206 = iprot.ReadString();
                    Emails.Add(_elem206);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactsByEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Emails != null && __isset.emails) {
          field.Name = "emails";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Emails.Count));
            foreach (string _iter207 in Emails)
            {
              oprot.WriteString(_iter207);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactsByEmail_args(");
        sb.Append("Emails: ");
        sb.Append(Emails);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactsByEmail_result : TBase
    {
      private Dictionary<string, Contact> _success;
      private TalkException _e;

      public Dictionary<string, Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findContactsByEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map208 = iprot.ReadMapBegin();
                  for( int _i209 = 0; _i209 < _map208.Count; ++_i209)
                  {
                    string _key210;
                    Contact _val211;
                    _key210 = iprot.ReadString();
                    _val211 = new Contact();
                    _val211.Read(iprot);
                    Success[_key210] = _val211;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactsByEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter212 in Success.Keys)
              {
                oprot.WriteString(_iter212);
                Success[_iter212].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactsByEmail_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactsByPhone_args : TBase
    {
      private THashSet<string> _phones;

      public THashSet<string> Phones
      {
        get
        {
          return _phones;
        }
        set
        {
          __isset.phones = true;
          this._phones = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool phones;
      }

      public findContactsByPhone_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Set) {
                {
                  Phones = new THashSet<string>();
                  TSet _set213 = iprot.ReadSetBegin();
                  for( int _i214 = 0; _i214 < _set213.Count; ++_i214)
                  {
                    string _elem215 = null;
                    _elem215 = iprot.ReadString();
                    Phones.Add(_elem215);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactsByPhone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Phones != null && __isset.phones) {
          field.Name = "phones";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Phones.Count));
            foreach (string _iter216 in Phones)
            {
              oprot.WriteString(_iter216);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactsByPhone_args(");
        sb.Append("Phones: ");
        sb.Append(Phones);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findContactsByPhone_result : TBase
    {
      private Dictionary<string, Contact> _success;
      private TalkException _e;

      public Dictionary<string, Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findContactsByPhone_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map217 = iprot.ReadMapBegin();
                  for( int _i218 = 0; _i218 < _map217.Count; ++_i218)
                  {
                    string _key219;
                    Contact _val220;
                    _key219 = iprot.ReadString();
                    _val220 = new Contact();
                    _val220.Read(iprot);
                    Success[_key219] = _val220;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findContactsByPhone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter221 in Success.Keys)
              {
                oprot.WriteString(_iter221);
                Success[_iter221].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findContactsByPhone_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findSnsIdUserStatus_args : TBase
    {
      private SnsIdType _snsIdType;
      private string _snsAccessToken;
      private string _udidHash;

      /// <summary>
      /// 
      /// <seealso cref="SnsIdType"/>
      /// </summary>
      public SnsIdType SnsIdType
      {
        get
        {
          return _snsIdType;
        }
        set
        {
          __isset.snsIdType = true;
          this._snsIdType = value;
        }
      }

      public string SnsAccessToken
      {
        get
        {
          return _snsAccessToken;
        }
        set
        {
          __isset.snsAccessToken = true;
          this._snsAccessToken = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snsIdType;
        public bool snsAccessToken;
        public bool udidHash;
      }

      public findSnsIdUserStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findSnsIdUserStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findSnsIdUserStatus_args(");
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
        sb.Append(",SnsAccessToken: ");
        sb.Append(SnsAccessToken);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findSnsIdUserStatus_result : TBase
    {
      private SnsIdUserStatus _success;
      private TalkException _e;

      public SnsIdUserStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public findSnsIdUserStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SnsIdUserStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("findSnsIdUserStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("findSnsIdUserStatus_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class finishUpdateVerification_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public finishUpdateVerification_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("finishUpdateVerification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("finishUpdateVerification_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class finishUpdateVerification_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public finishUpdateVerification_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("finishUpdateVerification_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("finishUpdateVerification_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class generateUserTicket_args : TBase
    {
      private long _expirationTime;
      private int _maxUseCount;

      public long ExpirationTime
      {
        get
        {
          return _expirationTime;
        }
        set
        {
          __isset.expirationTime = true;
          this._expirationTime = value;
        }
      }

      public int MaxUseCount
      {
        get
        {
          return _maxUseCount;
        }
        set
        {
          __isset.maxUseCount = true;
          this._maxUseCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expirationTime;
        public bool maxUseCount;
      }

      public generateUserTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I64) {
                ExpirationTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MaxUseCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("generateUserTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.expirationTime) {
          field.Name = "expirationTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ExpirationTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxUseCount) {
          field.Name = "maxUseCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxUseCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("generateUserTicket_args(");
        sb.Append("ExpirationTime: ");
        sb.Append(ExpirationTime);
        sb.Append(",MaxUseCount: ");
        sb.Append(MaxUseCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class generateUserTicket_result : TBase
    {
      private Ticket _success;
      private TalkException _e;

      public Ticket Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public generateUserTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Ticket();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("generateUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("generateUserTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAcceptedProximityMatches_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getAcceptedProximityMatches_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAcceptedProximityMatches_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAcceptedProximityMatches_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAcceptedProximityMatches_result : TBase
    {
      private THashSet<string> _success;
      private TalkException _e;

      public THashSet<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getAcceptedProximityMatches_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<string>();
                  TSet _set222 = iprot.ReadSetBegin();
                  for( int _i223 = 0; _i223 < _set222.Count; ++_i223)
                  {
                    string _elem224 = null;
                    _elem224 = iprot.ReadString();
                    Success.Add(_elem224);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAcceptedProximityMatches_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.String, Success.Count));
              foreach (string _iter225 in Success)
              {
                oprot.WriteString(_iter225);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAcceptedProximityMatches_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActiveBuddySubscriberIds_args : TBase
    {

      public getActiveBuddySubscriberIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActiveBuddySubscriberIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getActiveBuddySubscriberIds_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActiveBuddySubscriberIds_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getActiveBuddySubscriberIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list226 = iprot.ReadListBegin();
                  for( int _i227 = 0; _i227 < _list226.Count; ++_i227)
                  {
                    string _elem228 = null;
                    _elem228 = iprot.ReadString();
                    Success.Add(_elem228);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActiveBuddySubscriberIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter229 in Success)
              {
                oprot.WriteString(_iter229);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getActiveBuddySubscriberIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllContactIds_args : TBase
    {

      public getAllContactIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllContactIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllContactIds_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAllContactIds_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getAllContactIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list230 = iprot.ReadListBegin();
                  for( int _i231 = 0; _i231 < _list230.Count; ++_i231)
                  {
                    string _elem232 = null;
                    _elem232 = iprot.ReadString();
                    Success.Add(_elem232);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAllContactIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter233 in Success)
              {
                oprot.WriteString(_iter233);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAllContactIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAuthQrcode_args : TBase
    {
      private bool _keepLoggedIn;
      private string _systemName;

      public bool KeepLoggedIn
      {
        get
        {
          return _keepLoggedIn;
        }
        set
        {
          __isset.keepLoggedIn = true;
          this._keepLoggedIn = value;
        }
      }

      public string SystemName
      {
        get
        {
          return _systemName;
        }
        set
        {
          __isset.systemName = true;
          this._systemName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool keepLoggedIn;
        public bool systemName;
      }

      public getAuthQrcode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Bool) {
                KeepLoggedIn = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SystemName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAuthQrcode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.keepLoggedIn) {
          field.Name = "keepLoggedIn";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(KeepLoggedIn);
          oprot.WriteFieldEnd();
        }
        if (SystemName != null && __isset.systemName) {
          field.Name = "systemName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SystemName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAuthQrcode_args(");
        sb.Append("KeepLoggedIn: ");
        sb.Append(KeepLoggedIn);
        sb.Append(",SystemName: ");
        sb.Append(SystemName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAuthQrcode_result : TBase
    {
      private AuthQrcode _success;
      private TalkException _e;

      public AuthQrcode Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getAuthQrcode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AuthQrcode();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAuthQrcode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAuthQrcode_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedContactIds_args : TBase
    {

      public getBlockedContactIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedContactIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlockedContactIds_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedContactIds_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getBlockedContactIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list234 = iprot.ReadListBegin();
                  for( int _i235 = 0; _i235 < _list234.Count; ++_i235)
                  {
                    string _elem236 = null;
                    _elem236 = iprot.ReadString();
                    Success.Add(_elem236);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedContactIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter237 in Success)
              {
                oprot.WriteString(_iter237);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlockedContactIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedContactIdsByRange_args : TBase
    {
      private int _start;
      private int _count;

      public int Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool count;
      }

      public getBlockedContactIdsByRange_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Start = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedContactIdsByRange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlockedContactIdsByRange_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Count: ");
        sb.Append(Count);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedContactIdsByRange_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getBlockedContactIdsByRange_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list238 = iprot.ReadListBegin();
                  for( int _i239 = 0; _i239 < _list238.Count; ++_i239)
                  {
                    string _elem240 = null;
                    _elem240 = iprot.ReadString();
                    Success.Add(_elem240);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedContactIdsByRange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter241 in Success)
              {
                oprot.WriteString(_iter241);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlockedContactIdsByRange_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedRecommendationIds_args : TBase
    {

      public getBlockedRecommendationIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedRecommendationIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlockedRecommendationIds_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlockedRecommendationIds_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getBlockedRecommendationIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list242 = iprot.ReadListBegin();
                  for( int _i243 = 0; _i243 < _list242.Count; ++_i243)
                  {
                    string _elem244 = null;
                    _elem244 = iprot.ReadString();
                    Success.Add(_elem244);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlockedRecommendationIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter245 in Success)
              {
                oprot.WriteString(_iter245);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlockedRecommendationIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBuddyBlockerIds_args : TBase
    {

      public getBuddyBlockerIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBuddyBlockerIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBuddyBlockerIds_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBuddyBlockerIds_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getBuddyBlockerIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list246 = iprot.ReadListBegin();
                  for( int _i247 = 0; _i247 < _list246.Count; ++_i247)
                  {
                    string _elem248 = null;
                    _elem248 = iprot.ReadString();
                    Success.Add(_elem248);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBuddyBlockerIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter249 in Success)
              {
                oprot.WriteString(_iter249);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBuddyBlockerIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBuddyLocation_args : TBase
    {
      private string _mid;
      private int _index;

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mid;
        public bool index;
      }

      public getBuddyLocation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBuddyLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBuddyLocation_args(");
        sb.Append("Mid: ");
        sb.Append(Mid);
        sb.Append(",Index: ");
        sb.Append(Index);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBuddyLocation_result : TBase
    {
      private Geolocation _success;
      private TalkException _e;

      public Geolocation Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getBuddyLocation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Geolocation();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBuddyLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBuddyLocation_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompactContactsModifiedSince_args : TBase
    {
      private long _timestamp;

      public long Timestamp
      {
        get
        {
          return _timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this._timestamp = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool timestamp;
      }

      public getCompactContactsModifiedSince_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompactContactsModifiedSince_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.timestamp) {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Timestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCompactContactsModifiedSince_args(");
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompactContactsModifiedSince_result : TBase
    {
      private List<CompactContact> _success;
      private TalkException _e;

      public List<CompactContact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCompactContactsModifiedSince_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompactContact>();
                  TList _list250 = iprot.ReadListBegin();
                  for( int _i251 = 0; _i251 < _list250.Count; ++_i251)
                  {
                    CompactContact _elem252 = new CompactContact();
                    _elem252 = new CompactContact();
                    _elem252.Read(iprot);
                    Success.Add(_elem252);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompactContactsModifiedSince_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompactContact _iter253 in Success)
              {
                _iter253.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCompactContactsModifiedSince_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompactGroup_args : TBase
    {
      private string _groupId;

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
      }

      public getCompactGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompactGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCompactGroup_args(");
        sb.Append("GroupId: ");
        sb.Append(GroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompactGroup_result : TBase
    {
      private Group _success;
      private TalkException _e;

      public Group Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCompactGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompactGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCompactGroup_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompactRoom_args : TBase
    {
      private string _roomId;

      public string RoomId
      {
        get
        {
          return _roomId;
        }
        set
        {
          __isset.roomId = true;
          this._roomId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool roomId;
      }

      public getCompactRoom_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompactRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCompactRoom_args(");
        sb.Append("RoomId: ");
        sb.Append(RoomId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCompactRoom_result : TBase
    {
      private Room _success;
      private TalkException _e;

      public Room Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCompactRoom_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCompactRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCompactRoom_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContact_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getContact_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getContact_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContact_result : TBase
    {
      private Contact _success;
      private TalkException _e;

      public Contact Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getContact_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getContact_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContacts_args : TBase
    {
      private List<string> _ids;

      public List<string> Ids
      {
        get
        {
          return _ids;
        }
        set
        {
          __isset.ids = true;
          this._ids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ids;
      }

      public getContacts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  Ids = new List<string>();
                  TList _list254 = iprot.ReadListBegin();
                  for( int _i255 = 0; _i255 < _list254.Count; ++_i255)
                  {
                    string _elem256 = null;
                    _elem256 = iprot.ReadString();
                    Ids.Add(_elem256);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ids.Count));
            foreach (string _iter257 in Ids)
            {
              oprot.WriteString(_iter257);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getContacts_args(");
        sb.Append("Ids: ");
        sb.Append(Ids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getContacts_result : TBase
    {
      private List<Contact> _success;
      private TalkException _e;

      public List<Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getContacts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Contact>();
                  TList _list258 = iprot.ReadListBegin();
                  for( int _i259 = 0; _i259 < _list258.Count; ++_i259)
                  {
                    Contact _elem260 = new Contact();
                    _elem260 = new Contact();
                    _elem260.Read(iprot);
                    Success.Add(_elem260);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Contact _iter261 in Success)
              {
                _iter261.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getContacts_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCountryWithRequestIp_args : TBase
    {

      public getCountryWithRequestIp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCountryWithRequestIp_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCountryWithRequestIp_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCountryWithRequestIp_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCountryWithRequestIp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCountryWithRequestIp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCountryWithRequestIp_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFavoriteMids_args : TBase
    {

      public getFavoriteMids_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFavoriteMids_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFavoriteMids_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFavoriteMids_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getFavoriteMids_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list262 = iprot.ReadListBegin();
                  for( int _i263 = 0; _i263 < _list262.Count; ++_i263)
                  {
                    string _elem264 = null;
                    _elem264 = iprot.ReadString();
                    Success.Add(_elem264);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFavoriteMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter265 in Success)
              {
                oprot.WriteString(_iter265);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFavoriteMids_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroup_args : TBase
    {
      private string _groupId;

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupId;
      }

      public getGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroup_args(");
        sb.Append("GroupId: ");
        sb.Append(GroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroup_result : TBase
    {
      private Group _success;
      private TalkException _e;

      public Group Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroup_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupIdsInvited_args : TBase
    {

      public getGroupIdsInvited_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupIdsInvited_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroupIdsInvited_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupIdsInvited_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getGroupIdsInvited_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list266 = iprot.ReadListBegin();
                  for( int _i267 = 0; _i267 < _list266.Count; ++_i267)
                  {
                    string _elem268 = null;
                    _elem268 = iprot.ReadString();
                    Success.Add(_elem268);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupIdsInvited_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter269 in Success)
              {
                oprot.WriteString(_iter269);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroupIdsInvited_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupIdsJoined_args : TBase
    {

      public getGroupIdsJoined_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupIdsJoined_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroupIdsJoined_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroupIdsJoined_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getGroupIdsJoined_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list270 = iprot.ReadListBegin();
                  for( int _i271 = 0; _i271 < _list270.Count; ++_i271)
                  {
                    string _elem272 = null;
                    _elem272 = iprot.ReadString();
                    Success.Add(_elem272);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroupIdsJoined_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter273 in Success)
              {
                oprot.WriteString(_iter273);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroupIdsJoined_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroups_args : TBase
    {
      private List<string> _groupIds;

      public List<string> GroupIds
      {
        get
        {
          return _groupIds;
        }
        set
        {
          __isset.groupIds = true;
          this._groupIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupIds;
      }

      public getGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  GroupIds = new List<string>();
                  TList _list274 = iprot.ReadListBegin();
                  for( int _i275 = 0; _i275 < _list274.Count; ++_i275)
                  {
                    string _elem276 = null;
                    _elem276 = iprot.ReadString();
                    GroupIds.Add(_elem276);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupIds != null && __isset.groupIds) {
          field.Name = "groupIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GroupIds.Count));
            foreach (string _iter277 in GroupIds)
            {
              oprot.WriteString(_iter277);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroups_args(");
        sb.Append("GroupIds: ");
        sb.Append(GroupIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getGroups_result : TBase
    {
      private List<Group> _success;
      private TalkException _e;

      public List<Group> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Group>();
                  TList _list278 = iprot.ReadListBegin();
                  for( int _i279 = 0; _i279 < _list278.Count; ++_i279)
                  {
                    Group _elem280 = new Group();
                    _elem280 = new Group();
                    _elem280.Read(iprot);
                    Success.Add(_elem280);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Group _iter281 in Success)
              {
                _iter281.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getGroups_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHiddenContactMids_args : TBase
    {

      public getHiddenContactMids_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHiddenContactMids_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHiddenContactMids_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getHiddenContactMids_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getHiddenContactMids_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list282 = iprot.ReadListBegin();
                  for( int _i283 = 0; _i283 < _list282.Count; ++_i283)
                  {
                    string _elem284 = null;
                    _elem284 = iprot.ReadString();
                    Success.Add(_elem284);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getHiddenContactMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter285 in Success)
              {
                oprot.WriteString(_iter285);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getHiddenContactMids_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getIdentityIdentifier_args : TBase
    {

      public getIdentityIdentifier_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getIdentityIdentifier_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getIdentityIdentifier_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getIdentityIdentifier_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getIdentityIdentifier_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getIdentityIdentifier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getIdentityIdentifier_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLastAnnouncementIndex_args : TBase
    {

      public getLastAnnouncementIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLastAnnouncementIndex_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLastAnnouncementIndex_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLastAnnouncementIndex_result : TBase
    {
      private int _success;
      private TalkException _e;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getLastAnnouncementIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLastAnnouncementIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLastAnnouncementIndex_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLastOpRevision_args : TBase
    {

      public getLastOpRevision_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLastOpRevision_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLastOpRevision_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLastOpRevision_result : TBase
    {
      private long _success;
      private TalkException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getLastOpRevision_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLastOpRevision_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLastOpRevision_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBox_args : TBase
    {
      private string _channelId;
      private string _messageBoxId;
      private int _lastMessagesCount;

      public string ChannelId
      {
        get
        {
          return _channelId;
        }
        set
        {
          __isset.channelId = true;
          this._channelId = value;
        }
      }

      public string MessageBoxId
      {
        get
        {
          return _messageBoxId;
        }
        set
        {
          __isset.messageBoxId = true;
          this._messageBoxId = value;
        }
      }

      public int LastMessagesCount
      {
        get
        {
          return _lastMessagesCount;
        }
        set
        {
          __isset.lastMessagesCount = true;
          this._lastMessagesCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool channelId;
        public bool messageBoxId;
        public bool lastMessagesCount;
      }

      public getMessageBox_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                LastMessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBox_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastMessagesCount) {
          field.Name = "lastMessagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastMessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBox_args(");
        sb.Append("ChannelId: ");
        sb.Append(ChannelId);
        sb.Append(",MessageBoxId: ");
        sb.Append(MessageBoxId);
        sb.Append(",LastMessagesCount: ");
        sb.Append(LastMessagesCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBox_result : TBase
    {
      private TMessageBox _success;
      private TalkException _e;

      public TMessageBox Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessageBox_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBox();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBox_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBox_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxCompactWrapUp_args : TBase
    {
      private string _mid;

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mid;
      }

      public getMessageBoxCompactWrapUp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxCompactWrapUp_args(");
        sb.Append("Mid: ");
        sb.Append(Mid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxCompactWrapUp_result : TBase
    {
      private TMessageBoxWrapUp _success;
      private TalkException _e;

      public TMessageBoxWrapUp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessageBoxCompactWrapUp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxCompactWrapUp_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxCompactWrapUpList_args : TBase
    {
      private int _start;
      private int _messageBoxCount;

      public int Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int MessageBoxCount
      {
        get
        {
          return _messageBoxCount;
        }
        set
        {
          __isset.messageBoxCount = true;
          this._messageBoxCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool messageBoxCount;
      }

      public getMessageBoxCompactWrapUpList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Start = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessageBoxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUpList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.messageBoxCount) {
          field.Name = "messageBoxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessageBoxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxCompactWrapUpList_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",MessageBoxCount: ");
        sb.Append(MessageBoxCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxCompactWrapUpList_result : TBase
    {
      private TMessageBoxWrapUpResponse _success;
      private TalkException _e;

      public TMessageBoxWrapUpResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessageBoxCompactWrapUpList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUpResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUpList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxCompactWrapUpList_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxList_args : TBase
    {
      private string _channelId;
      private int _lastMessagesCount;

      public string ChannelId
      {
        get
        {
          return _channelId;
        }
        set
        {
          __isset.channelId = true;
          this._channelId = value;
        }
      }

      public int LastMessagesCount
      {
        get
        {
          return _lastMessagesCount;
        }
        set
        {
          __isset.lastMessagesCount = true;
          this._lastMessagesCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool channelId;
        public bool lastMessagesCount;
      }

      public getMessageBoxList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                LastMessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastMessagesCount) {
          field.Name = "lastMessagesCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastMessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxList_args(");
        sb.Append("ChannelId: ");
        sb.Append(ChannelId);
        sb.Append(",LastMessagesCount: ");
        sb.Append(LastMessagesCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxList_result : TBase
    {
      private List<TMessageBox> _success;
      private TalkException _e;

      public List<TMessageBox> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessageBoxList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessageBox>();
                  TList _list286 = iprot.ReadListBegin();
                  for( int _i287 = 0; _i287 < _list286.Count; ++_i287)
                  {
                    TMessageBox _elem288 = new TMessageBox();
                    _elem288 = new TMessageBox();
                    _elem288.Read(iprot);
                    Success.Add(_elem288);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessageBox _iter289 in Success)
              {
                _iter289.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxList_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxListByStatus_args : TBase
    {
      private string _channelId;
      private int _lastMessagesCount;
      private int _status;

      public string ChannelId
      {
        get
        {
          return _channelId;
        }
        set
        {
          __isset.channelId = true;
          this._channelId = value;
        }
      }

      public int LastMessagesCount
      {
        get
        {
          return _lastMessagesCount;
        }
        set
        {
          __isset.lastMessagesCount = true;
          this._lastMessagesCount = value;
        }
      }

      public int Status
      {
        get
        {
          return _status;
        }
        set
        {
          __isset.status = true;
          this._status = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool channelId;
        public bool lastMessagesCount;
        public bool status;
      }

      public getMessageBoxListByStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                LastMessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Status = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxListByStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastMessagesCount) {
          field.Name = "lastMessagesCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastMessagesCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Status);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxListByStatus_args(");
        sb.Append("ChannelId: ");
        sb.Append(ChannelId);
        sb.Append(",LastMessagesCount: ");
        sb.Append(LastMessagesCount);
        sb.Append(",Status: ");
        sb.Append(Status);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxListByStatus_result : TBase
    {
      private List<TMessageBox> _success;
      private TalkException _e;

      public List<TMessageBox> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessageBoxListByStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessageBox>();
                  TList _list290 = iprot.ReadListBegin();
                  for( int _i291 = 0; _i291 < _list290.Count; ++_i291)
                  {
                    TMessageBox _elem292 = new TMessageBox();
                    _elem292 = new TMessageBox();
                    _elem292.Read(iprot);
                    Success.Add(_elem292);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxListByStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessageBox _iter293 in Success)
              {
                _iter293.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxListByStatus_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxWrapUp_args : TBase
    {
      private string _mid;

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mid;
      }

      public getMessageBoxWrapUp_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxWrapUp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxWrapUp_args(");
        sb.Append("Mid: ");
        sb.Append(Mid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxWrapUp_result : TBase
    {
      private TMessageBoxWrapUp _success;
      private TalkException _e;

      public TMessageBoxWrapUp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessageBoxWrapUp_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxWrapUp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxWrapUp_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxWrapUpList_args : TBase
    {
      private int _start;
      private int _messageBoxCount;

      public int Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int MessageBoxCount
      {
        get
        {
          return _messageBoxCount;
        }
        set
        {
          __isset.messageBoxCount = true;
          this._messageBoxCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool messageBoxCount;
      }

      public getMessageBoxWrapUpList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Start = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessageBoxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxWrapUpList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.messageBoxCount) {
          field.Name = "messageBoxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessageBoxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxWrapUpList_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",MessageBoxCount: ");
        sb.Append(MessageBoxCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessageBoxWrapUpList_result : TBase
    {
      private TMessageBoxWrapUpResponse _success;
      private TalkException _e;

      public TMessageBoxWrapUpResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessageBoxWrapUpList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUpResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessageBoxWrapUpList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessageBoxWrapUpList_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessagesBySequenceNumber_args : TBase
    {
      private string _channelId;
      private string _messageBoxId;
      private long _startSeq;
      private long _endSeq;

      public string ChannelId
      {
        get
        {
          return _channelId;
        }
        set
        {
          __isset.channelId = true;
          this._channelId = value;
        }
      }

      public string MessageBoxId
      {
        get
        {
          return _messageBoxId;
        }
        set
        {
          __isset.messageBoxId = true;
          this._messageBoxId = value;
        }
      }

      public long StartSeq
      {
        get
        {
          return _startSeq;
        }
        set
        {
          __isset.startSeq = true;
          this._startSeq = value;
        }
      }

      public long EndSeq
      {
        get
        {
          return _endSeq;
        }
        set
        {
          __isset.endSeq = true;
          this._endSeq = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool channelId;
        public bool messageBoxId;
        public bool startSeq;
        public bool endSeq;
      }

      public getMessagesBySequenceNumber_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                StartSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                EndSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessagesBySequenceNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.startSeq) {
          field.Name = "startSeq";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.endSeq) {
          field.Name = "endSeq";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndSeq);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessagesBySequenceNumber_args(");
        sb.Append("ChannelId: ");
        sb.Append(ChannelId);
        sb.Append(",MessageBoxId: ");
        sb.Append(MessageBoxId);
        sb.Append(",StartSeq: ");
        sb.Append(StartSeq);
        sb.Append(",EndSeq: ");
        sb.Append(EndSeq);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMessagesBySequenceNumber_result : TBase
    {
      private List<Message> _success;
      private TalkException _e;

      public List<Message> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getMessagesBySequenceNumber_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list294 = iprot.ReadListBegin();
                  for( int _i295 = 0; _i295 < _list294.Count; ++_i295)
                  {
                    Message _elem296 = new Message();
                    _elem296 = new Message();
                    _elem296.Read(iprot);
                    Success.Add(_elem296);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMessagesBySequenceNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter297 in Success)
              {
                _iter297.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMessagesBySequenceNumber_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNextMessages_args : TBase
    {
      private string _messageBoxId;
      private long _startSeq;
      private int _messagesCount;

      public string MessageBoxId
      {
        get
        {
          return _messageBoxId;
        }
        set
        {
          __isset.messageBoxId = true;
          this._messageBoxId = value;
        }
      }

      public long StartSeq
      {
        get
        {
          return _startSeq;
        }
        set
        {
          __isset.startSeq = true;
          this._startSeq = value;
        }
      }

      public int MessagesCount
      {
        get
        {
          return _messagesCount;
        }
        set
        {
          __isset.messagesCount = true;
          this._messagesCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool messageBoxId;
        public bool startSeq;
        public bool messagesCount;
      }

      public getNextMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNextMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.startSeq) {
          field.Name = "startSeq";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNextMessages_args(");
        sb.Append("MessageBoxId: ");
        sb.Append(MessageBoxId);
        sb.Append(",StartSeq: ");
        sb.Append(StartSeq);
        sb.Append(",MessagesCount: ");
        sb.Append(MessagesCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNextMessages_result : TBase
    {
      private List<Message> _success;
      private TalkException _e;

      public List<Message> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getNextMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list298 = iprot.ReadListBegin();
                  for( int _i299 = 0; _i299 < _list298.Count; ++_i299)
                  {
                    Message _elem300 = new Message();
                    _elem300 = new Message();
                    _elem300.Read(iprot);
                    Success.Add(_elem300);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNextMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter301 in Success)
              {
                _iter301.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNextMessages_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationPolicy_args : TBase
    {
      private CarrierCode _carrier;

      /// <summary>
      /// 
      /// <seealso cref="CarrierCode"/>
      /// </summary>
      public CarrierCode Carrier
      {
        get
        {
          return _carrier;
        }
        set
        {
          __isset.carrier = true;
          this._carrier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool carrier;
      }

      public getNotificationPolicy_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNotificationPolicy_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNotificationPolicy_args(");
        sb.Append("Carrier: ");
        sb.Append(Carrier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNotificationPolicy_result : TBase
    {
      private List<NotificationType> _success;
      private TalkException _e;

      public List<NotificationType> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getNotificationPolicy_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<NotificationType>();
                  TList _list302 = iprot.ReadListBegin();
                  for( int _i303 = 0; _i303 < _list302.Count; ++_i303)
                  {
                    NotificationType _elem304 = (NotificationType)0;
                    _elem304 = (NotificationType)iprot.ReadI32();
                    Success.Add(_elem304);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNotificationPolicy_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Success.Count));
              foreach (NotificationType _iter305 in Success)
              {
                oprot.WriteI32((int)_iter305);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNotificationPolicy_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPreviousMessages_args : TBase
    {
      private string _messageBoxId;
      private long _endSeq;
      private int _messagesCount;

      public string MessageBoxId
      {
        get
        {
          return _messageBoxId;
        }
        set
        {
          __isset.messageBoxId = true;
          this._messageBoxId = value;
        }
      }

      public long EndSeq
      {
        get
        {
          return _endSeq;
        }
        set
        {
          __isset.endSeq = true;
          this._endSeq = value;
        }
      }

      public int MessagesCount
      {
        get
        {
          return _messagesCount;
        }
        set
        {
          __isset.messagesCount = true;
          this._messagesCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool messageBoxId;
        public bool endSeq;
        public bool messagesCount;
      }

      public getPreviousMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                EndSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPreviousMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.endSeq) {
          field.Name = "endSeq";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPreviousMessages_args(");
        sb.Append("MessageBoxId: ");
        sb.Append(MessageBoxId);
        sb.Append(",EndSeq: ");
        sb.Append(EndSeq);
        sb.Append(",MessagesCount: ");
        sb.Append(MessagesCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPreviousMessages_result : TBase
    {
      private List<Message> _success;
      private TalkException _e;

      public List<Message> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getPreviousMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list306 = iprot.ReadListBegin();
                  for( int _i307 = 0; _i307 < _list306.Count; ++_i307)
                  {
                    Message _elem308 = new Message();
                    _elem308 = new Message();
                    _elem308.Read(iprot);
                    Success.Add(_elem308);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPreviousMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter309 in Success)
              {
                _iter309.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPreviousMessages_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProfile_args : TBase
    {

      public getProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProfile_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProfile_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProfile_result : TBase
    {
      private Profile _success;
      private TalkException _e;

      public Profile Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Profile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProfile_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProximityMatchCandidateList_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getProximityMatchCandidateList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProximityMatchCandidateList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProximityMatchCandidateList_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProximityMatchCandidateList_result : TBase
    {
      private ProximityMatchCandidateResult _success;
      private TalkException _e;

      public ProximityMatchCandidateResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getProximityMatchCandidateList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProximityMatchCandidateResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProximityMatchCandidateList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProximityMatchCandidateList_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProximityMatchCandidates_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public getProximityMatchCandidates_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProximityMatchCandidates_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProximityMatchCandidates_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProximityMatchCandidates_result : TBase
    {
      private THashSet<Contact> _success;
      private TalkException _e;

      public THashSet<Contact> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getProximityMatchCandidates_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<Contact>();
                  TSet _set310 = iprot.ReadSetBegin();
                  for( int _i311 = 0; _i311 < _set310.Count; ++_i311)
                  {
                    Contact _elem312 = new Contact();
                    _elem312 = new Contact();
                    _elem312.Read(iprot);
                    Success.Add(_elem312);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProximityMatchCandidates_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
              foreach (Contact _iter313 in Success)
              {
                _iter313.Write(oprot);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProximityMatchCandidates_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecentMessages_args : TBase
    {
      private string _messageBoxId;
      private int _messagesCount;

      public string MessageBoxId
      {
        get
        {
          return _messageBoxId;
        }
        set
        {
          __isset.messageBoxId = true;
          this._messageBoxId = value;
        }
      }

      public int MessagesCount
      {
        get
        {
          return _messagesCount;
        }
        set
        {
          __isset.messagesCount = true;
          this._messagesCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool messageBoxId;
        public bool messagesCount;
      }

      public getRecentMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecentMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRecentMessages_args(");
        sb.Append("MessageBoxId: ");
        sb.Append(MessageBoxId);
        sb.Append(",MessagesCount: ");
        sb.Append(MessagesCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecentMessages_result : TBase
    {
      private List<Message> _success;
      private TalkException _e;

      public List<Message> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getRecentMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list314 = iprot.ReadListBegin();
                  for( int _i315 = 0; _i315 < _list314.Count; ++_i315)
                  {
                    Message _elem316 = new Message();
                    _elem316 = new Message();
                    _elem316.Read(iprot);
                    Success.Add(_elem316);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecentMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter317 in Success)
              {
                _iter317.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRecentMessages_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecommendationIds_args : TBase
    {

      public getRecommendationIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecommendationIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRecommendationIds_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecommendationIds_result : TBase
    {
      private List<string> _success;
      private TalkException _e;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getRecommendationIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list318 = iprot.ReadListBegin();
                  for( int _i319 = 0; _i319 < _list318.Count; ++_i319)
                  {
                    string _elem320 = null;
                    _elem320 = iprot.ReadString();
                    Success.Add(_elem320);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecommendationIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter321 in Success)
              {
                oprot.WriteString(_iter321);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRecommendationIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRoom_args : TBase
    {
      private string _roomId;

      public string RoomId
      {
        get
        {
          return _roomId;
        }
        set
        {
          __isset.roomId = true;
          this._roomId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool roomId;
      }

      public getRoom_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRoom_args(");
        sb.Append("RoomId: ");
        sb.Append(RoomId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRoom_result : TBase
    {
      private Room _success;
      private TalkException _e;

      public Room Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getRoom_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRoom_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRSAKeyInfo_args : TBase
    {
      private IdentityProvider _provider;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool provider;
      }

      public getRSAKeyInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRSAKeyInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRSAKeyInfo_args(");
        sb.Append("Provider: ");
        sb.Append(Provider);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRSAKeyInfo_result : TBase
    {
      private RSAKey _success;
      private TalkException _e;

      public RSAKey Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getRSAKeyInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RSAKey();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRSAKeyInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRSAKeyInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getServerTime_args : TBase
    {

      public getServerTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getServerTime_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getServerTime_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getServerTime_result : TBase
    {
      private long _success;
      private TalkException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getServerTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getServerTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getServerTime_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSessions_args : TBase
    {

      public getSessions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSessions_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSessions_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSessions_result : TBase
    {
      private List<LoginSession> _success;
      private TalkException _e;

      public List<LoginSession> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getSessions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LoginSession>();
                  TList _list322 = iprot.ReadListBegin();
                  for( int _i323 = 0; _i323 < _list322.Count; ++_i323)
                  {
                    LoginSession _elem324 = new LoginSession();
                    _elem324 = new LoginSession();
                    _elem324.Read(iprot);
                    Success.Add(_elem324);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSessions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (LoginSession _iter325 in Success)
              {
                _iter325.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSessions_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettings_args : TBase
    {

      public getSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettings_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettings_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettings_result : TBase
    {
      private Settings _success;
      private TalkException _e;

      public Settings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Settings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettingsAttributes_args : TBase
    {
      private int _attrBitset;

      public int AttrBitset
      {
        get
        {
          return _attrBitset;
        }
        set
        {
          __isset.attrBitset = true;
          this._attrBitset = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool attrBitset;
      }

      public getSettingsAttributes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                AttrBitset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettingsAttributes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.attrBitset) {
          field.Name = "attrBitset";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AttrBitset);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettingsAttributes_args(");
        sb.Append("AttrBitset: ");
        sb.Append(AttrBitset);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSettingsAttributes_result : TBase
    {
      private Settings _success;
      private TalkException _e;

      public Settings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getSettingsAttributes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Settings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSettingsAttributes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSettingsAttributes_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSystemConfiguration_args : TBase
    {

      public getSystemConfiguration_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSystemConfiguration_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSystemConfiguration_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSystemConfiguration_result : TBase
    {
      private SystemConfiguration _success;
      private TalkException _e;

      public SystemConfiguration Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getSystemConfiguration_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SystemConfiguration();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSystemConfiguration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSystemConfiguration_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserTicket_args : TBase
    {

      public getUserTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserTicket_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserTicket_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserTicket_result : TBase
    {
      private Ticket _success;
      private TalkException _e;

      public Ticket Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getUserTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Ticket();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWapInvitation_args : TBase
    {
      private string _invitationHash;

      public string InvitationHash
      {
        get
        {
          return _invitationHash;
        }
        set
        {
          __isset.invitationHash = true;
          this._invitationHash = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool invitationHash;
      }

      public getWapInvitation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                InvitationHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getWapInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InvitationHash != null && __isset.invitationHash) {
          field.Name = "invitationHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvitationHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getWapInvitation_args(");
        sb.Append("InvitationHash: ");
        sb.Append(InvitationHash);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getWapInvitation_result : TBase
    {
      private WapInvitation _success;
      private TalkException _e;

      public WapInvitation Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getWapInvitation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new WapInvitation();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getWapInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getWapInvitation_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class invalidateUserTicket_args : TBase
    {

      public invalidateUserTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("invalidateUserTicket_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("invalidateUserTicket_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class invalidateUserTicket_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public invalidateUserTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("invalidateUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("invalidateUserTicket_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteFriendsBySms_args : TBase
    {
      private List<string> _phoneNumberList;

      public List<string> PhoneNumberList
      {
        get
        {
          return _phoneNumberList;
        }
        set
        {
          __isset.phoneNumberList = true;
          this._phoneNumberList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool phoneNumberList;
      }

      public inviteFriendsBySms_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  PhoneNumberList = new List<string>();
                  TList _list326 = iprot.ReadListBegin();
                  for( int _i327 = 0; _i327 < _list326.Count; ++_i327)
                  {
                    string _elem328 = null;
                    _elem328 = iprot.ReadString();
                    PhoneNumberList.Add(_elem328);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteFriendsBySms_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PhoneNumberList != null && __isset.phoneNumberList) {
          field.Name = "phoneNumberList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, PhoneNumberList.Count));
            foreach (string _iter329 in PhoneNumberList)
            {
              oprot.WriteString(_iter329);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteFriendsBySms_args(");
        sb.Append("PhoneNumberList: ");
        sb.Append(PhoneNumberList);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteFriendsBySms_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public inviteFriendsBySms_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteFriendsBySms_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteFriendsBySms_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteIntoGroup_args : TBase
    {
      private int _reqSeq;
      private string _groupId;
      private List<string> _contactIds;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public List<string> ContactIds
      {
        get
        {
          return _contactIds;
        }
        set
        {
          __isset.contactIds = true;
          this._contactIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool groupId;
        public bool contactIds;
      }

      public inviteIntoGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list330 = iprot.ReadListBegin();
                  for( int _i331 = 0; _i331 < _list330.Count; ++_i331)
                  {
                    string _elem332 = null;
                    _elem332 = iprot.ReadString();
                    ContactIds.Add(_elem332);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteIntoGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter333 in ContactIds)
            {
              oprot.WriteString(_iter333);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteIntoGroup_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",GroupId: ");
        sb.Append(GroupId);
        sb.Append(",ContactIds: ");
        sb.Append(ContactIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteIntoGroup_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public inviteIntoGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteIntoGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteIntoGroup_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteIntoRoom_args : TBase
    {
      private int _reqSeq;
      private string _roomId;
      private List<string> _contactIds;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string RoomId
      {
        get
        {
          return _roomId;
        }
        set
        {
          __isset.roomId = true;
          this._roomId = value;
        }
      }

      public List<string> ContactIds
      {
        get
        {
          return _contactIds;
        }
        set
        {
          __isset.contactIds = true;
          this._contactIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool roomId;
        public bool contactIds;
      }

      public inviteIntoRoom_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list334 = iprot.ReadListBegin();
                  for( int _i335 = 0; _i335 < _list334.Count; ++_i335)
                  {
                    string _elem336 = null;
                    _elem336 = iprot.ReadString();
                    ContactIds.Add(_elem336);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteIntoRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter337 in ContactIds)
            {
              oprot.WriteString(_iter337);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteIntoRoom_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",RoomId: ");
        sb.Append(RoomId);
        sb.Append(",ContactIds: ");
        sb.Append(ContactIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteIntoRoom_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public inviteIntoRoom_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteIntoRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteIntoRoom_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteViaEmail_args : TBase
    {
      private int _reqSeq;
      private string _email;
      private string _name;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool email;
        public bool name;
      }

      public inviteViaEmail_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteViaEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteViaEmail_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Email: ");
        sb.Append(Email);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class inviteViaEmail_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public inviteViaEmail_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("inviteViaEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("inviteViaEmail_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isIdentityIdentifierAvailable_args : TBase
    {
      private IdentityProvider _provider;
      private string _identifier;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool provider;
        public bool identifier;
      }

      public isIdentityIdentifierAvailable_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isIdentityIdentifierAvailable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isIdentityIdentifierAvailable_args(");
        sb.Append("Provider: ");
        sb.Append(Provider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isIdentityIdentifierAvailable_result : TBase
    {
      private bool _success;
      private TalkException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public isIdentityIdentifierAvailable_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isIdentityIdentifierAvailable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isIdentityIdentifierAvailable_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isUseridAvailable_args : TBase
    {
      private string _userid;

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userid;
      }

      public isUseridAvailable_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isUseridAvailable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isUseridAvailable_args(");
        sb.Append("Userid: ");
        sb.Append(Userid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isUseridAvailable_result : TBase
    {
      private bool _success;
      private TalkException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public isUseridAvailable_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isUseridAvailable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isUseridAvailable_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class kickoutFromGroup_args : TBase
    {
      private int _reqSeq;
      private string _groupId;
      private List<string> _contactIds;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }

      public List<string> ContactIds
      {
        get
        {
          return _contactIds;
        }
        set
        {
          __isset.contactIds = true;
          this._contactIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool groupId;
        public bool contactIds;
      }

      public kickoutFromGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list338 = iprot.ReadListBegin();
                  for( int _i339 = 0; _i339 < _list338.Count; ++_i339)
                  {
                    string _elem340 = null;
                    _elem340 = iprot.ReadString();
                    ContactIds.Add(_elem340);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("kickoutFromGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter341 in ContactIds)
            {
              oprot.WriteString(_iter341);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("kickoutFromGroup_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",GroupId: ");
        sb.Append(GroupId);
        sb.Append(",ContactIds: ");
        sb.Append(ContactIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class kickoutFromGroup_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public kickoutFromGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("kickoutFromGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("kickoutFromGroup_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leaveGroup_args : TBase
    {
      private int _reqSeq;
      private string _groupId;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool groupId;
      }

      public leaveGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaveGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leaveGroup_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",GroupId: ");
        sb.Append(GroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leaveGroup_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public leaveGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaveGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leaveGroup_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leaveRoom_args : TBase
    {
      private int _reqSeq;
      private string _roomId;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string RoomId
      {
        get
        {
          return _roomId;
        }
        set
        {
          __isset.roomId = true;
          this._roomId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool roomId;
      }

      public leaveRoom_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaveRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leaveRoom_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",RoomId: ");
        sb.Append(RoomId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class leaveRoom_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public leaveRoom_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("leaveRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("leaveRoom_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithIdentityCredential_args : TBase
    {
      private IdentityProvider _identityProvider;
      private string _identifier;
      private string _password;
      private bool _keepLoggedIn;
      private string _accessLocation;
      private string _systemName;
      private string _certificate;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider IdentityProvider
      {
        get
        {
          return _identityProvider;
        }
        set
        {
          __isset.identityProvider = true;
          this._identityProvider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public bool KeepLoggedIn
      {
        get
        {
          return _keepLoggedIn;
        }
        set
        {
          __isset.keepLoggedIn = true;
          this._keepLoggedIn = value;
        }
      }

      public string AccessLocation
      {
        get
        {
          return _accessLocation;
        }
        set
        {
          __isset.accessLocation = true;
          this._accessLocation = value;
        }
      }

      public string SystemName
      {
        get
        {
          return _systemName;
        }
        set
        {
          __isset.systemName = true;
          this._systemName = value;
        }
      }

      public string Certificate
      {
        get
        {
          return _certificate;
        }
        set
        {
          __isset.certificate = true;
          this._certificate = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool identityProvider;
        public bool identifier;
        public bool password;
        public bool keepLoggedIn;
        public bool accessLocation;
        public bool systemName;
        public bool certificate;
      }

      public loginWithIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 8:
              if (field.Type == TType.I32) {
                IdentityProvider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                KeepLoggedIn = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                AccessLocation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                SystemName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Certificate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (__isset.keepLoggedIn) {
          field.Name = "keepLoggedIn";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(KeepLoggedIn);
          oprot.WriteFieldEnd();
        }
        if (AccessLocation != null && __isset.accessLocation) {
          field.Name = "accessLocation";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessLocation);
          oprot.WriteFieldEnd();
        }
        if (SystemName != null && __isset.systemName) {
          field.Name = "systemName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SystemName);
          oprot.WriteFieldEnd();
        }
        if (__isset.identityProvider) {
          field.Name = "identityProvider";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)IdentityProvider);
          oprot.WriteFieldEnd();
        }
        if (Certificate != null && __isset.certificate) {
          field.Name = "certificate";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Certificate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithIdentityCredential_args(");
        sb.Append("IdentityProvider: ");
        sb.Append(IdentityProvider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(",Password: ");
        sb.Append(Password);
        sb.Append(",KeepLoggedIn: ");
        sb.Append(KeepLoggedIn);
        sb.Append(",AccessLocation: ");
        sb.Append(AccessLocation);
        sb.Append(",SystemName: ");
        sb.Append(SystemName);
        sb.Append(",Certificate: ");
        sb.Append(Certificate);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithIdentityCredential_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public loginWithIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithIdentityCredential_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithIdentityCredentialForCertificate_args : TBase
    {
      private IdentityProvider _identityProvider;
      private string _identifier;
      private string _password;
      private bool _keepLoggedIn;
      private string _accessLocation;
      private string _systemName;
      private string _certificate;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider IdentityProvider
      {
        get
        {
          return _identityProvider;
        }
        set
        {
          __isset.identityProvider = true;
          this._identityProvider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public bool KeepLoggedIn
      {
        get
        {
          return _keepLoggedIn;
        }
        set
        {
          __isset.keepLoggedIn = true;
          this._keepLoggedIn = value;
        }
      }

      public string AccessLocation
      {
        get
        {
          return _accessLocation;
        }
        set
        {
          __isset.accessLocation = true;
          this._accessLocation = value;
        }
      }

      public string SystemName
      {
        get
        {
          return _systemName;
        }
        set
        {
          __isset.systemName = true;
          this._systemName = value;
        }
      }

      public string Certificate
      {
        get
        {
          return _certificate;
        }
        set
        {
          __isset.certificate = true;
          this._certificate = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool identityProvider;
        public bool identifier;
        public bool password;
        public bool keepLoggedIn;
        public bool accessLocation;
        public bool systemName;
        public bool certificate;
      }

      public loginWithIdentityCredentialForCertificate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 8:
              if (field.Type == TType.I32) {
                IdentityProvider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                KeepLoggedIn = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                AccessLocation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                SystemName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Certificate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithIdentityCredentialForCertificate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (__isset.keepLoggedIn) {
          field.Name = "keepLoggedIn";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(KeepLoggedIn);
          oprot.WriteFieldEnd();
        }
        if (AccessLocation != null && __isset.accessLocation) {
          field.Name = "accessLocation";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessLocation);
          oprot.WriteFieldEnd();
        }
        if (SystemName != null && __isset.systemName) {
          field.Name = "systemName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SystemName);
          oprot.WriteFieldEnd();
        }
        if (__isset.identityProvider) {
          field.Name = "identityProvider";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)IdentityProvider);
          oprot.WriteFieldEnd();
        }
        if (Certificate != null && __isset.certificate) {
          field.Name = "certificate";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Certificate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithIdentityCredentialForCertificate_args(");
        sb.Append("IdentityProvider: ");
        sb.Append(IdentityProvider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(",Password: ");
        sb.Append(Password);
        sb.Append(",KeepLoggedIn: ");
        sb.Append(KeepLoggedIn);
        sb.Append(",AccessLocation: ");
        sb.Append(AccessLocation);
        sb.Append(",SystemName: ");
        sb.Append(SystemName);
        sb.Append(",Certificate: ");
        sb.Append(Certificate);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithIdentityCredentialForCertificate_result : TBase
    {
      private LoginResult _success;
      private TalkException _e;

      public LoginResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public loginWithIdentityCredentialForCertificate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithIdentityCredentialForCertificate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithIdentityCredentialForCertificate_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithVerifier_args : TBase
    {
      private string _verifier;

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool verifier;
      }

      public loginWithVerifier_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithVerifier_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithVerifier_args(");
        sb.Append("Verifier: ");
        sb.Append(Verifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithVerifier_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public loginWithVerifier_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithVerifier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithVerifier_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithVerifierForCerificate_args : TBase
    {
      private string _verifier;

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool verifier;
      }

      public loginWithVerifierForCerificate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithVerifierForCerificate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithVerifierForCerificate_args(");
        sb.Append("Verifier: ");
        sb.Append(Verifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithVerifierForCerificate_result : TBase
    {
      private LoginResult _success;
      private TalkException _e;

      public LoginResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public loginWithVerifierForCerificate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithVerifierForCerificate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithVerifierForCerificate_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithVerifierForCertificate_args : TBase
    {
      private string _verifier;

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool verifier;
      }

      public loginWithVerifierForCertificate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithVerifierForCertificate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithVerifierForCertificate_args(");
        sb.Append("Verifier: ");
        sb.Append(Verifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginWithVerifierForCertificate_result : TBase
    {
      private LoginResult _success;
      private TalkException _e;

      public LoginResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public loginWithVerifierForCertificate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loginWithVerifierForCertificate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loginWithVerifierForCertificate_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_args : TBase
    {

      public logout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logout_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public logout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logout_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logoutSession_args : TBase
    {
      private string _tokenKey;

      public string TokenKey
      {
        get
        {
          return _tokenKey;
        }
        set
        {
          __isset.tokenKey = true;
          this._tokenKey = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool tokenKey;
      }

      public logoutSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                TokenKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logoutSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TokenKey != null && __isset.tokenKey) {
          field.Name = "tokenKey";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TokenKey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logoutSession_args(");
        sb.Append("TokenKey: ");
        sb.Append(TokenKey);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logoutSession_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public logoutSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logoutSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logoutSession_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class noop_args : TBase
    {

      public noop_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("noop_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("noop_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class noop_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public noop_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("noop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("noop_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifiedRedirect_args : TBase
    {
      private Dictionary<string, string> _paramMap;

      public Dictionary<string, string> ParamMap
      {
        get
        {
          return _paramMap;
        }
        set
        {
          __isset.paramMap = true;
          this._paramMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramMap;
      }

      public notifiedRedirect_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Map) {
                {
                  ParamMap = new Dictionary<string, string>();
                  TMap _map342 = iprot.ReadMapBegin();
                  for( int _i343 = 0; _i343 < _map342.Count; ++_i343)
                  {
                    string _key344;
                    string _val345;
                    _key344 = iprot.ReadString();
                    _val345 = iprot.ReadString();
                    ParamMap[_key344] = _val345;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifiedRedirect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamMap != null && __isset.paramMap) {
          field.Name = "paramMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamMap.Count));
            foreach (string _iter346 in ParamMap.Keys)
            {
              oprot.WriteString(_iter346);
              oprot.WriteString(ParamMap[_iter346]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifiedRedirect_args(");
        sb.Append("ParamMap: ");
        sb.Append(ParamMap);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifiedRedirect_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public notifiedRedirect_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifiedRedirect_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifiedRedirect_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyBuddyOnAir_args : TBase
    {
      private int _seq;
      private List<string> _receiverMids;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public List<string> ReceiverMids
      {
        get
        {
          return _receiverMids;
        }
        set
        {
          __isset.receiverMids = true;
          this._receiverMids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool receiverMids;
      }

      public notifyBuddyOnAir_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list347 = iprot.ReadListBegin();
                  for( int _i348 = 0; _i348 < _list347.Count; ++_i348)
                  {
                    string _elem349 = null;
                    _elem349 = iprot.ReadString();
                    ReceiverMids.Add(_elem349);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyBuddyOnAir_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter350 in ReceiverMids)
            {
              oprot.WriteString(_iter350);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyBuddyOnAir_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",ReceiverMids: ");
        sb.Append(ReceiverMids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyBuddyOnAir_result : TBase
    {
      private Dictionary<string, string> _success;
      private TalkException _e;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public notifyBuddyOnAir_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map351 = iprot.ReadMapBegin();
                  for( int _i352 = 0; _i352 < _map351.Count; ++_i352)
                  {
                    string _key353;
                    string _val354;
                    _key353 = iprot.ReadString();
                    _val354 = iprot.ReadString();
                    Success[_key353] = _val354;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyBuddyOnAir_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter355 in Success.Keys)
              {
                oprot.WriteString(_iter355);
                oprot.WriteString(Success[_iter355]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyBuddyOnAir_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyIndividualEvent_args : TBase
    {
      private NotificationStatus _notificationStatus;
      private List<string> _receiverMids;

      /// <summary>
      /// 
      /// <seealso cref="NotificationStatus"/>
      /// </summary>
      public NotificationStatus NotificationStatus
      {
        get
        {
          return _notificationStatus;
        }
        set
        {
          __isset.notificationStatus = true;
          this._notificationStatus = value;
        }
      }

      public List<string> ReceiverMids
      {
        get
        {
          return _receiverMids;
        }
        set
        {
          __isset.receiverMids = true;
          this._receiverMids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool notificationStatus;
        public bool receiverMids;
      }

      public notifyIndividualEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                NotificationStatus = (NotificationStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list356 = iprot.ReadListBegin();
                  for( int _i357 = 0; _i357 < _list356.Count; ++_i357)
                  {
                    string _elem358 = null;
                    _elem358 = iprot.ReadString();
                    ReceiverMids.Add(_elem358);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyIndividualEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.notificationStatus) {
          field.Name = "notificationStatus";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)NotificationStatus);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter359 in ReceiverMids)
            {
              oprot.WriteString(_iter359);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyIndividualEvent_args(");
        sb.Append("NotificationStatus: ");
        sb.Append(NotificationStatus);
        sb.Append(",ReceiverMids: ");
        sb.Append(ReceiverMids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyIndividualEvent_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public notifyIndividualEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyIndividualEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyIndividualEvent_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyInstalled_args : TBase
    {
      private string _udidHash;
      private string _applicationTypeWithExtensions;

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public string ApplicationTypeWithExtensions
      {
        get
        {
          return _applicationTypeWithExtensions;
        }
        set
        {
          __isset.applicationTypeWithExtensions = true;
          this._applicationTypeWithExtensions = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool udidHash;
        public bool applicationTypeWithExtensions;
      }

      public notifyInstalled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ApplicationTypeWithExtensions = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyInstalled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (ApplicationTypeWithExtensions != null && __isset.applicationTypeWithExtensions) {
          field.Name = "applicationTypeWithExtensions";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplicationTypeWithExtensions);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyInstalled_args(");
        sb.Append("UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",ApplicationTypeWithExtensions: ");
        sb.Append(ApplicationTypeWithExtensions);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyInstalled_result : TBase
    {

      public notifyInstalled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyInstalled_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyInstalled_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyRegistrationComplete_args : TBase
    {
      private string _udidHash;
      private string _applicationTypeWithExtensions;

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public string ApplicationTypeWithExtensions
      {
        get
        {
          return _applicationTypeWithExtensions;
        }
        set
        {
          __isset.applicationTypeWithExtensions = true;
          this._applicationTypeWithExtensions = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool udidHash;
        public bool applicationTypeWithExtensions;
      }

      public notifyRegistrationComplete_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ApplicationTypeWithExtensions = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyRegistrationComplete_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (ApplicationTypeWithExtensions != null && __isset.applicationTypeWithExtensions) {
          field.Name = "applicationTypeWithExtensions";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplicationTypeWithExtensions);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyRegistrationComplete_args(");
        sb.Append("UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",ApplicationTypeWithExtensions: ");
        sb.Append(ApplicationTypeWithExtensions);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyRegistrationComplete_result : TBase
    {

      public notifyRegistrationComplete_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyRegistrationComplete_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyRegistrationComplete_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifySleep_args : TBase
    {
      private long _lastRev;
      private int _badge;

      public long LastRev
      {
        get
        {
          return _lastRev;
        }
        set
        {
          __isset.lastRev = true;
          this._lastRev = value;
        }
      }

      public int Badge
      {
        get
        {
          return _badge;
        }
        set
        {
          __isset.badge = true;
          this._badge = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lastRev;
        public bool badge;
      }

      public notifySleep_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Badge = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifySleep_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastRev) {
          field.Name = "lastRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.badge) {
          field.Name = "badge";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Badge);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifySleep_args(");
        sb.Append("LastRev: ");
        sb.Append(LastRev);
        sb.Append(",Badge: ");
        sb.Append(Badge);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifySleep_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public notifySleep_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifySleep_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifySleep_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyUpdated_args : TBase
    {
      private long _lastRev;
      private DeviceInfo _deviceInfo;

      public long LastRev
      {
        get
        {
          return _lastRev;
        }
        set
        {
          __isset.lastRev = true;
          this._lastRev = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool lastRev;
        public bool deviceInfo;
      }

      public notifyUpdated_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyUpdated_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastRev) {
          field.Name = "lastRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastRev);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyUpdated_args(");
        sb.Append("LastRev: ");
        sb.Append(LastRev);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyUpdated_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public notifyUpdated_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyUpdated_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyUpdated_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class openProximityMatch_args : TBase
    {
      private Location _location;

      public Location Location
      {
        get
        {
          return _location;
        }
        set
        {
          __isset.location = true;
          this._location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool location;
      }

      public openProximityMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Location = new Location();
                Location.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("openProximityMatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Location.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("openProximityMatch_args(");
        sb.Append("Location: ");
        sb.Append(Location== null ? "<null>" : Location.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class openProximityMatch_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public openProximityMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("openProximityMatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("openProximityMatch_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerBuddyUser_args : TBase
    {
      private string _buddyId;
      private string _registrarPassword;

      public string BuddyId
      {
        get
        {
          return _buddyId;
        }
        set
        {
          __isset.buddyId = true;
          this._buddyId = value;
        }
      }

      public string RegistrarPassword
      {
        get
        {
          return _registrarPassword;
        }
        set
        {
          __isset.registrarPassword = true;
          this._registrarPassword = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool buddyId;
        public bool registrarPassword;
      }

      public registerBuddyUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                BuddyId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RegistrarPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerBuddyUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BuddyId != null && __isset.buddyId) {
          field.Name = "buddyId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BuddyId);
          oprot.WriteFieldEnd();
        }
        if (RegistrarPassword != null && __isset.registrarPassword) {
          field.Name = "registrarPassword";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegistrarPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerBuddyUser_args(");
        sb.Append("BuddyId: ");
        sb.Append(BuddyId);
        sb.Append(",RegistrarPassword: ");
        sb.Append(RegistrarPassword);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerBuddyUser_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerBuddyUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerBuddyUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerBuddyUser_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerBuddyUserid_args : TBase
    {
      private int _seq;
      private string _userid;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool userid;
      }

      public registerBuddyUserid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerBuddyUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerBuddyUserid_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Userid: ");
        sb.Append(Userid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerBuddyUserid_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public registerBuddyUserid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerBuddyUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerBuddyUserid_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDevice_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public registerDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDevice_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDevice_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDeviceWithIdentityCredential_args : TBase
    {
      private string _sessionId;
      private IdentityProvider _provider;
      private string _identifier;
      private string _verifier;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool provider;
        public bool identifier;
        public bool verifier;
      }

      public registerDeviceWithIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDeviceWithIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDeviceWithIdentityCredential_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(",Provider: ");
        sb.Append(Provider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(",Verifier: ");
        sb.Append(Verifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDeviceWithIdentityCredential_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerDeviceWithIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDeviceWithIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDeviceWithIdentityCredential_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDeviceWithoutPhoneNumber_args : TBase
    {
      private string _region;
      private string _udidHash;
      private DeviceInfo _deviceInfo;

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool region;
        public bool udidHash;
        public bool deviceInfo;
      }

      public registerDeviceWithoutPhoneNumber_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDeviceWithoutPhoneNumber_args(");
        sb.Append("Region: ");
        sb.Append(Region);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDeviceWithoutPhoneNumber_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerDeviceWithoutPhoneNumber_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDeviceWithoutPhoneNumber_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDeviceWithoutPhoneNumberWithIdentityCredential_args : TBase
    {
      private string _region;
      private string _udidHash;
      private DeviceInfo _deviceInfo;
      private IdentityProvider _provider;
      private string _identifier;
      private string _verifier;
      private string _mid;

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool region;
        public bool udidHash;
        public bool deviceInfo;
        public bool provider;
        public bool identifier;
        public bool verifier;
        public bool mid;
      }

      public registerDeviceWithoutPhoneNumberWithIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumberWithIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDeviceWithoutPhoneNumberWithIdentityCredential_args(");
        sb.Append("Region: ");
        sb.Append(Region);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(",Provider: ");
        sb.Append(Provider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(",Verifier: ");
        sb.Append(Verifier);
        sb.Append(",Mid: ");
        sb.Append(Mid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerDeviceWithoutPhoneNumberWithIdentityCredential_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerDeviceWithoutPhoneNumberWithIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumberWithIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerDeviceWithoutPhoneNumberWithIdentityCredential_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerUserid_args : TBase
    {
      private int _reqSeq;
      private string _userid;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool userid;
      }

      public registerUserid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerUserid_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Userid: ");
        sb.Append(Userid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerUserid_result : TBase
    {
      private bool _success;
      private TalkException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerUserid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerUserid_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWapDevice_args : TBase
    {
      private string _invitationHash;
      private string _guidHash;
      private string _email;
      private DeviceInfo _deviceInfo;

      public string InvitationHash
      {
        get
        {
          return _invitationHash;
        }
        set
        {
          __isset.invitationHash = true;
          this._invitationHash = value;
        }
      }

      public string GuidHash
      {
        get
        {
          return _guidHash;
        }
        set
        {
          __isset.guidHash = true;
          this._guidHash = value;
        }
      }

      public string Email
      {
        get
        {
          return _email;
        }
        set
        {
          __isset.email = true;
          this._email = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool invitationHash;
        public bool guidHash;
        public bool email;
        public bool deviceInfo;
      }

      public registerWapDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                InvitationHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GuidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWapDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InvitationHash != null && __isset.invitationHash) {
          field.Name = "invitationHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvitationHash);
          oprot.WriteFieldEnd();
        }
        if (GuidHash != null && __isset.guidHash) {
          field.Name = "guidHash";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GuidHash);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWapDevice_args(");
        sb.Append("InvitationHash: ");
        sb.Append(InvitationHash);
        sb.Append(",GuidHash: ");
        sb.Append(GuidHash);
        sb.Append(",Email: ");
        sb.Append(Email);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWapDevice_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerWapDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWapDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWapDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWithExistingSnsIdAndIdentityCredential_args : TBase
    {
      private IdentityCredential _identityCredential;
      private string _region;
      private string _udidHash;
      private DeviceInfo _deviceInfo;

      public IdentityCredential IdentityCredential
      {
        get
        {
          return _identityCredential;
        }
        set
        {
          __isset.identityCredential = true;
          this._identityCredential = value;
        }
      }

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool identityCredential;
        public bool region;
        public bool udidHash;
        public bool deviceInfo;
      }

      public registerWithExistingSnsIdAndIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                IdentityCredential = new IdentityCredential();
                IdentityCredential.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWithExistingSnsIdAndIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdentityCredential != null && __isset.identityCredential) {
          field.Name = "identityCredential";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          IdentityCredential.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWithExistingSnsIdAndIdentityCredential_args(");
        sb.Append("IdentityCredential: ");
        sb.Append(IdentityCredential== null ? "<null>" : IdentityCredential.ToString());
        sb.Append(",Region: ");
        sb.Append(Region);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWithExistingSnsIdAndIdentityCredential_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerWithExistingSnsIdAndIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWithExistingSnsIdAndIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWithExistingSnsIdAndIdentityCredential_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWithSnsId_args : TBase
    {
      private SnsIdType _snsIdType;
      private string _snsAccessToken;
      private string _region;
      private string _udidHash;
      private DeviceInfo _deviceInfo;
      private string _mid;

      /// <summary>
      /// 
      /// <seealso cref="SnsIdType"/>
      /// </summary>
      public SnsIdType SnsIdType
      {
        get
        {
          return _snsIdType;
        }
        set
        {
          __isset.snsIdType = true;
          this._snsIdType = value;
        }
      }

      public string SnsAccessToken
      {
        get
        {
          return _snsAccessToken;
        }
        set
        {
          __isset.snsAccessToken = true;
          this._snsAccessToken = value;
        }
      }

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snsIdType;
        public bool snsAccessToken;
        public bool region;
        public bool udidHash;
        public bool deviceInfo;
        public bool mid;
      }

      public registerWithSnsId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWithSnsId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWithSnsId_args(");
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
        sb.Append(",SnsAccessToken: ");
        sb.Append(SnsAccessToken);
        sb.Append(",Region: ");
        sb.Append(Region);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(",Mid: ");
        sb.Append(Mid);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWithSnsId_result : TBase
    {
      private RegisterWithSnsIdResult _success;
      private TalkException _e;

      public RegisterWithSnsIdResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerWithSnsId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RegisterWithSnsIdResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWithSnsId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWithSnsId_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWithSnsIdAndIdentityCredential_args : TBase
    {
      private SnsIdType _snsIdType;
      private string _snsAccessToken;
      private IdentityCredential _identityCredential;
      private string _region;
      private string _udidHash;
      private DeviceInfo _deviceInfo;

      /// <summary>
      /// 
      /// <seealso cref="SnsIdType"/>
      /// </summary>
      public SnsIdType SnsIdType
      {
        get
        {
          return _snsIdType;
        }
        set
        {
          __isset.snsIdType = true;
          this._snsIdType = value;
        }
      }

      public string SnsAccessToken
      {
        get
        {
          return _snsAccessToken;
        }
        set
        {
          __isset.snsAccessToken = true;
          this._snsAccessToken = value;
        }
      }

      public IdentityCredential IdentityCredential
      {
        get
        {
          return _identityCredential;
        }
        set
        {
          __isset.identityCredential = true;
          this._identityCredential = value;
        }
      }

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snsIdType;
        public bool snsAccessToken;
        public bool identityCredential;
        public bool region;
        public bool udidHash;
        public bool deviceInfo;
      }

      public registerWithSnsIdAndIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                IdentityCredential = new IdentityCredential();
                IdentityCredential.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWithSnsIdAndIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (IdentityCredential != null && __isset.identityCredential) {
          field.Name = "identityCredential";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          IdentityCredential.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWithSnsIdAndIdentityCredential_args(");
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
        sb.Append(",SnsAccessToken: ");
        sb.Append(SnsAccessToken);
        sb.Append(",IdentityCredential: ");
        sb.Append(IdentityCredential== null ? "<null>" : IdentityCredential.ToString());
        sb.Append(",Region: ");
        sb.Append(Region);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registerWithSnsIdAndIdentityCredential_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public registerWithSnsIdAndIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("registerWithSnsIdAndIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("registerWithSnsIdAndIdentityCredential_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reissueDeviceCredential_args : TBase
    {

      public reissueDeviceCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reissueDeviceCredential_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reissueDeviceCredential_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reissueDeviceCredential_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public reissueDeviceCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reissueDeviceCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reissueDeviceCredential_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reissueUserTicket_args : TBase
    {
      private long _expirationTime;
      private int _maxUseCount;

      public long ExpirationTime
      {
        get
        {
          return _expirationTime;
        }
        set
        {
          __isset.expirationTime = true;
          this._expirationTime = value;
        }
      }

      public int MaxUseCount
      {
        get
        {
          return _maxUseCount;
        }
        set
        {
          __isset.maxUseCount = true;
          this._maxUseCount = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool expirationTime;
        public bool maxUseCount;
      }

      public reissueUserTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I64) {
                ExpirationTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MaxUseCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reissueUserTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.expirationTime) {
          field.Name = "expirationTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ExpirationTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxUseCount) {
          field.Name = "maxUseCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxUseCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reissueUserTicket_args(");
        sb.Append("ExpirationTime: ");
        sb.Append(ExpirationTime);
        sb.Append(",MaxUseCount: ");
        sb.Append(MaxUseCount);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reissueUserTicket_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public reissueUserTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reissueUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reissueUserTicket_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rejectGroupInvitation_args : TBase
    {
      private int _reqSeq;
      private string _groupId;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string GroupId
      {
        get
        {
          return _groupId;
        }
        set
        {
          __isset.groupId = true;
          this._groupId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool groupId;
      }

      public rejectGroupInvitation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rejectGroupInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rejectGroupInvitation_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",GroupId: ");
        sb.Append(GroupId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rejectGroupInvitation_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public rejectGroupInvitation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rejectGroupInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rejectGroupInvitation_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseSession_args : TBase
    {

      public releaseSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseSession_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseSession_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class releaseSession_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public releaseSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("releaseSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("releaseSession_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeAllMessages_args : TBase
    {
      private int _seq;
      private string _lastMessageId;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string LastMessageId
      {
        get
        {
          return _lastMessageId;
        }
        set
        {
          __isset.lastMessageId = true;
          this._lastMessageId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool lastMessageId;
      }

      public removeAllMessages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                LastMessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeAllMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (LastMessageId != null && __isset.lastMessageId) {
          field.Name = "lastMessageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastMessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeAllMessages_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",LastMessageId: ");
        sb.Append(LastMessageId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeAllMessages_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public removeAllMessages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeAllMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeAllMessages_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeBuddyLocation_args : TBase
    {
      private string _mid;
      private int _index;

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mid;
        public bool index;
      }

      public removeBuddyLocation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeBuddyLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeBuddyLocation_args(");
        sb.Append("Mid: ");
        sb.Append(Mid);
        sb.Append(",Index: ");
        sb.Append(Index);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeBuddyLocation_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public removeBuddyLocation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeBuddyLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeBuddyLocation_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeMessage_args : TBase
    {
      private string _messageId;

      public string MessageId
      {
        get
        {
          return _messageId;
        }
        set
        {
          __isset.messageId = true;
          this._messageId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool messageId;
      }

      public removeMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeMessage_args(");
        sb.Append("MessageId: ");
        sb.Append(MessageId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeMessage_result : TBase
    {
      private bool _success;
      private TalkException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public removeMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeMessage_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeMessageFromMyHome_args : TBase
    {
      private string _messageId;

      public string MessageId
      {
        get
        {
          return _messageId;
        }
        set
        {
          __isset.messageId = true;
          this._messageId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool messageId;
      }

      public removeMessageFromMyHome_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeMessageFromMyHome_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeMessageFromMyHome_args(");
        sb.Append("MessageId: ");
        sb.Append(MessageId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeMessageFromMyHome_result : TBase
    {
      private bool _success;
      private TalkException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public removeMessageFromMyHome_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeMessageFromMyHome_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeMessageFromMyHome_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeSnsId_args : TBase
    {
      private SnsIdType _snsIdType;

      /// <summary>
      /// 
      /// <seealso cref="SnsIdType"/>
      /// </summary>
      public SnsIdType SnsIdType
      {
        get
        {
          return _snsIdType;
        }
        set
        {
          __isset.snsIdType = true;
          this._snsIdType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool snsIdType;
      }

      public removeSnsId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeSnsId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeSnsId_args(");
        sb.Append("SnsIdType: ");
        sb.Append(SnsIdType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeSnsId_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public removeSnsId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeSnsId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeSnsId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class report_args : TBase
    {
      private long _syncOpRevision;
      private SyncCategory _category;
      private string _report;

      public long SyncOpRevision
      {
        get
        {
          return _syncOpRevision;
        }
        set
        {
          __isset.syncOpRevision = true;
          this._syncOpRevision = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="SyncCategory"/>
      /// </summary>
      public SyncCategory Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public string Report
      {
        get
        {
          return _report;
        }
        set
        {
          __isset.report = true;
          this._report = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool syncOpRevision;
        public bool category;
        public bool report;
      }

      public report_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Category = (SyncCategory)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Report = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("report_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (__isset.category) {
          field.Name = "category";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Category);
          oprot.WriteFieldEnd();
        }
        if (Report != null && __isset.report) {
          field.Name = "report";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Report);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("report_args(");
        sb.Append("SyncOpRevision: ");
        sb.Append(SyncOpRevision);
        sb.Append(",Category: ");
        sb.Append(Category);
        sb.Append(",Report: ");
        sb.Append(Report);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class report_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public report_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("report_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("report_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportContacts_args : TBase
    {
      private long _syncOpRevision;
      private SyncCategory _category;
      private List<ContactReport> _contactReports;
      private SyncActionType _actionType;

      public long SyncOpRevision
      {
        get
        {
          return _syncOpRevision;
        }
        set
        {
          __isset.syncOpRevision = true;
          this._syncOpRevision = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="SyncCategory"/>
      /// </summary>
      public SyncCategory Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public List<ContactReport> ContactReports
      {
        get
        {
          return _contactReports;
        }
        set
        {
          __isset.contactReports = true;
          this._contactReports = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="SyncActionType"/>
      /// </summary>
      public SyncActionType ActionType
      {
        get
        {
          return _actionType;
        }
        set
        {
          __isset.actionType = true;
          this._actionType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool syncOpRevision;
        public bool category;
        public bool contactReports;
        public bool actionType;
      }

      public reportContacts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Category = (SyncCategory)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  ContactReports = new List<ContactReport>();
                  TList _list360 = iprot.ReadListBegin();
                  for( int _i361 = 0; _i361 < _list360.Count; ++_i361)
                  {
                    ContactReport _elem362 = new ContactReport();
                    _elem362 = new ContactReport();
                    _elem362.Read(iprot);
                    ContactReports.Add(_elem362);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                ActionType = (SyncActionType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (__isset.category) {
          field.Name = "category";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Category);
          oprot.WriteFieldEnd();
        }
        if (ContactReports != null && __isset.contactReports) {
          field.Name = "contactReports";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ContactReports.Count));
            foreach (ContactReport _iter363 in ContactReports)
            {
              _iter363.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ActionType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportContacts_args(");
        sb.Append("SyncOpRevision: ");
        sb.Append(SyncOpRevision);
        sb.Append(",Category: ");
        sb.Append(Category);
        sb.Append(",ContactReports: ");
        sb.Append(ContactReports);
        sb.Append(",ActionType: ");
        sb.Append(ActionType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportContacts_result : TBase
    {
      private List<ContactReportResult> _success;
      private TalkException _e;

      public List<ContactReportResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public reportContacts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ContactReportResult>();
                  TList _list364 = iprot.ReadListBegin();
                  for( int _i365 = 0; _i365 < _list364.Count; ++_i365)
                  {
                    ContactReportResult _elem366 = new ContactReportResult();
                    _elem366 = new ContactReportResult();
                    _elem366.Read(iprot);
                    Success.Add(_elem366);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ContactReportResult _iter367 in Success)
              {
                _iter367.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportContacts_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportGroups_args : TBase
    {
      private long _syncOpRevision;
      private List<Group> _groups;

      public long SyncOpRevision
      {
        get
        {
          return _syncOpRevision;
        }
        set
        {
          __isset.syncOpRevision = true;
          this._syncOpRevision = value;
        }
      }

      public List<Group> Groups
      {
        get
        {
          return _groups;
        }
        set
        {
          __isset.groups = true;
          this._groups = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool syncOpRevision;
        public bool groups;
      }

      public reportGroups_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Groups = new List<Group>();
                  TList _list368 = iprot.ReadListBegin();
                  for( int _i369 = 0; _i369 < _list368.Count; ++_i369)
                  {
                    Group _elem370 = new Group();
                    _elem370 = new Group();
                    _elem370.Read(iprot);
                    Groups.Add(_elem370);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Groups != null && __isset.groups) {
          field.Name = "groups";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Groups.Count));
            foreach (Group _iter371 in Groups)
            {
              _iter371.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportGroups_args(");
        sb.Append("SyncOpRevision: ");
        sb.Append(SyncOpRevision);
        sb.Append(",Groups: ");
        sb.Append(Groups);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportGroups_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public reportGroups_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportGroups_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportProfile_args : TBase
    {
      private long _syncOpRevision;
      private Profile _profile;

      public long SyncOpRevision
      {
        get
        {
          return _syncOpRevision;
        }
        set
        {
          __isset.syncOpRevision = true;
          this._syncOpRevision = value;
        }
      }

      public Profile Profile
      {
        get
        {
          return _profile;
        }
        set
        {
          __isset.profile = true;
          this._profile = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool syncOpRevision;
        public bool profile;
      }

      public reportProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Profile = new Profile();
                Profile.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Profile != null && __isset.profile) {
          field.Name = "profile";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Profile.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportProfile_args(");
        sb.Append("SyncOpRevision: ");
        sb.Append(SyncOpRevision);
        sb.Append(",Profile: ");
        sb.Append(Profile== null ? "<null>" : Profile.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportProfile_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public reportProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportProfile_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportRooms_args : TBase
    {
      private long _syncOpRevision;
      private List<Room> _rooms;

      public long SyncOpRevision
      {
        get
        {
          return _syncOpRevision;
        }
        set
        {
          __isset.syncOpRevision = true;
          this._syncOpRevision = value;
        }
      }

      public List<Room> Rooms
      {
        get
        {
          return _rooms;
        }
        set
        {
          __isset.rooms = true;
          this._rooms = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool syncOpRevision;
        public bool rooms;
      }

      public reportRooms_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Rooms = new List<Room>();
                  TList _list372 = iprot.ReadListBegin();
                  for( int _i373 = 0; _i373 < _list372.Count; ++_i373)
                  {
                    Room _elem374 = new Room();
                    _elem374 = new Room();
                    _elem374.Read(iprot);
                    Rooms.Add(_elem374);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportRooms_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Rooms != null && __isset.rooms) {
          field.Name = "rooms";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Rooms.Count));
            foreach (Room _iter375 in Rooms)
            {
              _iter375.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportRooms_args(");
        sb.Append("SyncOpRevision: ");
        sb.Append(SyncOpRevision);
        sb.Append(",Rooms: ");
        sb.Append(Rooms);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportRooms_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public reportRooms_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportRooms_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportRooms_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportSettings_args : TBase
    {
      private long _syncOpRevision;
      private Settings _settings;

      public long SyncOpRevision
      {
        get
        {
          return _syncOpRevision;
        }
        set
        {
          __isset.syncOpRevision = true;
          this._syncOpRevision = value;
        }
      }

      public Settings Settings
      {
        get
        {
          return _settings;
        }
        set
        {
          __isset.settings = true;
          this._settings = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool syncOpRevision;
        public bool settings;
      }

      public reportSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportSettings_args(");
        sb.Append("SyncOpRevision: ");
        sb.Append(SyncOpRevision);
        sb.Append(",Settings: ");
        sb.Append(Settings== null ? "<null>" : Settings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportSettings_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public reportSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportSettings_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportSpammer_args : TBase
    {
      private string _spammerMid;
      private List<SpammerReason> _spammerReasons;
      private List<string> _spamMessageIds;

      public string SpammerMid
      {
        get
        {
          return _spammerMid;
        }
        set
        {
          __isset.spammerMid = true;
          this._spammerMid = value;
        }
      }

      public List<SpammerReason> SpammerReasons
      {
        get
        {
          return _spammerReasons;
        }
        set
        {
          __isset.spammerReasons = true;
          this._spammerReasons = value;
        }
      }

      public List<string> SpamMessageIds
      {
        get
        {
          return _spamMessageIds;
        }
        set
        {
          __isset.spamMessageIds = true;
          this._spamMessageIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool spammerMid;
        public bool spammerReasons;
        public bool spamMessageIds;
      }

      public reportSpammer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SpammerMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  SpammerReasons = new List<SpammerReason>();
                  TList _list376 = iprot.ReadListBegin();
                  for( int _i377 = 0; _i377 < _list376.Count; ++_i377)
                  {
                    SpammerReason _elem378 = (SpammerReason)0;
                    _elem378 = (SpammerReason)iprot.ReadI32();
                    SpammerReasons.Add(_elem378);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  SpamMessageIds = new List<string>();
                  TList _list379 = iprot.ReadListBegin();
                  for( int _i380 = 0; _i380 < _list379.Count; ++_i380)
                  {
                    string _elem381 = null;
                    _elem381 = iprot.ReadString();
                    SpamMessageIds.Add(_elem381);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportSpammer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SpammerMid != null && __isset.spammerMid) {
          field.Name = "spammerMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SpammerMid);
          oprot.WriteFieldEnd();
        }
        if (SpammerReasons != null && __isset.spammerReasons) {
          field.Name = "spammerReasons";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, SpammerReasons.Count));
            foreach (SpammerReason _iter382 in SpammerReasons)
            {
              oprot.WriteI32((int)_iter382);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SpamMessageIds != null && __isset.spamMessageIds) {
          field.Name = "spamMessageIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, SpamMessageIds.Count));
            foreach (string _iter383 in SpamMessageIds)
            {
              oprot.WriteString(_iter383);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportSpammer_args(");
        sb.Append("SpammerMid: ");
        sb.Append(SpammerMid);
        sb.Append(",SpammerReasons: ");
        sb.Append(SpammerReasons);
        sb.Append(",SpamMessageIds: ");
        sb.Append(SpamMessageIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reportSpammer_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public reportSpammer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reportSpammer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reportSpammer_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestAccountPasswordReset_args : TBase
    {
      private IdentityProvider _provider;
      private string _identifier;
      private string _locale;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool provider;
        public bool identifier;
        public bool locale;
      }

      public requestAccountPasswordReset_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestAccountPasswordReset_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestAccountPasswordReset_args(");
        sb.Append("Provider: ");
        sb.Append(Provider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestAccountPasswordReset_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public requestAccountPasswordReset_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestAccountPasswordReset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestAccountPasswordReset_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestEmailConfirmation_args : TBase
    {
      private EmailConfirmation _emailConfirmation;

      public EmailConfirmation EmailConfirmation
      {
        get
        {
          return _emailConfirmation;
        }
        set
        {
          __isset.emailConfirmation = true;
          this._emailConfirmation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool emailConfirmation;
      }

      public requestEmailConfirmation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                EmailConfirmation = new EmailConfirmation();
                EmailConfirmation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestEmailConfirmation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (EmailConfirmation != null && __isset.emailConfirmation) {
          field.Name = "emailConfirmation";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          EmailConfirmation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestEmailConfirmation_args(");
        sb.Append("EmailConfirmation: ");
        sb.Append(EmailConfirmation== null ? "<null>" : EmailConfirmation.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestEmailConfirmation_result : TBase
    {
      private EmailConfirmationSession _success;
      private TalkException _e;

      public EmailConfirmationSession Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public requestEmailConfirmation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new EmailConfirmationSession();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestEmailConfirmation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestEmailConfirmation_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestIdentityUnbind_args : TBase
    {
      private IdentityProvider _provider;
      private string _identifier;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool provider;
        public bool identifier;
      }

      public requestIdentityUnbind_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestIdentityUnbind_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestIdentityUnbind_args(");
        sb.Append("Provider: ");
        sb.Append(Provider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class requestIdentityUnbind_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public requestIdentityUnbind_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("requestIdentityUnbind_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("requestIdentityUnbind_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resendEmailConfirmation_args : TBase
    {
      private string _verifier;

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool verifier;
      }

      public resendEmailConfirmation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resendEmailConfirmation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resendEmailConfirmation_args(");
        sb.Append("Verifier: ");
        sb.Append(Verifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resendEmailConfirmation_result : TBase
    {
      private EmailConfirmationSession _success;
      private TalkException _e;

      public EmailConfirmationSession Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public resendEmailConfirmation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new EmailConfirmationSession();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resendEmailConfirmation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resendEmailConfirmation_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resendPinCode_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public resendPinCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resendPinCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resendPinCode_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resendPinCode_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public resendPinCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resendPinCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resendPinCode_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resendPinCodeBySMS_args : TBase
    {
      private string _sessionId;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
      }

      public resendPinCodeBySMS_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resendPinCodeBySMS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resendPinCodeBySMS_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resendPinCodeBySMS_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public resendPinCodeBySMS_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resendPinCodeBySMS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resendPinCodeBySMS_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendChatChecked_args : TBase
    {
      private int _seq;
      private string _consumer;
      private string _lastMessageId;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string Consumer
      {
        get
        {
          return _consumer;
        }
        set
        {
          __isset.consumer = true;
          this._consumer = value;
        }
      }

      public string LastMessageId
      {
        get
        {
          return _lastMessageId;
        }
        set
        {
          __isset.lastMessageId = true;
          this._lastMessageId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool consumer;
        public bool lastMessageId;
      }

      public sendChatChecked_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                LastMessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendChatChecked_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (LastMessageId != null && __isset.lastMessageId) {
          field.Name = "lastMessageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastMessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendChatChecked_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Consumer: ");
        sb.Append(Consumer);
        sb.Append(",LastMessageId: ");
        sb.Append(LastMessageId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendChatChecked_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public sendChatChecked_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendChatChecked_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendChatChecked_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendChatRemoved_args : TBase
    {
      private int _seq;
      private string _consumer;
      private string _lastMessageId;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string Consumer
      {
        get
        {
          return _consumer;
        }
        set
        {
          __isset.consumer = true;
          this._consumer = value;
        }
      }

      public string LastMessageId
      {
        get
        {
          return _lastMessageId;
        }
        set
        {
          __isset.lastMessageId = true;
          this._lastMessageId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool consumer;
        public bool lastMessageId;
      }

      public sendChatRemoved_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                LastMessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendChatRemoved_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (LastMessageId != null && __isset.lastMessageId) {
          field.Name = "lastMessageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastMessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendChatRemoved_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Consumer: ");
        sb.Append(Consumer);
        sb.Append(",LastMessageId: ");
        sb.Append(LastMessageId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendChatRemoved_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public sendChatRemoved_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendChatRemoved_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendChatRemoved_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendContentPreviewUpdated_args : TBase
    {
      private int _esq;
      private string _messageId;
      private List<string> _receiverMids;

      public int Esq
      {
        get
        {
          return _esq;
        }
        set
        {
          __isset.esq = true;
          this._esq = value;
        }
      }

      public string MessageId
      {
        get
        {
          return _messageId;
        }
        set
        {
          __isset.messageId = true;
          this._messageId = value;
        }
      }

      public List<string> ReceiverMids
      {
        get
        {
          return _receiverMids;
        }
        set
        {
          __isset.receiverMids = true;
          this._receiverMids = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool esq;
        public bool messageId;
        public bool receiverMids;
      }

      public sendContentPreviewUpdated_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Esq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list384 = iprot.ReadListBegin();
                  for( int _i385 = 0; _i385 < _list384.Count; ++_i385)
                  {
                    string _elem386 = null;
                    _elem386 = iprot.ReadString();
                    ReceiverMids.Add(_elem386);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendContentPreviewUpdated_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.esq) {
          field.Name = "esq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Esq);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter387 in ReceiverMids)
            {
              oprot.WriteString(_iter387);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendContentPreviewUpdated_args(");
        sb.Append("Esq: ");
        sb.Append(Esq);
        sb.Append(",MessageId: ");
        sb.Append(MessageId);
        sb.Append(",ReceiverMids: ");
        sb.Append(ReceiverMids);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendContentPreviewUpdated_result : TBase
    {
      private Dictionary<string, string> _success;
      private TalkException _e;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public sendContentPreviewUpdated_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map388 = iprot.ReadMapBegin();
                  for( int _i389 = 0; _i389 < _map388.Count; ++_i389)
                  {
                    string _key390;
                    string _val391;
                    _key390 = iprot.ReadString();
                    _val391 = iprot.ReadString();
                    Success[_key390] = _val391;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendContentPreviewUpdated_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter392 in Success.Keys)
              {
                oprot.WriteString(_iter392);
                oprot.WriteString(Success[_iter392]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendContentPreviewUpdated_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendContentReceipt_args : TBase
    {
      private int _seq;
      private string _consumer;
      private string _messageId;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string Consumer
      {
        get
        {
          return _consumer;
        }
        set
        {
          __isset.consumer = true;
          this._consumer = value;
        }
      }

      public string MessageId
      {
        get
        {
          return _messageId;
        }
        set
        {
          __isset.messageId = true;
          this._messageId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool consumer;
        public bool messageId;
      }

      public sendContentReceipt_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendContentReceipt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendContentReceipt_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Consumer: ");
        sb.Append(Consumer);
        sb.Append(",MessageId: ");
        sb.Append(MessageId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendContentReceipt_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public sendContentReceipt_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendContentReceipt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendContentReceipt_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendDummyPush_args : TBase
    {

      public sendDummyPush_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendDummyPush_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendDummyPush_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendDummyPush_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public sendDummyPush_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendDummyPush_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendDummyPush_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendEvent_args : TBase
    {
      private int _seq;
      private Message _message;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public Message Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool message;
      }

      public sendEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendEvent_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendEvent_result : TBase
    {
      private Message _success;
      private TalkException _e;

      public Message Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public sendEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendEvent_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessage_args : TBase
    {
      private int _seq;
      private Message _message;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public Message Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool message;
      }

      public sendMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessage_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessage_result : TBase
    {
      private Message _success;
      private TalkException _e;

      public Message Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public sendMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessageIgnored_args : TBase
    {
      private int _seq;
      private string _consumer;
      private List<string> _messageIds;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string Consumer
      {
        get
        {
          return _consumer;
        }
        set
        {
          __isset.consumer = true;
          this._consumer = value;
        }
      }

      public List<string> MessageIds
      {
        get
        {
          return _messageIds;
        }
        set
        {
          __isset.messageIds = true;
          this._messageIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool consumer;
        public bool messageIds;
      }

      public sendMessageIgnored_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MessageIds = new List<string>();
                  TList _list393 = iprot.ReadListBegin();
                  for( int _i394 = 0; _i394 < _list393.Count; ++_i394)
                  {
                    string _elem395 = null;
                    _elem395 = iprot.ReadString();
                    MessageIds.Add(_elem395);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessageIgnored_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (MessageIds != null && __isset.messageIds) {
          field.Name = "messageIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MessageIds.Count));
            foreach (string _iter396 in MessageIds)
            {
              oprot.WriteString(_iter396);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessageIgnored_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Consumer: ");
        sb.Append(Consumer);
        sb.Append(",MessageIds: ");
        sb.Append(MessageIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessageIgnored_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public sendMessageIgnored_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessageIgnored_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessageIgnored_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessageReceipt_args : TBase
    {
      private int _seq;
      private string _consumer;
      private List<string> _messageIds;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public string Consumer
      {
        get
        {
          return _consumer;
        }
        set
        {
          __isset.consumer = true;
          this._consumer = value;
        }
      }

      public List<string> MessageIds
      {
        get
        {
          return _messageIds;
        }
        set
        {
          __isset.messageIds = true;
          this._messageIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool consumer;
        public bool messageIds;
      }

      public sendMessageReceipt_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MessageIds = new List<string>();
                  TList _list397 = iprot.ReadListBegin();
                  for( int _i398 = 0; _i398 < _list397.Count; ++_i398)
                  {
                    string _elem399 = null;
                    _elem399 = iprot.ReadString();
                    MessageIds.Add(_elem399);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessageReceipt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (MessageIds != null && __isset.messageIds) {
          field.Name = "messageIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MessageIds.Count));
            foreach (string _iter400 in MessageIds)
            {
              oprot.WriteString(_iter400);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessageReceipt_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Consumer: ");
        sb.Append(Consumer);
        sb.Append(",MessageIds: ");
        sb.Append(MessageIds);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessageReceipt_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public sendMessageReceipt_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessageReceipt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessageReceipt_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessageToMyHome_args : TBase
    {
      private int _seq;
      private Message _message;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public Message Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool message;
      }

      public sendMessageToMyHome_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessageToMyHome_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessageToMyHome_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendMessageToMyHome_result : TBase
    {
      private Message _success;
      private TalkException _e;

      public Message Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public sendMessageToMyHome_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendMessageToMyHome_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendMessageToMyHome_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBuddyLocation_args : TBase
    {
      private string _mid;
      private int _index;
      private Geolocation _location;

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }

      public Geolocation Location
      {
        get
        {
          return _location;
        }
        set
        {
          __isset.location = true;
          this._location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mid;
        public bool index;
        public bool location;
      }

      public setBuddyLocation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Location = new Geolocation();
                Location.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBuddyLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Location.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setBuddyLocation_args(");
        sb.Append("Mid: ");
        sb.Append(Mid);
        sb.Append(",Index: ");
        sb.Append(Index);
        sb.Append(",Location: ");
        sb.Append(Location== null ? "<null>" : Location.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBuddyLocation_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public setBuddyLocation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBuddyLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setBuddyLocation_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setIdentityCredential_args : TBase
    {
      private IdentityProvider _provider;
      private string _identifier;
      private string _verifier;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider Provider
      {
        get
        {
          return _provider;
        }
        set
        {
          __isset.provider = true;
          this._provider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool provider;
        public bool identifier;
        public bool verifier;
      }

      public setIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setIdentityCredential_args(");
        sb.Append("Provider: ");
        sb.Append(Provider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(",Verifier: ");
        sb.Append(Verifier);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setIdentityCredential_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public setIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setIdentityCredential_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setNotificationsEnabled_args : TBase
    {
      private int _reqSeq;
      private MIDType _type;
      private string _target;
      private bool _enablement;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MIDType"/>
      /// </summary>
      public MIDType Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }

      public string Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }

      public bool Enablement
      {
        get
        {
          return _enablement;
        }
        set
        {
          __isset.enablement = true;
          this._enablement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool type;
        public bool target;
        public bool enablement;
      }

      public setNotificationsEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Type = (MIDType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Enablement = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setNotificationsEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Target);
          oprot.WriteFieldEnd();
        }
        if (__isset.enablement) {
          field.Name = "enablement";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Enablement);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setNotificationsEnabled_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Type: ");
        sb.Append(Type);
        sb.Append(",Target: ");
        sb.Append(Target);
        sb.Append(",Enablement: ");
        sb.Append(Enablement);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setNotificationsEnabled_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public setNotificationsEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setNotificationsEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setNotificationsEnabled_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startUpdateVerification_args : TBase
    {
      private string _region;
      private CarrierCode _carrier;
      private string _phone;
      private string _udidHash;
      private DeviceInfo _deviceInfo;
      private string _networkCode;
      private string _locale;

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="CarrierCode"/>
      /// </summary>
      public CarrierCode Carrier
      {
        get
        {
          return _carrier;
        }
        set
        {
          __isset.carrier = true;
          this._carrier = value;
        }
      }

      public string Phone
      {
        get
        {
          return _phone;
        }
        set
        {
          __isset.phone = true;
          this._phone = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }

      public string NetworkCode
      {
        get
        {
          return _networkCode;
        }
        set
        {
          __isset.networkCode = true;
          this._networkCode = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool region;
        public bool carrier;
        public bool phone;
        public bool udidHash;
        public bool deviceInfo;
        public bool networkCode;
        public bool locale;
      }

      public startUpdateVerification_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Phone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                NetworkCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startUpdateVerification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        if (Phone != null && __isset.phone) {
          field.Name = "phone";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Phone);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NetworkCode != null && __isset.networkCode) {
          field.Name = "networkCode";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NetworkCode);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startUpdateVerification_args(");
        sb.Append("Region: ");
        sb.Append(Region);
        sb.Append(",Carrier: ");
        sb.Append(Carrier);
        sb.Append(",Phone: ");
        sb.Append(Phone);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(",NetworkCode: ");
        sb.Append(NetworkCode);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startUpdateVerification_result : TBase
    {
      private VerificationSessionData _success;
      private TalkException _e;

      public VerificationSessionData Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public startUpdateVerification_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new VerificationSessionData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startUpdateVerification_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startUpdateVerification_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startVerification_args : TBase
    {
      private string _region;
      private CarrierCode _carrier;
      private string _phone;
      private string _udidHash;
      private DeviceInfo _deviceInfo;
      private string _networkCode;
      private string _mid;
      private string _locale;

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="CarrierCode"/>
      /// </summary>
      public CarrierCode Carrier
      {
        get
        {
          return _carrier;
        }
        set
        {
          __isset.carrier = true;
          this._carrier = value;
        }
      }

      public string Phone
      {
        get
        {
          return _phone;
        }
        set
        {
          __isset.phone = true;
          this._phone = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }

      public string NetworkCode
      {
        get
        {
          return _networkCode;
        }
        set
        {
          __isset.networkCode = true;
          this._networkCode = value;
        }
      }

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }

      public string Locale
      {
        get
        {
          return _locale;
        }
        set
        {
          __isset.locale = true;
          this._locale = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool region;
        public bool carrier;
        public bool phone;
        public bool udidHash;
        public bool deviceInfo;
        public bool networkCode;
        public bool mid;
        public bool locale;
      }

      public startVerification_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Phone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                NetworkCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startVerification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        if (Phone != null && __isset.phone) {
          field.Name = "phone";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Phone);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NetworkCode != null && __isset.networkCode) {
          field.Name = "networkCode";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NetworkCode);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startVerification_args(");
        sb.Append("Region: ");
        sb.Append(Region);
        sb.Append(",Carrier: ");
        sb.Append(Carrier);
        sb.Append(",Phone: ");
        sb.Append(Phone);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(",NetworkCode: ");
        sb.Append(NetworkCode);
        sb.Append(",Mid: ");
        sb.Append(Mid);
        sb.Append(",Locale: ");
        sb.Append(Locale);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startVerification_result : TBase
    {
      private VerificationSessionData _success;
      private TalkException _e;

      public VerificationSessionData Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public startVerification_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new VerificationSessionData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startVerification_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startVerification_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeUpdateProfileAttribute_args : TBase
    {
      private int _seq;
      private ProfileAttribute _profileAttribute;
      private string _value;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="ProfileAttribute"/>
      /// </summary>
      public ProfileAttribute ProfileAttribute
      {
        get
        {
          return _profileAttribute;
        }
        set
        {
          __isset.profileAttribute = true;
          this._profileAttribute = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool profileAttribute;
        public bool value;
      }

      public storeUpdateProfileAttribute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ProfileAttribute = (ProfileAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeUpdateProfileAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (__isset.profileAttribute) {
          field.Name = "profileAttribute";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ProfileAttribute);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeUpdateProfileAttribute_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",ProfileAttribute: ");
        sb.Append(ProfileAttribute);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class storeUpdateProfileAttribute_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public storeUpdateProfileAttribute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("storeUpdateProfileAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("storeUpdateProfileAttribute_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class syncContactBySnsIds_args : TBase
    {
      private int _reqSeq;
      private List<SnsFriendModification> _modifications;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public List<SnsFriendModification> Modifications
      {
        get
        {
          return _modifications;
        }
        set
        {
          __isset.modifications = true;
          this._modifications = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool modifications;
      }

      public syncContactBySnsIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Modifications = new List<SnsFriendModification>();
                  TList _list401 = iprot.ReadListBegin();
                  for( int _i402 = 0; _i402 < _list401.Count; ++_i402)
                  {
                    SnsFriendModification _elem403 = new SnsFriendModification();
                    _elem403 = new SnsFriendModification();
                    _elem403.Read(iprot);
                    Modifications.Add(_elem403);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("syncContactBySnsIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Modifications != null && __isset.modifications) {
          field.Name = "modifications";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Modifications.Count));
            foreach (SnsFriendModification _iter404 in Modifications)
            {
              _iter404.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("syncContactBySnsIds_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Modifications: ");
        sb.Append(Modifications);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class syncContactBySnsIds_result : TBase
    {
      private List<SnsFriendContactRegistration> _success;
      private TalkException _e;

      public List<SnsFriendContactRegistration> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public syncContactBySnsIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SnsFriendContactRegistration>();
                  TList _list405 = iprot.ReadListBegin();
                  for( int _i406 = 0; _i406 < _list405.Count; ++_i406)
                  {
                    SnsFriendContactRegistration _elem407 = new SnsFriendContactRegistration();
                    _elem407 = new SnsFriendContactRegistration();
                    _elem407.Read(iprot);
                    Success.Add(_elem407);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("syncContactBySnsIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SnsFriendContactRegistration _iter408 in Success)
              {
                _iter408.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("syncContactBySnsIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class syncContacts_args : TBase
    {
      private int _reqSeq;
      private List<ContactModification> _localContacts;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public List<ContactModification> LocalContacts
      {
        get
        {
          return _localContacts;
        }
        set
        {
          __isset.localContacts = true;
          this._localContacts = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool localContacts;
      }

      public syncContacts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  LocalContacts = new List<ContactModification>();
                  TList _list409 = iprot.ReadListBegin();
                  for( int _i410 = 0; _i410 < _list409.Count; ++_i410)
                  {
                    ContactModification _elem411 = new ContactModification();
                    _elem411 = new ContactModification();
                    _elem411.Read(iprot);
                    LocalContacts.Add(_elem411);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("syncContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (LocalContacts != null && __isset.localContacts) {
          field.Name = "localContacts";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, LocalContacts.Count));
            foreach (ContactModification _iter412 in LocalContacts)
            {
              _iter412.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("syncContacts_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",LocalContacts: ");
        sb.Append(LocalContacts);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class syncContacts_result : TBase
    {
      private Dictionary<string, ContactRegistration> _success;
      private TalkException _e;

      public Dictionary<string, ContactRegistration> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public syncContacts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, ContactRegistration>();
                  TMap _map413 = iprot.ReadMapBegin();
                  for( int _i414 = 0; _i414 < _map413.Count; ++_i414)
                  {
                    string _key415;
                    ContactRegistration _val416;
                    _key415 = iprot.ReadString();
                    _val416 = new ContactRegistration();
                    _val416.Read(iprot);
                    Success[_key415] = _val416;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("syncContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter417 in Success.Keys)
              {
                oprot.WriteString(_iter417);
                Success[_iter417].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("syncContacts_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trySendMessage_args : TBase
    {
      private int _seq;
      private Message _message;

      public int Seq
      {
        get
        {
          return _seq;
        }
        set
        {
          __isset.seq = true;
          this._seq = value;
        }
      }

      public Message Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool seq;
        public bool message;
      }

      public trySendMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("trySendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("trySendMessage_args(");
        sb.Append("Seq: ");
        sb.Append(Seq);
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class trySendMessage_result : TBase
    {
      private Message _success;
      private TalkException _e;

      public Message Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public trySendMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("trySendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("trySendMessage_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unblockContact_args : TBase
    {
      private int _reqSeq;
      private string _id;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool id;
      }

      public unblockContact_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unblockContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unblockContact_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unblockContact_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public unblockContact_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unblockContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unblockContact_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unblockRecommendation_args : TBase
    {
      private int _reqSeq;
      private string _id;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool id;
      }

      public unblockRecommendation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unblockRecommendation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unblockRecommendation_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unblockRecommendation_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public unblockRecommendation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unblockRecommendation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unblockRecommendation_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unregisterUserAndDevice_args : TBase
    {

      public unregisterUserAndDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unregisterUserAndDevice_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unregisterUserAndDevice_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class unregisterUserAndDevice_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public unregisterUserAndDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("unregisterUserAndDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("unregisterUserAndDevice_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateApnsDeviceToken_args : TBase
    {
      private byte[] _apnsDeviceToken;

      public byte[] ApnsDeviceToken
      {
        get
        {
          return _apnsDeviceToken;
        }
        set
        {
          __isset.apnsDeviceToken = true;
          this._apnsDeviceToken = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool apnsDeviceToken;
      }

      public updateApnsDeviceToken_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ApnsDeviceToken = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateApnsDeviceToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApnsDeviceToken != null && __isset.apnsDeviceToken) {
          field.Name = "apnsDeviceToken";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(ApnsDeviceToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateApnsDeviceToken_args(");
        sb.Append("ApnsDeviceToken: ");
        sb.Append(ApnsDeviceToken);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateApnsDeviceToken_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateApnsDeviceToken_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateApnsDeviceToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateApnsDeviceToken_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateBuddySetting_args : TBase
    {
      private string _key;
      private string _value;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool value;
      }

      public updateBuddySetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateBuddySetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateBuddySetting_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateBuddySetting_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateBuddySetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateBuddySetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateBuddySetting_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateC2DMRegistrationId_args : TBase
    {
      private string _registrationId;

      public string RegistrationId
      {
        get
        {
          return _registrationId;
        }
        set
        {
          __isset.registrationId = true;
          this._registrationId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool registrationId;
      }

      public updateC2DMRegistrationId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                RegistrationId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateC2DMRegistrationId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RegistrationId != null && __isset.registrationId) {
          field.Name = "registrationId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegistrationId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateC2DMRegistrationId_args(");
        sb.Append("RegistrationId: ");
        sb.Append(RegistrationId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateC2DMRegistrationId_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateC2DMRegistrationId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateC2DMRegistrationId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateC2DMRegistrationId_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateContactSetting_args : TBase
    {
      private int _reqSeq;
      private string _mid;
      private ContactSetting _flag;
      private string _value;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public string Mid
      {
        get
        {
          return _mid;
        }
        set
        {
          __isset.mid = true;
          this._mid = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="ContactSetting"/>
      /// </summary>
      public ContactSetting Flag
      {
        get
        {
          return _flag;
        }
        set
        {
          __isset.flag = true;
          this._flag = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool mid;
        public bool flag;
        public bool value;
      }

      public updateContactSetting_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Flag = (ContactSetting)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateContactSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.flag) {
          field.Name = "flag";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Flag);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateContactSetting_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Mid: ");
        sb.Append(Mid);
        sb.Append(",Flag: ");
        sb.Append(Flag);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateContactSetting_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateContactSetting_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateContactSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateContactSetting_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCustomModeSettings_args : TBase
    {
      private CustomMode _customMode;
      private Dictionary<string, string> _paramMap;

      /// <summary>
      /// 
      /// <seealso cref="CustomMode"/>
      /// </summary>
      public CustomMode CustomMode
      {
        get
        {
          return _customMode;
        }
        set
        {
          __isset.customMode = true;
          this._customMode = value;
        }
      }

      public Dictionary<string, string> ParamMap
      {
        get
        {
          return _paramMap;
        }
        set
        {
          __isset.paramMap = true;
          this._paramMap = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customMode;
        public bool paramMap;
      }

      public updateCustomModeSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                CustomMode = (CustomMode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  ParamMap = new Dictionary<string, string>();
                  TMap _map418 = iprot.ReadMapBegin();
                  for( int _i419 = 0; _i419 < _map418.Count; ++_i419)
                  {
                    string _key420;
                    string _val421;
                    _key420 = iprot.ReadString();
                    _val421 = iprot.ReadString();
                    ParamMap[_key420] = _val421;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateCustomModeSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.customMode) {
          field.Name = "customMode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)CustomMode);
          oprot.WriteFieldEnd();
        }
        if (ParamMap != null && __isset.paramMap) {
          field.Name = "paramMap";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamMap.Count));
            foreach (string _iter422 in ParamMap.Keys)
            {
              oprot.WriteString(_iter422);
              oprot.WriteString(ParamMap[_iter422]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateCustomModeSettings_args(");
        sb.Append("CustomMode: ");
        sb.Append(CustomMode);
        sb.Append(",ParamMap: ");
        sb.Append(ParamMap);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateCustomModeSettings_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateCustomModeSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateCustomModeSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateCustomModeSettings_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDeviceInfo_args : TBase
    {
      private string _deviceUid;
      private DeviceInfo _deviceInfo;

      public string DeviceUid
      {
        get
        {
          return _deviceUid;
        }
        set
        {
          __isset.deviceUid = true;
          this._deviceUid = value;
        }
      }

      public DeviceInfo DeviceInfo
      {
        get
        {
          return _deviceInfo;
        }
        set
        {
          __isset.deviceInfo = true;
          this._deviceInfo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool deviceUid;
        public bool deviceInfo;
      }

      public updateDeviceInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                DeviceUid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDeviceInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeviceUid != null && __isset.deviceUid) {
          field.Name = "deviceUid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceUid);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateDeviceInfo_args(");
        sb.Append("DeviceUid: ");
        sb.Append(DeviceUid);
        sb.Append(",DeviceInfo: ");
        sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateDeviceInfo_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateDeviceInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateDeviceInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateDeviceInfo_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroup_args : TBase
    {
      private int _reqSeq;
      private Group _group;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public Group Group
      {
        get
        {
          return _group;
        }
        set
        {
          __isset.group = true;
          this._group = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool group;
      }

      public updateGroup_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Group = new Group();
                Group.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Group != null && __isset.group) {
          field.Name = "group";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Group.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateGroup_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Group: ");
        sb.Append(Group== null ? "<null>" : Group.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateGroup_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateGroup_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateGroup_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateNotificationToken_args : TBase
    {
      private NotificationType _type;
      private string _token;

      /// <summary>
      /// 
      /// <seealso cref="NotificationType"/>
      /// </summary>
      public NotificationType Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }

      public string Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool type;
        public bool token;
      }

      public updateNotificationToken_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I32) {
                Type = (NotificationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Token = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNotificationToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNotificationToken_args(");
        sb.Append("Type: ");
        sb.Append(Type);
        sb.Append(",Token: ");
        sb.Append(Token);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateNotificationToken_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateNotificationToken_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNotificationToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNotificationToken_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateNotificationTokenWithBytes_args : TBase
    {
      private NotificationType _type;
      private byte[] _token;

      /// <summary>
      /// 
      /// <seealso cref="NotificationType"/>
      /// </summary>
      public NotificationType Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }

      public byte[] Token
      {
        get
        {
          return _token;
        }
        set
        {
          __isset.token = true;
          this._token = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool type;
        public bool token;
      }

      public updateNotificationTokenWithBytes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I32) {
                Type = (NotificationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Token = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNotificationTokenWithBytes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Token);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNotificationTokenWithBytes_args(");
        sb.Append("Type: ");
        sb.Append(Type);
        sb.Append(",Token: ");
        sb.Append(Token);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateNotificationTokenWithBytes_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateNotificationTokenWithBytes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateNotificationTokenWithBytes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateNotificationTokenWithBytes_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateProfile_args : TBase
    {
      private int _reqSeq;
      private Profile _profile;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public Profile Profile
      {
        get
        {
          return _profile;
        }
        set
        {
          __isset.profile = true;
          this._profile = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool profile;
      }

      public updateProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Profile = new Profile();
                Profile.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Profile != null && __isset.profile) {
          field.Name = "profile";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Profile.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateProfile_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Profile: ");
        sb.Append(Profile== null ? "<null>" : Profile.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateProfile_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateProfile_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateProfileAttribute_args : TBase
    {
      private int _reqSeq;
      private ProfileAttribute _attr;
      private string _value;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="ProfileAttribute"/>
      /// </summary>
      public ProfileAttribute Attr
      {
        get
        {
          return _attr;
        }
        set
        {
          __isset.attr = true;
          this._attr = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool attr;
        public bool value;
      }

      public updateProfileAttribute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Attr = (ProfileAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateProfileAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.attr) {
          field.Name = "attr";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Attr);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateProfileAttribute_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Attr: ");
        sb.Append(Attr);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateProfileAttribute_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateProfileAttribute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateProfileAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateProfileAttribute_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateRegion_args : TBase
    {
      private string _region;

      public string Region
      {
        get
        {
          return _region;
        }
        set
        {
          __isset.region = true;
          this._region = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool region;
      }

      public updateRegion_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateRegion_args(");
        sb.Append("Region: ");
        sb.Append(Region);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateRegion_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateRegion_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateRegion_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettings_args : TBase
    {
      private int _reqSeq;
      private Settings _settings;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public Settings Settings
      {
        get
        {
          return _settings;
        }
        set
        {
          __isset.settings = true;
          this._settings = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool settings;
      }

      public updateSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettings_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Settings: ");
        sb.Append(Settings== null ? "<null>" : Settings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettings_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettings_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettings2_args : TBase
    {
      private int _reqSeq;
      private Settings _settings;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public Settings Settings
      {
        get
        {
          return _settings;
        }
        set
        {
          __isset.settings = true;
          this._settings = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool settings;
      }

      public updateSettings2_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettings2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettings2_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Settings: ");
        sb.Append(Settings== null ? "<null>" : Settings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettings2_result : TBase
    {
      private int _success;
      private TalkException _e;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public updateSettings2_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettings2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettings2_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettingsAttribute_args : TBase
    {
      private int _reqSeq;
      private SettingsAttribute _attr;
      private string _value;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="SettingsAttribute"/>
      /// </summary>
      public SettingsAttribute Attr
      {
        get
        {
          return _attr;
        }
        set
        {
          __isset.attr = true;
          this._attr = value;
        }
      }

      public string Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool attr;
        public bool value;
      }

      public updateSettingsAttribute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Attr = (SettingsAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettingsAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.attr) {
          field.Name = "attr";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Attr);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettingsAttribute_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",Attr: ");
        sb.Append(Attr);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettingsAttribute_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public updateSettingsAttribute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettingsAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettingsAttribute_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettingsAttributes_args : TBase
    {
      private int _reqSeq;
      private int _attrBitset;
      private Settings _settings;

      public int ReqSeq
      {
        get
        {
          return _reqSeq;
        }
        set
        {
          __isset.reqSeq = true;
          this._reqSeq = value;
        }
      }

      public int AttrBitset
      {
        get
        {
          return _attrBitset;
        }
        set
        {
          __isset.attrBitset = true;
          this._attrBitset = value;
        }
      }

      public Settings Settings
      {
        get
        {
          return _settings;
        }
        set
        {
          __isset.settings = true;
          this._settings = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool reqSeq;
        public bool attrBitset;
        public bool settings;
      }

      public updateSettingsAttributes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                AttrBitset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettingsAttributes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.attrBitset) {
          field.Name = "attrBitset";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AttrBitset);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettingsAttributes_args(");
        sb.Append("ReqSeq: ");
        sb.Append(ReqSeq);
        sb.Append(",AttrBitset: ");
        sb.Append(AttrBitset);
        sb.Append(",Settings: ");
        sb.Append(Settings== null ? "<null>" : Settings.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSettingsAttributes_result : TBase
    {
      private int _success;
      private TalkException _e;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public updateSettingsAttributes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSettingsAttributes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSettingsAttributes_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyIdentityCredential_args : TBase
    {
      private IdentityProvider _identityProvider;
      private string _identifier;
      private string _password;

      /// <summary>
      /// 
      /// <seealso cref="IdentityProvider"/>
      /// </summary>
      public IdentityProvider IdentityProvider
      {
        get
        {
          return _identityProvider;
        }
        set
        {
          __isset.identityProvider = true;
          this._identityProvider = value;
        }
      }

      public string Identifier
      {
        get
        {
          return _identifier;
        }
        set
        {
          __isset.identifier = true;
          this._identifier = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool identityProvider;
        public bool identifier;
        public bool password;
      }

      public verifyIdentityCredential_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 8:
              if (field.Type == TType.I32) {
                IdentityProvider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (__isset.identityProvider) {
          field.Name = "identityProvider";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)IdentityProvider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyIdentityCredential_args(");
        sb.Append("IdentityProvider: ");
        sb.Append(IdentityProvider);
        sb.Append(",Identifier: ");
        sb.Append(Identifier);
        sb.Append(",Password: ");
        sb.Append(Password);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyIdentityCredential_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public verifyIdentityCredential_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyIdentityCredential_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyIdentityCredentialWithResult_args : TBase
    {
      private IdentityCredential _identityCredential;

      public IdentityCredential IdentityCredential
      {
        get
        {
          return _identityCredential;
        }
        set
        {
          __isset.identityCredential = true;
          this._identityCredential = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool identityCredential;
      }

      public verifyIdentityCredentialWithResult_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                IdentityCredential = new IdentityCredential();
                IdentityCredential.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyIdentityCredentialWithResult_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdentityCredential != null && __isset.identityCredential) {
          field.Name = "identityCredential";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          IdentityCredential.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyIdentityCredentialWithResult_args(");
        sb.Append("IdentityCredential: ");
        sb.Append(IdentityCredential== null ? "<null>" : IdentityCredential.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyIdentityCredentialWithResult_result : TBase
    {
      private UserAuthStatus _success;
      private TalkException _e;

      public UserAuthStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public verifyIdentityCredentialWithResult_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserAuthStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyIdentityCredentialWithResult_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyIdentityCredentialWithResult_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyPhone_args : TBase
    {
      private string _sessionId;
      private string _pinCode;
      private string _udidHash;

      public string SessionId
      {
        get
        {
          return _sessionId;
        }
        set
        {
          __isset.sessionId = true;
          this._sessionId = value;
        }
      }

      public string PinCode
      {
        get
        {
          return _pinCode;
        }
        set
        {
          __isset.pinCode = true;
          this._pinCode = value;
        }
      }

      public string UdidHash
      {
        get
        {
          return _udidHash;
        }
        set
        {
          __isset.udidHash = true;
          this._udidHash = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionId;
        public bool pinCode;
        public bool udidHash;
      }

      public verifyPhone_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyPhone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyPhone_args(");
        sb.Append("SessionId: ");
        sb.Append(SessionId);
        sb.Append(",PinCode: ");
        sb.Append(PinCode);
        sb.Append(",UdidHash: ");
        sb.Append(UdidHash);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyPhone_result : TBase
    {
      private VerificationResult _success;
      private TalkException _e;

      /// <summary>
      /// 
      /// <seealso cref="VerificationResult"/>
      /// </summary>
      public VerificationResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public verifyPhone_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (VerificationResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyPhone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyPhone_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyQrcode_args : TBase
    {
      private string _verifier;
      private string _pinCode;

      public string Verifier
      {
        get
        {
          return _verifier;
        }
        set
        {
          __isset.verifier = true;
          this._verifier = value;
        }
      }

      public string PinCode
      {
        get
        {
          return _pinCode;
        }
        set
        {
          __isset.pinCode = true;
          this._pinCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool verifier;
        public bool pinCode;
      }

      public verifyQrcode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyQrcode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyQrcode_args(");
        sb.Append("Verifier: ");
        sb.Append(Verifier);
        sb.Append(",PinCode: ");
        sb.Append(PinCode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class verifyQrcode_result : TBase
    {
      private string _success;
      private TalkException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public verifyQrcode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("verifyQrcode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("verifyQrcode_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
