/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LINE.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Product : TBase
  {
    private string _productId;
    private long _packageId;
    private int _version;
    private string _authorName;
    private bool _onSale;
    private int _validDays;
    private int _saleType;
    private string _copyright;
    private string _title;
    private string _descriptionText;
    private long _shopOrderId;
    private string _fromMid;
    private string _toMid;
    private long _validUntil;
    private int _priceTier;
    private string _price;
    private string _currency;
    private string _currencySymbol;
    private PaymentType _paymentType;
    private long _createDate;
    private bool _ownFlag;
    private ProductEventType _eventType;
    private string _urlSchema;
    private string _downloadUrl;
    private string _buddyMid;
    private long _publishSince;
    private bool _newFlag;
    private bool _missionFlag;

    public string ProductId
    {
      get
      {
        return _productId;
      }
      set
      {
        __isset.productId = true;
        this._productId = value;
      }
    }

    public long PackageId
    {
      get
      {
        return _packageId;
      }
      set
      {
        __isset.packageId = true;
        this._packageId = value;
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public string AuthorName
    {
      get
      {
        return _authorName;
      }
      set
      {
        __isset.authorName = true;
        this._authorName = value;
      }
    }

    public bool OnSale
    {
      get
      {
        return _onSale;
      }
      set
      {
        __isset.onSale = true;
        this._onSale = value;
      }
    }

    public int ValidDays
    {
      get
      {
        return _validDays;
      }
      set
      {
        __isset.validDays = true;
        this._validDays = value;
      }
    }

    public int SaleType
    {
      get
      {
        return _saleType;
      }
      set
      {
        __isset.saleType = true;
        this._saleType = value;
      }
    }

    public string Copyright
    {
      get
      {
        return _copyright;
      }
      set
      {
        __isset.copyright = true;
        this._copyright = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string DescriptionText
    {
      get
      {
        return _descriptionText;
      }
      set
      {
        __isset.descriptionText = true;
        this._descriptionText = value;
      }
    }

    public long ShopOrderId
    {
      get
      {
        return _shopOrderId;
      }
      set
      {
        __isset.shopOrderId = true;
        this._shopOrderId = value;
      }
    }

    public string FromMid
    {
      get
      {
        return _fromMid;
      }
      set
      {
        __isset.fromMid = true;
        this._fromMid = value;
      }
    }

    public string ToMid
    {
      get
      {
        return _toMid;
      }
      set
      {
        __isset.toMid = true;
        this._toMid = value;
      }
    }

    public long ValidUntil
    {
      get
      {
        return _validUntil;
      }
      set
      {
        __isset.validUntil = true;
        this._validUntil = value;
      }
    }

    public int PriceTier
    {
      get
      {
        return _priceTier;
      }
      set
      {
        __isset.priceTier = true;
        this._priceTier = value;
      }
    }

    public string Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        this._currency = value;
      }
    }

    public string CurrencySymbol
    {
      get
      {
        return _currencySymbol;
      }
      set
      {
        __isset.currencySymbol = true;
        this._currencySymbol = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PaymentType"/>
    /// </summary>
    public PaymentType PaymentType
    {
      get
      {
        return _paymentType;
      }
      set
      {
        __isset.paymentType = true;
        this._paymentType = value;
      }
    }

    public long CreateDate
    {
      get
      {
        return _createDate;
      }
      set
      {
        __isset.createDate = true;
        this._createDate = value;
      }
    }

    public bool OwnFlag
    {
      get
      {
        return _ownFlag;
      }
      set
      {
        __isset.ownFlag = true;
        this._ownFlag = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ProductEventType"/>
    /// </summary>
    public ProductEventType EventType
    {
      get
      {
        return _eventType;
      }
      set
      {
        __isset.eventType = true;
        this._eventType = value;
      }
    }

    public string UrlSchema
    {
      get
      {
        return _urlSchema;
      }
      set
      {
        __isset.urlSchema = true;
        this._urlSchema = value;
      }
    }

    public string DownloadUrl
    {
      get
      {
        return _downloadUrl;
      }
      set
      {
        __isset.downloadUrl = true;
        this._downloadUrl = value;
      }
    }

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }

    public long PublishSince
    {
      get
      {
        return _publishSince;
      }
      set
      {
        __isset.publishSince = true;
        this._publishSince = value;
      }
    }

    public bool NewFlag
    {
      get
      {
        return _newFlag;
      }
      set
      {
        __isset.newFlag = true;
        this._newFlag = value;
      }
    }

    public bool MissionFlag
    {
      get
      {
        return _missionFlag;
      }
      set
      {
        __isset.missionFlag = true;
        this._missionFlag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool productId;
      public bool packageId;
      public bool version;
      public bool authorName;
      public bool onSale;
      public bool validDays;
      public bool saleType;
      public bool copyright;
      public bool title;
      public bool descriptionText;
      public bool shopOrderId;
      public bool fromMid;
      public bool toMid;
      public bool validUntil;
      public bool priceTier;
      public bool price;
      public bool currency;
      public bool currencySymbol;
      public bool paymentType;
      public bool createDate;
      public bool ownFlag;
      public bool eventType;
      public bool urlSchema;
      public bool downloadUrl;
      public bool buddyMid;
      public bool publishSince;
      public bool newFlag;
      public bool missionFlag;
    }

    public Product() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ProductId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              PackageId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              AuthorName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              OnSale = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              ValidDays = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              SaleType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Copyright = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DescriptionText = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              ShopOrderId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              FromMid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              ToMid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              ValidUntil = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              PriceTier = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Price = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              CurrencySymbol = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.I32) {
              PaymentType = (PaymentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              CreateDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Bool) {
              OwnFlag = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              EventType = (ProductEventType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.String) {
              UrlSchema = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.String) {
              DownloadUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.String) {
              BuddyMid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.I64) {
              PublishSince = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.Bool) {
              NewFlag = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Bool) {
              MissionFlag = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Product");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ProductId != null && __isset.productId) {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProductId);
        oprot.WriteFieldEnd();
      }
      if (__isset.packageId) {
        field.Name = "packageId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PackageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (AuthorName != null && __isset.authorName) {
        field.Name = "authorName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuthorName);
        oprot.WriteFieldEnd();
      }
      if (__isset.onSale) {
        field.Name = "onSale";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(OnSale);
        oprot.WriteFieldEnd();
      }
      if (__isset.validDays) {
        field.Name = "validDays";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ValidDays);
        oprot.WriteFieldEnd();
      }
      if (__isset.saleType) {
        field.Name = "saleType";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SaleType);
        oprot.WriteFieldEnd();
      }
      if (Copyright != null && __isset.copyright) {
        field.Name = "copyright";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Copyright);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (DescriptionText != null && __isset.descriptionText) {
        field.Name = "descriptionText";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DescriptionText);
        oprot.WriteFieldEnd();
      }
      if (__isset.shopOrderId) {
        field.Name = "shopOrderId";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ShopOrderId);
        oprot.WriteFieldEnd();
      }
      if (FromMid != null && __isset.fromMid) {
        field.Name = "fromMid";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FromMid);
        oprot.WriteFieldEnd();
      }
      if (ToMid != null && __isset.toMid) {
        field.Name = "toMid";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ToMid);
        oprot.WriteFieldEnd();
      }
      if (__isset.validUntil) {
        field.Name = "validUntil";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ValidUntil);
        oprot.WriteFieldEnd();
      }
      if (__isset.priceTier) {
        field.Name = "priceTier";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PriceTier);
        oprot.WriteFieldEnd();
      }
      if (Price != null && __isset.price) {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Price);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (CurrencySymbol != null && __isset.currencySymbol) {
        field.Name = "currencySymbol";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencySymbol);
        oprot.WriteFieldEnd();
      }
      if (__isset.paymentType) {
        field.Name = "paymentType";
        field.Type = TType.I32;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)PaymentType);
        oprot.WriteFieldEnd();
      }
      if (__isset.createDate) {
        field.Name = "createDate";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.ownFlag) {
        field.Name = "ownFlag";
        field.Type = TType.Bool;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(OwnFlag);
        oprot.WriteFieldEnd();
      }
      if (__isset.eventType) {
        field.Name = "eventType";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)EventType);
        oprot.WriteFieldEnd();
      }
      if (UrlSchema != null && __isset.urlSchema) {
        field.Name = "urlSchema";
        field.Type = TType.String;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UrlSchema);
        oprot.WriteFieldEnd();
      }
      if (DownloadUrl != null && __isset.downloadUrl) {
        field.Name = "downloadUrl";
        field.Type = TType.String;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DownloadUrl);
        oprot.WriteFieldEnd();
      }
      if (BuddyMid != null && __isset.buddyMid) {
        field.Name = "buddyMid";
        field.Type = TType.String;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BuddyMid);
        oprot.WriteFieldEnd();
      }
      if (__isset.publishSince) {
        field.Name = "publishSince";
        field.Type = TType.I64;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PublishSince);
        oprot.WriteFieldEnd();
      }
      if (__isset.newFlag) {
        field.Name = "newFlag";
        field.Type = TType.Bool;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NewFlag);
        oprot.WriteFieldEnd();
      }
      if (__isset.missionFlag) {
        field.Name = "missionFlag";
        field.Type = TType.Bool;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(MissionFlag);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Product(");
      sb.Append("ProductId: ");
      sb.Append(ProductId);
      sb.Append(",PackageId: ");
      sb.Append(PackageId);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",AuthorName: ");
      sb.Append(AuthorName);
      sb.Append(",OnSale: ");
      sb.Append(OnSale);
      sb.Append(",ValidDays: ");
      sb.Append(ValidDays);
      sb.Append(",SaleType: ");
      sb.Append(SaleType);
      sb.Append(",Copyright: ");
      sb.Append(Copyright);
      sb.Append(",Title: ");
      sb.Append(Title);
      sb.Append(",DescriptionText: ");
      sb.Append(DescriptionText);
      sb.Append(",ShopOrderId: ");
      sb.Append(ShopOrderId);
      sb.Append(",FromMid: ");
      sb.Append(FromMid);
      sb.Append(",ToMid: ");
      sb.Append(ToMid);
      sb.Append(",ValidUntil: ");
      sb.Append(ValidUntil);
      sb.Append(",PriceTier: ");
      sb.Append(PriceTier);
      sb.Append(",Price: ");
      sb.Append(Price);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",CurrencySymbol: ");
      sb.Append(CurrencySymbol);
      sb.Append(",PaymentType: ");
      sb.Append(PaymentType);
      sb.Append(",CreateDate: ");
      sb.Append(CreateDate);
      sb.Append(",OwnFlag: ");
      sb.Append(OwnFlag);
      sb.Append(",EventType: ");
      sb.Append(EventType);
      sb.Append(",UrlSchema: ");
      sb.Append(UrlSchema);
      sb.Append(",DownloadUrl: ");
      sb.Append(DownloadUrl);
      sb.Append(",BuddyMid: ");
      sb.Append(BuddyMid);
      sb.Append(",PublishSince: ");
      sb.Append(PublishSince);
      sb.Append(",NewFlag: ");
      sb.Append(NewFlag);
      sb.Append(",MissionFlag: ");
      sb.Append(MissionFlag);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
