/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LINE.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TalkException : TException, TBase
  {
    private ErrorCode _code;
    private string _reason;
    private Dictionary<string, string> _parameterMap;

    /// <summary>
    /// 
    /// <seealso cref="ErrorCode"/>
    /// </summary>
    public ErrorCode Code
    {
      get
      {
        return _code;
      }
      set
      {
        __isset.code = true;
        this._code = value;
      }
    }

    public string Reason
    {
      get
      {
        return _reason;
      }
      set
      {
        __isset.reason = true;
        this._reason = value;
      }
    }

    public Dictionary<string, string> ParameterMap
    {
      get
      {
        return _parameterMap;
      }
      set
      {
        __isset.parameterMap = true;
        this._parameterMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool code;
      public bool reason;
      public bool parameterMap;
    }

    public TalkException() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Code = (ErrorCode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Reason = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                ParameterMap = new Dictionary<string, string>();
                TMap _map64 = iprot.ReadMapBegin();
                for( int _i65 = 0; _i65 < _map64.Count; ++_i65)
                {
                  string _key66;
                  string _val67;
                  _key66 = iprot.ReadString();
                  _val67 = iprot.ReadString();
                  ParameterMap[_key66] = _val67;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TalkException");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.code) {
        field.Name = "code";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Code);
        oprot.WriteFieldEnd();
      }
      if (Reason != null && __isset.reason) {
        field.Name = "reason";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Reason);
        oprot.WriteFieldEnd();
      }
      if (ParameterMap != null && __isset.parameterMap) {
        field.Name = "parameterMap";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParameterMap.Count));
          foreach (string _iter68 in ParameterMap.Keys)
          {
            oprot.WriteString(_iter68);
            oprot.WriteString(ParameterMap[_iter68]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TalkException(");
      sb.Append("Code: ");
      sb.Append(Code);
      sb.Append(",Reason: ");
      sb.Append(Reason);
      sb.Append(",ParameterMap: ");
      sb.Append(ParameterMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
