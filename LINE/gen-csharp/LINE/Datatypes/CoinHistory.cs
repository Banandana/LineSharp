/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LINE.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CoinHistory : TBase
  {
    private long _payDate;
    private int _coinBalance;
    private int _coin;
    private string _price;
    private string _title;
    private bool _refund;
    private string _paySeq;
    private string _currency;
    private string _currencySign;
    private string _displayPrice;
    private CoinPayLoad _payload;
    private string _channelId;

    public long PayDate
    {
      get
      {
        return _payDate;
      }
      set
      {
        __isset.payDate = true;
        this._payDate = value;
      }
    }

    public int CoinBalance
    {
      get
      {
        return _coinBalance;
      }
      set
      {
        __isset.coinBalance = true;
        this._coinBalance = value;
      }
    }

    public int Coin
    {
      get
      {
        return _coin;
      }
      set
      {
        __isset.coin = true;
        this._coin = value;
      }
    }

    public string Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public bool Refund
    {
      get
      {
        return _refund;
      }
      set
      {
        __isset.refund = true;
        this._refund = value;
      }
    }

    public string PaySeq
    {
      get
      {
        return _paySeq;
      }
      set
      {
        __isset.paySeq = true;
        this._paySeq = value;
      }
    }

    public string Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        this._currency = value;
      }
    }

    public string CurrencySign
    {
      get
      {
        return _currencySign;
      }
      set
      {
        __isset.currencySign = true;
        this._currencySign = value;
      }
    }

    public string DisplayPrice
    {
      get
      {
        return _displayPrice;
      }
      set
      {
        __isset.displayPrice = true;
        this._displayPrice = value;
      }
    }

    public CoinPayLoad Payload
    {
      get
      {
        return _payload;
      }
      set
      {
        __isset.payload = true;
        this._payload = value;
      }
    }

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool payDate;
      public bool coinBalance;
      public bool coin;
      public bool price;
      public bool title;
      public bool refund;
      public bool paySeq;
      public bool currency;
      public bool currencySign;
      public bool displayPrice;
      public bool payload;
      public bool channelId;
    }

    public CoinHistory() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              PayDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              CoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Coin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Price = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Refund = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              PaySeq = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              CurrencySign = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DisplayPrice = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Payload = new CoinPayLoad();
              Payload.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              ChannelId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CoinHistory");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.payDate) {
        field.Name = "payDate";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PayDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.coinBalance) {
        field.Name = "coinBalance";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CoinBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.coin) {
        field.Name = "coin";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Coin);
        oprot.WriteFieldEnd();
      }
      if (Price != null && __isset.price) {
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Price);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (__isset.refund) {
        field.Name = "refund";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Refund);
        oprot.WriteFieldEnd();
      }
      if (PaySeq != null && __isset.paySeq) {
        field.Name = "paySeq";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PaySeq);
        oprot.WriteFieldEnd();
      }
      if (Currency != null && __isset.currency) {
        field.Name = "currency";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (CurrencySign != null && __isset.currencySign) {
        field.Name = "currencySign";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CurrencySign);
        oprot.WriteFieldEnd();
      }
      if (DisplayPrice != null && __isset.displayPrice) {
        field.Name = "displayPrice";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayPrice);
        oprot.WriteFieldEnd();
      }
      if (Payload != null && __isset.payload) {
        field.Name = "payload";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Payload.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ChannelId != null && __isset.channelId) {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CoinHistory(");
      sb.Append("PayDate: ");
      sb.Append(PayDate);
      sb.Append(",CoinBalance: ");
      sb.Append(CoinBalance);
      sb.Append(",Coin: ");
      sb.Append(Coin);
      sb.Append(",Price: ");
      sb.Append(Price);
      sb.Append(",Title: ");
      sb.Append(Title);
      sb.Append(",Refund: ");
      sb.Append(Refund);
      sb.Append(",PaySeq: ");
      sb.Append(PaySeq);
      sb.Append(",Currency: ");
      sb.Append(Currency);
      sb.Append(",CurrencySign: ");
      sb.Append(CurrencySign);
      sb.Append(",DisplayPrice: ");
      sb.Append(DisplayPrice);
      sb.Append(",Payload: ");
      sb.Append(Payload== null ? "<null>" : Payload.ToString());
      sb.Append(",ChannelId: ");
      sb.Append(ChannelId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
