/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{
  public partial class ShopService {
    public interface Iface {
      void buyCoinProduct(PaymentReservation paymentReservation);
      #if SILVERLIGHT
      IAsyncResult Begin_buyCoinProduct(AsyncCallback callback, object state, PaymentReservation paymentReservation);
      void End_buyCoinProduct(IAsyncResult asyncResult);
      #endif
      void buyFreeProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId);
      #if SILVERLIGHT
      IAsyncResult Begin_buyFreeProduct(AsyncCallback callback, object state, string receiverMid, string productId, int messageTemplate, string language, string country, long packageId);
      void End_buyFreeProduct(IAsyncResult asyncResult);
      #endif
      void buyMustbuyProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId, string serialNumber);
      #if SILVERLIGHT
      IAsyncResult Begin_buyMustbuyProduct(AsyncCallback callback, object state, string receiverMid, string productId, int messageTemplate, string language, string country, long packageId, string serialNumber);
      void End_buyMustbuyProduct(IAsyncResult asyncResult);
      #endif
      void checkCanReceivePresent(string recipientMid, long packageId, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_checkCanReceivePresent(AsyncCallback callback, object state, string recipientMid, long packageId, string language, string country);
      void End_checkCanReceivePresent(IAsyncResult asyncResult);
      #endif
      ProductList getActivePurchases(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getActivePurchases(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getActivePurchases(IAsyncResult asyncResult);
      #endif
      ProductSimpleList getActivePurchaseVersions(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getActivePurchaseVersions(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductSimpleList End_getActivePurchaseVersions(IAsyncResult asyncResult);
      #endif
      List<CoinProductItem> getCoinProducts(PaymentType appStoreCode, string country, string language);
      #if SILVERLIGHT
      IAsyncResult Begin_getCoinProducts(AsyncCallback callback, object state, PaymentType appStoreCode, string country, string language);
      List<CoinProductItem> End_getCoinProducts(IAsyncResult asyncResult);
      #endif
      List<CoinProductItem> getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language);
      #if SILVERLIGHT
      IAsyncResult Begin_getCoinProductsByPgCode(AsyncCallback callback, object state, PaymentType appStoreCode, PaymentPgType pgCode, string country, string language);
      List<CoinProductItem> End_getCoinProductsByPgCode(IAsyncResult asyncResult);
      #endif
      CoinHistoryResult getCoinPurchaseHistory(CoinHistoryCondition request);
      #if SILVERLIGHT
      IAsyncResult Begin_getCoinPurchaseHistory(AsyncCallback callback, object state, CoinHistoryCondition request);
      CoinHistoryResult End_getCoinPurchaseHistory(IAsyncResult asyncResult);
      #endif
      CoinHistoryResult getCoinUseAndRefundHistory(CoinHistoryCondition request);
      #if SILVERLIGHT
      IAsyncResult Begin_getCoinUseAndRefundHistory(AsyncCallback callback, object state, CoinHistoryCondition request);
      CoinHistoryResult End_getCoinUseAndRefundHistory(IAsyncResult asyncResult);
      #endif
      ProductList getDownloads(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getDownloads(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getDownloads(IAsyncResult asyncResult);
      #endif
      ProductList getEventPackages(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getEventPackages(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getEventPackages(IAsyncResult asyncResult);
      #endif
      ProductList getNewlyReleasedPackages(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getNewlyReleasedPackages(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getNewlyReleasedPackages(IAsyncResult asyncResult);
      #endif
      ProductList getPopularPackages(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getPopularPackages(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getPopularPackages(IAsyncResult asyncResult);
      #endif
      ProductList getPresentsReceived(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getPresentsReceived(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getPresentsReceived(IAsyncResult asyncResult);
      #endif
      ProductList getPresentsSent(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getPresentsSent(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getPresentsSent(IAsyncResult asyncResult);
      #endif
      Product getProduct(long packageID, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getProduct(AsyncCallback callback, object state, long packageID, string language, string country);
      Product End_getProduct(IAsyncResult asyncResult);
      #endif
      ProductList getProductList(List<string> productIdList, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getProductList(AsyncCallback callback, object state, List<string> productIdList, string language, string country);
      ProductList End_getProductList(IAsyncResult asyncResult);
      #endif
      ProductList getProductListWithCarrier(List<string> productIdList, string language, string country, string carrierCode);
      #if SILVERLIGHT
      IAsyncResult Begin_getProductListWithCarrier(AsyncCallback callback, object state, List<string> productIdList, string language, string country, string carrierCode);
      ProductList End_getProductListWithCarrier(IAsyncResult asyncResult);
      #endif
      Product getProductWithCarrier(long packageID, string language, string country, string carrierCode);
      #if SILVERLIGHT
      IAsyncResult Begin_getProductWithCarrier(AsyncCallback callback, object state, long packageID, string language, string country, string carrierCode);
      Product End_getProductWithCarrier(IAsyncResult asyncResult);
      #endif
      ProductList getPurchaseHistory(long start, int size, string language, string country);
      #if SILVERLIGHT
      IAsyncResult Begin_getPurchaseHistory(AsyncCallback callback, object state, long start, int size, string language, string country);
      ProductList End_getPurchaseHistory(IAsyncResult asyncResult);
      #endif
      Coin getTotalBalance(PaymentType appStoreCode);
      #if SILVERLIGHT
      IAsyncResult Begin_getTotalBalance(AsyncCallback callback, object state, PaymentType appStoreCode);
      Coin End_getTotalBalance(IAsyncResult asyncResult);
      #endif
      long notifyDownloaded(long packageId, string language);
      #if SILVERLIGHT
      IAsyncResult Begin_notifyDownloaded(AsyncCallback callback, object state, long packageId, string language);
      long End_notifyDownloaded(IAsyncResult asyncResult);
      #endif
      PaymentReservationResult reserveCoinPurchase(CoinPurchaseReservation request);
      #if SILVERLIGHT
      IAsyncResult Begin_reserveCoinPurchase(AsyncCallback callback, object state, CoinPurchaseReservation request);
      PaymentReservationResult End_reserveCoinPurchase(IAsyncResult asyncResult);
      #endif
      PaymentReservationResult reservePayment(PaymentReservation paymentReservation);
      #if SILVERLIGHT
      IAsyncResult Begin_reservePayment(AsyncCallback callback, object state, PaymentReservation paymentReservation);
      PaymentReservationResult End_reservePayment(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_buyCoinProduct(AsyncCallback callback, object state, PaymentReservation paymentReservation)
      {
        return send_buyCoinProduct(callback, state, paymentReservation);
      }

      public void End_buyCoinProduct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_buyCoinProduct();
      }

      #endif

      public void buyCoinProduct(PaymentReservation paymentReservation)
      {
        #if !SILVERLIGHT
        send_buyCoinProduct(paymentReservation);
        recv_buyCoinProduct();

        #else
        var asyncResult = Begin_buyCoinProduct(null, null, paymentReservation);
        End_buyCoinProduct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_buyCoinProduct(AsyncCallback callback, object state, PaymentReservation paymentReservation)
      #else
      public void send_buyCoinProduct(PaymentReservation paymentReservation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("buyCoinProduct", TMessageType.Call, seqid_));
        buyCoinProduct_args args = new buyCoinProduct_args();
        args.PaymentReservation = paymentReservation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_buyCoinProduct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        buyCoinProduct_result result = new buyCoinProduct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_buyFreeProduct(AsyncCallback callback, object state, string receiverMid, string productId, int messageTemplate, string language, string country, long packageId)
      {
        return send_buyFreeProduct(callback, state, receiverMid, productId, messageTemplate, language, country, packageId);
      }

      public void End_buyFreeProduct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_buyFreeProduct();
      }

      #endif

      public void buyFreeProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId)
      {
        #if !SILVERLIGHT
        send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId);
        recv_buyFreeProduct();

        #else
        var asyncResult = Begin_buyFreeProduct(null, null, receiverMid, productId, messageTemplate, language, country, packageId);
        End_buyFreeProduct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_buyFreeProduct(AsyncCallback callback, object state, string receiverMid, string productId, int messageTemplate, string language, string country, long packageId)
      #else
      public void send_buyFreeProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("buyFreeProduct", TMessageType.Call, seqid_));
        buyFreeProduct_args args = new buyFreeProduct_args();
        args.ReceiverMid = receiverMid;
        args.ProductId = productId;
        args.MessageTemplate = messageTemplate;
        args.Language = language;
        args.Country = country;
        args.PackageId = packageId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_buyFreeProduct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        buyFreeProduct_result result = new buyFreeProduct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_buyMustbuyProduct(AsyncCallback callback, object state, string receiverMid, string productId, int messageTemplate, string language, string country, long packageId, string serialNumber)
      {
        return send_buyMustbuyProduct(callback, state, receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
      }

      public void End_buyMustbuyProduct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_buyMustbuyProduct();
      }

      #endif

      public void buyMustbuyProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId, string serialNumber)
      {
        #if !SILVERLIGHT
        send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
        recv_buyMustbuyProduct();

        #else
        var asyncResult = Begin_buyMustbuyProduct(null, null, receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
        End_buyMustbuyProduct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_buyMustbuyProduct(AsyncCallback callback, object state, string receiverMid, string productId, int messageTemplate, string language, string country, long packageId, string serialNumber)
      #else
      public void send_buyMustbuyProduct(string receiverMid, string productId, int messageTemplate, string language, string country, long packageId, string serialNumber)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("buyMustbuyProduct", TMessageType.Call, seqid_));
        buyMustbuyProduct_args args = new buyMustbuyProduct_args();
        args.ReceiverMid = receiverMid;
        args.ProductId = productId;
        args.MessageTemplate = messageTemplate;
        args.Language = language;
        args.Country = country;
        args.PackageId = packageId;
        args.SerialNumber = serialNumber;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_buyMustbuyProduct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        buyMustbuyProduct_result result = new buyMustbuyProduct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkCanReceivePresent(AsyncCallback callback, object state, string recipientMid, long packageId, string language, string country)
      {
        return send_checkCanReceivePresent(callback, state, recipientMid, packageId, language, country);
      }

      public void End_checkCanReceivePresent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_checkCanReceivePresent();
      }

      #endif

      public void checkCanReceivePresent(string recipientMid, long packageId, string language, string country)
      {
        #if !SILVERLIGHT
        send_checkCanReceivePresent(recipientMid, packageId, language, country);
        recv_checkCanReceivePresent();

        #else
        var asyncResult = Begin_checkCanReceivePresent(null, null, recipientMid, packageId, language, country);
        End_checkCanReceivePresent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkCanReceivePresent(AsyncCallback callback, object state, string recipientMid, long packageId, string language, string country)
      #else
      public void send_checkCanReceivePresent(string recipientMid, long packageId, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkCanReceivePresent", TMessageType.Call, seqid_));
        checkCanReceivePresent_args args = new checkCanReceivePresent_args();
        args.RecipientMid = recipientMid;
        args.PackageId = packageId;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_checkCanReceivePresent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkCanReceivePresent_result result = new checkCanReceivePresent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getActivePurchases(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getActivePurchases(callback, state, start, size, language, country);
      }

      public ProductList End_getActivePurchases(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getActivePurchases();
      }

      #endif

      public ProductList getActivePurchases(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getActivePurchases(start, size, language, country);
        return recv_getActivePurchases();

        #else
        var asyncResult = Begin_getActivePurchases(null, null, start, size, language, country);
        return End_getActivePurchases(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getActivePurchases(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getActivePurchases(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getActivePurchases", TMessageType.Call, seqid_));
        getActivePurchases_args args = new getActivePurchases_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getActivePurchases()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActivePurchases_result result = new getActivePurchases_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActivePurchases failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getActivePurchaseVersions(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getActivePurchaseVersions(callback, state, start, size, language, country);
      }

      public ProductSimpleList End_getActivePurchaseVersions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getActivePurchaseVersions();
      }

      #endif

      public ProductSimpleList getActivePurchaseVersions(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getActivePurchaseVersions(start, size, language, country);
        return recv_getActivePurchaseVersions();

        #else
        var asyncResult = Begin_getActivePurchaseVersions(null, null, start, size, language, country);
        return End_getActivePurchaseVersions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getActivePurchaseVersions(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getActivePurchaseVersions(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getActivePurchaseVersions", TMessageType.Call, seqid_));
        getActivePurchaseVersions_args args = new getActivePurchaseVersions_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductSimpleList recv_getActivePurchaseVersions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActivePurchaseVersions_result result = new getActivePurchaseVersions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActivePurchaseVersions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCoinProducts(AsyncCallback callback, object state, PaymentType appStoreCode, string country, string language)
      {
        return send_getCoinProducts(callback, state, appStoreCode, country, language);
      }

      public List<CoinProductItem> End_getCoinProducts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCoinProducts();
      }

      #endif

      public List<CoinProductItem> getCoinProducts(PaymentType appStoreCode, string country, string language)
      {
        #if !SILVERLIGHT
        send_getCoinProducts(appStoreCode, country, language);
        return recv_getCoinProducts();

        #else
        var asyncResult = Begin_getCoinProducts(null, null, appStoreCode, country, language);
        return End_getCoinProducts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCoinProducts(AsyncCallback callback, object state, PaymentType appStoreCode, string country, string language)
      #else
      public void send_getCoinProducts(PaymentType appStoreCode, string country, string language)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCoinProducts", TMessageType.Call, seqid_));
        getCoinProducts_args args = new getCoinProducts_args();
        args.AppStoreCode = appStoreCode;
        args.Country = country;
        args.Language = language;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CoinProductItem> recv_getCoinProducts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCoinProducts_result result = new getCoinProducts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCoinProducts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCoinProductsByPgCode(AsyncCallback callback, object state, PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
      {
        return send_getCoinProductsByPgCode(callback, state, appStoreCode, pgCode, country, language);
      }

      public List<CoinProductItem> End_getCoinProductsByPgCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCoinProductsByPgCode();
      }

      #endif

      public List<CoinProductItem> getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
      {
        #if !SILVERLIGHT
        send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language);
        return recv_getCoinProductsByPgCode();

        #else
        var asyncResult = Begin_getCoinProductsByPgCode(null, null, appStoreCode, pgCode, country, language);
        return End_getCoinProductsByPgCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCoinProductsByPgCode(AsyncCallback callback, object state, PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
      #else
      public void send_getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCoinProductsByPgCode", TMessageType.Call, seqid_));
        getCoinProductsByPgCode_args args = new getCoinProductsByPgCode_args();
        args.AppStoreCode = appStoreCode;
        args.PgCode = pgCode;
        args.Country = country;
        args.Language = language;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CoinProductItem> recv_getCoinProductsByPgCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCoinProductsByPgCode_result result = new getCoinProductsByPgCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCoinProductsByPgCode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCoinPurchaseHistory(AsyncCallback callback, object state, CoinHistoryCondition request)
      {
        return send_getCoinPurchaseHistory(callback, state, request);
      }

      public CoinHistoryResult End_getCoinPurchaseHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCoinPurchaseHistory();
      }

      #endif

      public CoinHistoryResult getCoinPurchaseHistory(CoinHistoryCondition request)
      {
        #if !SILVERLIGHT
        send_getCoinPurchaseHistory(request);
        return recv_getCoinPurchaseHistory();

        #else
        var asyncResult = Begin_getCoinPurchaseHistory(null, null, request);
        return End_getCoinPurchaseHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCoinPurchaseHistory(AsyncCallback callback, object state, CoinHistoryCondition request)
      #else
      public void send_getCoinPurchaseHistory(CoinHistoryCondition request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCoinPurchaseHistory", TMessageType.Call, seqid_));
        getCoinPurchaseHistory_args args = new getCoinPurchaseHistory_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CoinHistoryResult recv_getCoinPurchaseHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCoinPurchaseHistory_result result = new getCoinPurchaseHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCoinPurchaseHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getCoinUseAndRefundHistory(AsyncCallback callback, object state, CoinHistoryCondition request)
      {
        return send_getCoinUseAndRefundHistory(callback, state, request);
      }

      public CoinHistoryResult End_getCoinUseAndRefundHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCoinUseAndRefundHistory();
      }

      #endif

      public CoinHistoryResult getCoinUseAndRefundHistory(CoinHistoryCondition request)
      {
        #if !SILVERLIGHT
        send_getCoinUseAndRefundHistory(request);
        return recv_getCoinUseAndRefundHistory();

        #else
        var asyncResult = Begin_getCoinUseAndRefundHistory(null, null, request);
        return End_getCoinUseAndRefundHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCoinUseAndRefundHistory(AsyncCallback callback, object state, CoinHistoryCondition request)
      #else
      public void send_getCoinUseAndRefundHistory(CoinHistoryCondition request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getCoinUseAndRefundHistory", TMessageType.Call, seqid_));
        getCoinUseAndRefundHistory_args args = new getCoinUseAndRefundHistory_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CoinHistoryResult recv_getCoinUseAndRefundHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCoinUseAndRefundHistory_result result = new getCoinUseAndRefundHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCoinUseAndRefundHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getDownloads(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getDownloads(callback, state, start, size, language, country);
      }

      public ProductList End_getDownloads(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getDownloads();
      }

      #endif

      public ProductList getDownloads(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getDownloads(start, size, language, country);
        return recv_getDownloads();

        #else
        var asyncResult = Begin_getDownloads(null, null, start, size, language, country);
        return End_getDownloads(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getDownloads(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getDownloads(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getDownloads", TMessageType.Call, seqid_));
        getDownloads_args args = new getDownloads_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getDownloads()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDownloads_result result = new getDownloads_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDownloads failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getEventPackages(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getEventPackages(callback, state, start, size, language, country);
      }

      public ProductList End_getEventPackages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getEventPackages();
      }

      #endif

      public ProductList getEventPackages(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getEventPackages(start, size, language, country);
        return recv_getEventPackages();

        #else
        var asyncResult = Begin_getEventPackages(null, null, start, size, language, country);
        return End_getEventPackages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getEventPackages(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getEventPackages(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getEventPackages", TMessageType.Call, seqid_));
        getEventPackages_args args = new getEventPackages_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getEventPackages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getEventPackages_result result = new getEventPackages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getEventPackages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNewlyReleasedPackages(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getNewlyReleasedPackages(callback, state, start, size, language, country);
      }

      public ProductList End_getNewlyReleasedPackages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNewlyReleasedPackages();
      }

      #endif

      public ProductList getNewlyReleasedPackages(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getNewlyReleasedPackages(start, size, language, country);
        return recv_getNewlyReleasedPackages();

        #else
        var asyncResult = Begin_getNewlyReleasedPackages(null, null, start, size, language, country);
        return End_getNewlyReleasedPackages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNewlyReleasedPackages(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getNewlyReleasedPackages(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNewlyReleasedPackages", TMessageType.Call, seqid_));
        getNewlyReleasedPackages_args args = new getNewlyReleasedPackages_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getNewlyReleasedPackages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNewlyReleasedPackages_result result = new getNewlyReleasedPackages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNewlyReleasedPackages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPopularPackages(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getPopularPackages(callback, state, start, size, language, country);
      }

      public ProductList End_getPopularPackages(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPopularPackages();
      }

      #endif

      public ProductList getPopularPackages(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getPopularPackages(start, size, language, country);
        return recv_getPopularPackages();

        #else
        var asyncResult = Begin_getPopularPackages(null, null, start, size, language, country);
        return End_getPopularPackages(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPopularPackages(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getPopularPackages(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPopularPackages", TMessageType.Call, seqid_));
        getPopularPackages_args args = new getPopularPackages_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getPopularPackages()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPopularPackages_result result = new getPopularPackages_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPopularPackages failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPresentsReceived(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getPresentsReceived(callback, state, start, size, language, country);
      }

      public ProductList End_getPresentsReceived(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPresentsReceived();
      }

      #endif

      public ProductList getPresentsReceived(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getPresentsReceived(start, size, language, country);
        return recv_getPresentsReceived();

        #else
        var asyncResult = Begin_getPresentsReceived(null, null, start, size, language, country);
        return End_getPresentsReceived(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPresentsReceived(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getPresentsReceived(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPresentsReceived", TMessageType.Call, seqid_));
        getPresentsReceived_args args = new getPresentsReceived_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getPresentsReceived()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPresentsReceived_result result = new getPresentsReceived_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPresentsReceived failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPresentsSent(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getPresentsSent(callback, state, start, size, language, country);
      }

      public ProductList End_getPresentsSent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPresentsSent();
      }

      #endif

      public ProductList getPresentsSent(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getPresentsSent(start, size, language, country);
        return recv_getPresentsSent();

        #else
        var asyncResult = Begin_getPresentsSent(null, null, start, size, language, country);
        return End_getPresentsSent(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPresentsSent(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getPresentsSent(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPresentsSent", TMessageType.Call, seqid_));
        getPresentsSent_args args = new getPresentsSent_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getPresentsSent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPresentsSent_result result = new getPresentsSent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPresentsSent failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProduct(AsyncCallback callback, object state, long packageID, string language, string country)
      {
        return send_getProduct(callback, state, packageID, language, country);
      }

      public Product End_getProduct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProduct();
      }

      #endif

      public Product getProduct(long packageID, string language, string country)
      {
        #if !SILVERLIGHT
        send_getProduct(packageID, language, country);
        return recv_getProduct();

        #else
        var asyncResult = Begin_getProduct(null, null, packageID, language, country);
        return End_getProduct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProduct(AsyncCallback callback, object state, long packageID, string language, string country)
      #else
      public void send_getProduct(long packageID, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProduct", TMessageType.Call, seqid_));
        getProduct_args args = new getProduct_args();
        args.PackageID = packageID;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Product recv_getProduct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProduct_result result = new getProduct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProduct failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProductList(AsyncCallback callback, object state, List<string> productIdList, string language, string country)
      {
        return send_getProductList(callback, state, productIdList, language, country);
      }

      public ProductList End_getProductList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProductList();
      }

      #endif

      public ProductList getProductList(List<string> productIdList, string language, string country)
      {
        #if !SILVERLIGHT
        send_getProductList(productIdList, language, country);
        return recv_getProductList();

        #else
        var asyncResult = Begin_getProductList(null, null, productIdList, language, country);
        return End_getProductList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProductList(AsyncCallback callback, object state, List<string> productIdList, string language, string country)
      #else
      public void send_getProductList(List<string> productIdList, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProductList", TMessageType.Call, seqid_));
        getProductList_args args = new getProductList_args();
        args.ProductIdList = productIdList;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getProductList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProductList_result result = new getProductList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProductListWithCarrier(AsyncCallback callback, object state, List<string> productIdList, string language, string country, string carrierCode)
      {
        return send_getProductListWithCarrier(callback, state, productIdList, language, country, carrierCode);
      }

      public ProductList End_getProductListWithCarrier(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProductListWithCarrier();
      }

      #endif

      public ProductList getProductListWithCarrier(List<string> productIdList, string language, string country, string carrierCode)
      {
        #if !SILVERLIGHT
        send_getProductListWithCarrier(productIdList, language, country, carrierCode);
        return recv_getProductListWithCarrier();

        #else
        var asyncResult = Begin_getProductListWithCarrier(null, null, productIdList, language, country, carrierCode);
        return End_getProductListWithCarrier(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProductListWithCarrier(AsyncCallback callback, object state, List<string> productIdList, string language, string country, string carrierCode)
      #else
      public void send_getProductListWithCarrier(List<string> productIdList, string language, string country, string carrierCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProductListWithCarrier", TMessageType.Call, seqid_));
        getProductListWithCarrier_args args = new getProductListWithCarrier_args();
        args.ProductIdList = productIdList;
        args.Language = language;
        args.Country = country;
        args.CarrierCode = carrierCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getProductListWithCarrier()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProductListWithCarrier_result result = new getProductListWithCarrier_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductListWithCarrier failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getProductWithCarrier(AsyncCallback callback, object state, long packageID, string language, string country, string carrierCode)
      {
        return send_getProductWithCarrier(callback, state, packageID, language, country, carrierCode);
      }

      public Product End_getProductWithCarrier(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getProductWithCarrier();
      }

      #endif

      public Product getProductWithCarrier(long packageID, string language, string country, string carrierCode)
      {
        #if !SILVERLIGHT
        send_getProductWithCarrier(packageID, language, country, carrierCode);
        return recv_getProductWithCarrier();

        #else
        var asyncResult = Begin_getProductWithCarrier(null, null, packageID, language, country, carrierCode);
        return End_getProductWithCarrier(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getProductWithCarrier(AsyncCallback callback, object state, long packageID, string language, string country, string carrierCode)
      #else
      public void send_getProductWithCarrier(long packageID, string language, string country, string carrierCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getProductWithCarrier", TMessageType.Call, seqid_));
        getProductWithCarrier_args args = new getProductWithCarrier_args();
        args.PackageID = packageID;
        args.Language = language;
        args.Country = country;
        args.CarrierCode = carrierCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Product recv_getProductWithCarrier()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getProductWithCarrier_result result = new getProductWithCarrier_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProductWithCarrier failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getPurchaseHistory(AsyncCallback callback, object state, long start, int size, string language, string country)
      {
        return send_getPurchaseHistory(callback, state, start, size, language, country);
      }

      public ProductList End_getPurchaseHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getPurchaseHistory();
      }

      #endif

      public ProductList getPurchaseHistory(long start, int size, string language, string country)
      {
        #if !SILVERLIGHT
        send_getPurchaseHistory(start, size, language, country);
        return recv_getPurchaseHistory();

        #else
        var asyncResult = Begin_getPurchaseHistory(null, null, start, size, language, country);
        return End_getPurchaseHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getPurchaseHistory(AsyncCallback callback, object state, long start, int size, string language, string country)
      #else
      public void send_getPurchaseHistory(long start, int size, string language, string country)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getPurchaseHistory", TMessageType.Call, seqid_));
        getPurchaseHistory_args args = new getPurchaseHistory_args();
        args.Start = start;
        args.Size = size;
        args.Language = language;
        args.Country = country;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ProductList recv_getPurchaseHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getPurchaseHistory_result result = new getPurchaseHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPurchaseHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTotalBalance(AsyncCallback callback, object state, PaymentType appStoreCode)
      {
        return send_getTotalBalance(callback, state, appStoreCode);
      }

      public Coin End_getTotalBalance(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTotalBalance();
      }

      #endif

      public Coin getTotalBalance(PaymentType appStoreCode)
      {
        #if !SILVERLIGHT
        send_getTotalBalance(appStoreCode);
        return recv_getTotalBalance();

        #else
        var asyncResult = Begin_getTotalBalance(null, null, appStoreCode);
        return End_getTotalBalance(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTotalBalance(AsyncCallback callback, object state, PaymentType appStoreCode)
      #else
      public void send_getTotalBalance(PaymentType appStoreCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTotalBalance", TMessageType.Call, seqid_));
        getTotalBalance_args args = new getTotalBalance_args();
        args.AppStoreCode = appStoreCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Coin recv_getTotalBalance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTotalBalance_result result = new getTotalBalance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTotalBalance failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_notifyDownloaded(AsyncCallback callback, object state, long packageId, string language)
      {
        return send_notifyDownloaded(callback, state, packageId, language);
      }

      public long End_notifyDownloaded(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_notifyDownloaded();
      }

      #endif

      public long notifyDownloaded(long packageId, string language)
      {
        #if !SILVERLIGHT
        send_notifyDownloaded(packageId, language);
        return recv_notifyDownloaded();

        #else
        var asyncResult = Begin_notifyDownloaded(null, null, packageId, language);
        return End_notifyDownloaded(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyDownloaded(AsyncCallback callback, object state, long packageId, string language)
      #else
      public void send_notifyDownloaded(long packageId, string language)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("notifyDownloaded", TMessageType.Call, seqid_));
        notifyDownloaded_args args = new notifyDownloaded_args();
        args.PackageId = packageId;
        args.Language = language;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_notifyDownloaded()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyDownloaded_result result = new notifyDownloaded_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "notifyDownloaded failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reserveCoinPurchase(AsyncCallback callback, object state, CoinPurchaseReservation request)
      {
        return send_reserveCoinPurchase(callback, state, request);
      }

      public PaymentReservationResult End_reserveCoinPurchase(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reserveCoinPurchase();
      }

      #endif

      public PaymentReservationResult reserveCoinPurchase(CoinPurchaseReservation request)
      {
        #if !SILVERLIGHT
        send_reserveCoinPurchase(request);
        return recv_reserveCoinPurchase();

        #else
        var asyncResult = Begin_reserveCoinPurchase(null, null, request);
        return End_reserveCoinPurchase(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reserveCoinPurchase(AsyncCallback callback, object state, CoinPurchaseReservation request)
      #else
      public void send_reserveCoinPurchase(CoinPurchaseReservation request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reserveCoinPurchase", TMessageType.Call, seqid_));
        reserveCoinPurchase_args args = new reserveCoinPurchase_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PaymentReservationResult recv_reserveCoinPurchase()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reserveCoinPurchase_result result = new reserveCoinPurchase_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reserveCoinPurchase failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reservePayment(AsyncCallback callback, object state, PaymentReservation paymentReservation)
      {
        return send_reservePayment(callback, state, paymentReservation);
      }

      public PaymentReservationResult End_reservePayment(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reservePayment();
      }

      #endif

      public PaymentReservationResult reservePayment(PaymentReservation paymentReservation)
      {
        #if !SILVERLIGHT
        send_reservePayment(paymentReservation);
        return recv_reservePayment();

        #else
        var asyncResult = Begin_reservePayment(null, null, paymentReservation);
        return End_reservePayment(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reservePayment(AsyncCallback callback, object state, PaymentReservation paymentReservation)
      #else
      public void send_reservePayment(PaymentReservation paymentReservation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reservePayment", TMessageType.Call, seqid_));
        reservePayment_args args = new reservePayment_args();
        args.PaymentReservation = paymentReservation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PaymentReservationResult recv_reservePayment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reservePayment_result result = new reservePayment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reservePayment failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["buyCoinProduct"] = buyCoinProduct_Process;
        processMap_["buyFreeProduct"] = buyFreeProduct_Process;
        processMap_["buyMustbuyProduct"] = buyMustbuyProduct_Process;
        processMap_["checkCanReceivePresent"] = checkCanReceivePresent_Process;
        processMap_["getActivePurchases"] = getActivePurchases_Process;
        processMap_["getActivePurchaseVersions"] = getActivePurchaseVersions_Process;
        processMap_["getCoinProducts"] = getCoinProducts_Process;
        processMap_["getCoinProductsByPgCode"] = getCoinProductsByPgCode_Process;
        processMap_["getCoinPurchaseHistory"] = getCoinPurchaseHistory_Process;
        processMap_["getCoinUseAndRefundHistory"] = getCoinUseAndRefundHistory_Process;
        processMap_["getDownloads"] = getDownloads_Process;
        processMap_["getEventPackages"] = getEventPackages_Process;
        processMap_["getNewlyReleasedPackages"] = getNewlyReleasedPackages_Process;
        processMap_["getPopularPackages"] = getPopularPackages_Process;
        processMap_["getPresentsReceived"] = getPresentsReceived_Process;
        processMap_["getPresentsSent"] = getPresentsSent_Process;
        processMap_["getProduct"] = getProduct_Process;
        processMap_["getProductList"] = getProductList_Process;
        processMap_["getProductListWithCarrier"] = getProductListWithCarrier_Process;
        processMap_["getProductWithCarrier"] = getProductWithCarrier_Process;
        processMap_["getPurchaseHistory"] = getPurchaseHistory_Process;
        processMap_["getTotalBalance"] = getTotalBalance_Process;
        processMap_["notifyDownloaded"] = notifyDownloaded_Process;
        processMap_["reserveCoinPurchase"] = reserveCoinPurchase_Process;
        processMap_["reservePayment"] = reservePayment_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void buyCoinProduct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        buyCoinProduct_args args = new buyCoinProduct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        buyCoinProduct_result result = new buyCoinProduct_result();
        try {
          iface_.buyCoinProduct(args.PaymentReservation);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("buyCoinProduct", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void buyFreeProduct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        buyFreeProduct_args args = new buyFreeProduct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        buyFreeProduct_result result = new buyFreeProduct_result();
        try {
          iface_.buyFreeProduct(args.ReceiverMid, args.ProductId, args.MessageTemplate, args.Language, args.Country, args.PackageId);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("buyFreeProduct", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void buyMustbuyProduct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        buyMustbuyProduct_args args = new buyMustbuyProduct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        buyMustbuyProduct_result result = new buyMustbuyProduct_result();
        try {
          iface_.buyMustbuyProduct(args.ReceiverMid, args.ProductId, args.MessageTemplate, args.Language, args.Country, args.PackageId, args.SerialNumber);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("buyMustbuyProduct", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkCanReceivePresent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkCanReceivePresent_args args = new checkCanReceivePresent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkCanReceivePresent_result result = new checkCanReceivePresent_result();
        try {
          iface_.checkCanReceivePresent(args.RecipientMid, args.PackageId, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("checkCanReceivePresent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActivePurchases_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActivePurchases_args args = new getActivePurchases_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActivePurchases_result result = new getActivePurchases_result();
        try {
          result.Success = iface_.getActivePurchases(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getActivePurchases", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getActivePurchaseVersions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActivePurchaseVersions_args args = new getActivePurchaseVersions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActivePurchaseVersions_result result = new getActivePurchaseVersions_result();
        try {
          result.Success = iface_.getActivePurchaseVersions(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getActivePurchaseVersions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCoinProducts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCoinProducts_args args = new getCoinProducts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCoinProducts_result result = new getCoinProducts_result();
        try {
          result.Success = iface_.getCoinProducts(args.AppStoreCode, args.Country, args.Language);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCoinProducts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCoinProductsByPgCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCoinProductsByPgCode_args args = new getCoinProductsByPgCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCoinProductsByPgCode_result result = new getCoinProductsByPgCode_result();
        try {
          result.Success = iface_.getCoinProductsByPgCode(args.AppStoreCode, args.PgCode, args.Country, args.Language);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCoinProductsByPgCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCoinPurchaseHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCoinPurchaseHistory_args args = new getCoinPurchaseHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCoinPurchaseHistory_result result = new getCoinPurchaseHistory_result();
        try {
          result.Success = iface_.getCoinPurchaseHistory(args.Request);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCoinPurchaseHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCoinUseAndRefundHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCoinUseAndRefundHistory_args args = new getCoinUseAndRefundHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCoinUseAndRefundHistory_result result = new getCoinUseAndRefundHistory_result();
        try {
          result.Success = iface_.getCoinUseAndRefundHistory(args.Request);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCoinUseAndRefundHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDownloads_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDownloads_args args = new getDownloads_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDownloads_result result = new getDownloads_result();
        try {
          result.Success = iface_.getDownloads(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getDownloads", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getEventPackages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getEventPackages_args args = new getEventPackages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getEventPackages_result result = new getEventPackages_result();
        try {
          result.Success = iface_.getEventPackages(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getEventPackages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNewlyReleasedPackages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNewlyReleasedPackages_args args = new getNewlyReleasedPackages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNewlyReleasedPackages_result result = new getNewlyReleasedPackages_result();
        try {
          result.Success = iface_.getNewlyReleasedPackages(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNewlyReleasedPackages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPopularPackages_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPopularPackages_args args = new getPopularPackages_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPopularPackages_result result = new getPopularPackages_result();
        try {
          result.Success = iface_.getPopularPackages(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPopularPackages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPresentsReceived_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPresentsReceived_args args = new getPresentsReceived_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPresentsReceived_result result = new getPresentsReceived_result();
        try {
          result.Success = iface_.getPresentsReceived(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPresentsReceived", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPresentsSent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPresentsSent_args args = new getPresentsSent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPresentsSent_result result = new getPresentsSent_result();
        try {
          result.Success = iface_.getPresentsSent(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPresentsSent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProduct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProduct_args args = new getProduct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProduct_result result = new getProduct_result();
        try {
          result.Success = iface_.getProduct(args.PackageID, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProduct", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProductList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProductList_args args = new getProductList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProductList_result result = new getProductList_result();
        try {
          result.Success = iface_.getProductList(args.ProductIdList, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProductList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProductListWithCarrier_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProductListWithCarrier_args args = new getProductListWithCarrier_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProductListWithCarrier_result result = new getProductListWithCarrier_result();
        try {
          result.Success = iface_.getProductListWithCarrier(args.ProductIdList, args.Language, args.Country, args.CarrierCode);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProductListWithCarrier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getProductWithCarrier_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getProductWithCarrier_args args = new getProductWithCarrier_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getProductWithCarrier_result result = new getProductWithCarrier_result();
        try {
          result.Success = iface_.getProductWithCarrier(args.PackageID, args.Language, args.Country, args.CarrierCode);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProductWithCarrier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getPurchaseHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getPurchaseHistory_args args = new getPurchaseHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getPurchaseHistory_result result = new getPurchaseHistory_result();
        try {
          result.Success = iface_.getPurchaseHistory(args.Start, args.Size, args.Language, args.Country);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPurchaseHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTotalBalance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTotalBalance_args args = new getTotalBalance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTotalBalance_result result = new getTotalBalance_result();
        try {
          result.Success = iface_.getTotalBalance(args.AppStoreCode);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getTotalBalance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyDownloaded_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyDownloaded_args args = new notifyDownloaded_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyDownloaded_result result = new notifyDownloaded_result();
        try {
          result.Success = iface_.notifyDownloaded(args.PackageId, args.Language);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyDownloaded", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reserveCoinPurchase_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reserveCoinPurchase_args args = new reserveCoinPurchase_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reserveCoinPurchase_result result = new reserveCoinPurchase_result();
        try {
          result.Success = iface_.reserveCoinPurchase(args.Request);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reserveCoinPurchase", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reservePayment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reservePayment_args args = new reservePayment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reservePayment_result result = new reservePayment_result();
        try {
          result.Success = iface_.reservePayment(args.PaymentReservation);
        } catch (TalkException e) {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reservePayment", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buyCoinProduct_args : TBase
    {
      private PaymentReservation _paymentReservation;

      public PaymentReservation PaymentReservation
      {
        get
        {
          return _paymentReservation;
        }
        set
        {
          __isset.paymentReservation = true;
          this._paymentReservation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paymentReservation;
      }

      public buyCoinProduct_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                PaymentReservation = new PaymentReservation();
                PaymentReservation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buyCoinProduct_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PaymentReservation != null && __isset.paymentReservation) {
          field.Name = "paymentReservation";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PaymentReservation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buyCoinProduct_args(");
        sb.Append("PaymentReservation: ");
        sb.Append(PaymentReservation== null ? "<null>" : PaymentReservation.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buyCoinProduct_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public buyCoinProduct_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buyCoinProduct_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buyCoinProduct_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buyFreeProduct_args : TBase
    {
      private string _receiverMid;
      private string _productId;
      private int _messageTemplate;
      private string _language;
      private string _country;
      private long _packageId;

      public string ReceiverMid
      {
        get
        {
          return _receiverMid;
        }
        set
        {
          __isset.receiverMid = true;
          this._receiverMid = value;
        }
      }

      public string ProductId
      {
        get
        {
          return _productId;
        }
        set
        {
          __isset.productId = true;
          this._productId = value;
        }
      }

      public int MessageTemplate
      {
        get
        {
          return _messageTemplate;
        }
        set
        {
          __isset.messageTemplate = true;
          this._messageTemplate = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }

      public long PackageId
      {
        get
        {
          return _packageId;
        }
        set
        {
          __isset.packageId = true;
          this._packageId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool receiverMid;
        public bool productId;
        public bool messageTemplate;
        public bool language;
        public bool country;
        public bool packageId;
      }

      public buyFreeProduct_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ReceiverMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ProductId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessageTemplate = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                PackageId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buyFreeProduct_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ReceiverMid != null && __isset.receiverMid) {
          field.Name = "receiverMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReceiverMid);
          oprot.WriteFieldEnd();
        }
        if (ProductId != null && __isset.productId) {
          field.Name = "productId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ProductId);
          oprot.WriteFieldEnd();
        }
        if (__isset.messageTemplate) {
          field.Name = "messageTemplate";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessageTemplate);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (__isset.packageId) {
          field.Name = "packageId";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PackageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buyFreeProduct_args(");
        sb.Append("ReceiverMid: ");
        sb.Append(ReceiverMid);
        sb.Append(",ProductId: ");
        sb.Append(ProductId);
        sb.Append(",MessageTemplate: ");
        sb.Append(MessageTemplate);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(",PackageId: ");
        sb.Append(PackageId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buyFreeProduct_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public buyFreeProduct_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buyFreeProduct_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buyFreeProduct_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buyMustbuyProduct_args : TBase
    {
      private string _receiverMid;
      private string _productId;
      private int _messageTemplate;
      private string _language;
      private string _country;
      private long _packageId;
      private string _serialNumber;

      public string ReceiverMid
      {
        get
        {
          return _receiverMid;
        }
        set
        {
          __isset.receiverMid = true;
          this._receiverMid = value;
        }
      }

      public string ProductId
      {
        get
        {
          return _productId;
        }
        set
        {
          __isset.productId = true;
          this._productId = value;
        }
      }

      public int MessageTemplate
      {
        get
        {
          return _messageTemplate;
        }
        set
        {
          __isset.messageTemplate = true;
          this._messageTemplate = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }

      public long PackageId
      {
        get
        {
          return _packageId;
        }
        set
        {
          __isset.packageId = true;
          this._packageId = value;
        }
      }

      public string SerialNumber
      {
        get
        {
          return _serialNumber;
        }
        set
        {
          __isset.serialNumber = true;
          this._serialNumber = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool receiverMid;
        public bool productId;
        public bool messageTemplate;
        public bool language;
        public bool country;
        public bool packageId;
        public bool serialNumber;
      }

      public buyMustbuyProduct_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ReceiverMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ProductId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessageTemplate = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                PackageId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                SerialNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buyMustbuyProduct_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ReceiverMid != null && __isset.receiverMid) {
          field.Name = "receiverMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReceiverMid);
          oprot.WriteFieldEnd();
        }
        if (ProductId != null && __isset.productId) {
          field.Name = "productId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ProductId);
          oprot.WriteFieldEnd();
        }
        if (__isset.messageTemplate) {
          field.Name = "messageTemplate";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessageTemplate);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (__isset.packageId) {
          field.Name = "packageId";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PackageId);
          oprot.WriteFieldEnd();
        }
        if (SerialNumber != null && __isset.serialNumber) {
          field.Name = "serialNumber";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SerialNumber);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buyMustbuyProduct_args(");
        sb.Append("ReceiverMid: ");
        sb.Append(ReceiverMid);
        sb.Append(",ProductId: ");
        sb.Append(ProductId);
        sb.Append(",MessageTemplate: ");
        sb.Append(MessageTemplate);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(",PackageId: ");
        sb.Append(PackageId);
        sb.Append(",SerialNumber: ");
        sb.Append(SerialNumber);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buyMustbuyProduct_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public buyMustbuyProduct_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buyMustbuyProduct_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buyMustbuyProduct_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkCanReceivePresent_args : TBase
    {
      private string _recipientMid;
      private long _packageId;
      private string _language;
      private string _country;

      public string RecipientMid
      {
        get
        {
          return _recipientMid;
        }
        set
        {
          __isset.recipientMid = true;
          this._recipientMid = value;
        }
      }

      public long PackageId
      {
        get
        {
          return _packageId;
        }
        set
        {
          __isset.packageId = true;
          this._packageId = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool recipientMid;
        public bool packageId;
        public bool language;
        public bool country;
      }

      public checkCanReceivePresent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                RecipientMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                PackageId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkCanReceivePresent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RecipientMid != null && __isset.recipientMid) {
          field.Name = "recipientMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RecipientMid);
          oprot.WriteFieldEnd();
        }
        if (__isset.packageId) {
          field.Name = "packageId";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PackageId);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkCanReceivePresent_args(");
        sb.Append("RecipientMid: ");
        sb.Append(RecipientMid);
        sb.Append(",PackageId: ");
        sb.Append(PackageId);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkCanReceivePresent_result : TBase
    {
      private TalkException _e;

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
      }

      public checkCanReceivePresent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkCanReceivePresent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkCanReceivePresent_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivePurchases_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getActivePurchases_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActivePurchases_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getActivePurchases_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivePurchases_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getActivePurchases_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActivePurchases_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getActivePurchases_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivePurchaseVersions_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getActivePurchaseVersions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActivePurchaseVersions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getActivePurchaseVersions_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActivePurchaseVersions_result : TBase
    {
      private ProductSimpleList _success;
      private TalkException _e;

      public ProductSimpleList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getActivePurchaseVersions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductSimpleList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActivePurchaseVersions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getActivePurchaseVersions_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinProducts_args : TBase
    {
      private PaymentType _appStoreCode;
      private string _country;
      private string _language;

      /// <summary>
      /// 
      /// <seealso cref="PaymentType"/>
      /// </summary>
      public PaymentType AppStoreCode
      {
        get
        {
          return _appStoreCode;
        }
        set
        {
          __isset.appStoreCode = true;
          this._appStoreCode = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool appStoreCode;
        public bool country;
        public bool language;
      }

      public getCoinProducts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                AppStoreCode = (PaymentType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinProducts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.appStoreCode) {
          field.Name = "appStoreCode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)AppStoreCode);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinProducts_args(");
        sb.Append("AppStoreCode: ");
        sb.Append(AppStoreCode);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinProducts_result : TBase
    {
      private List<CoinProductItem> _success;
      private TalkException _e;

      public List<CoinProductItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCoinProducts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CoinProductItem>();
                  TList _list89 = iprot.ReadListBegin();
                  for( int _i90 = 0; _i90 < _list89.Count; ++_i90)
                  {
                    CoinProductItem _elem91 = new CoinProductItem();
                    _elem91 = new CoinProductItem();
                    _elem91.Read(iprot);
                    Success.Add(_elem91);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinProducts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CoinProductItem _iter92 in Success)
              {
                _iter92.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinProducts_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinProductsByPgCode_args : TBase
    {
      private PaymentType _appStoreCode;
      private PaymentPgType _pgCode;
      private string _country;
      private string _language;

      /// <summary>
      /// 
      /// <seealso cref="PaymentType"/>
      /// </summary>
      public PaymentType AppStoreCode
      {
        get
        {
          return _appStoreCode;
        }
        set
        {
          __isset.appStoreCode = true;
          this._appStoreCode = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="PaymentPgType"/>
      /// </summary>
      public PaymentPgType PgCode
      {
        get
        {
          return _pgCode;
        }
        set
        {
          __isset.pgCode = true;
          this._pgCode = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool appStoreCode;
        public bool pgCode;
        public bool country;
        public bool language;
      }

      public getCoinProductsByPgCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                AppStoreCode = (PaymentType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PgCode = (PaymentPgType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinProductsByPgCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.appStoreCode) {
          field.Name = "appStoreCode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)AppStoreCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.pgCode) {
          field.Name = "pgCode";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)PgCode);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinProductsByPgCode_args(");
        sb.Append("AppStoreCode: ");
        sb.Append(AppStoreCode);
        sb.Append(",PgCode: ");
        sb.Append(PgCode);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinProductsByPgCode_result : TBase
    {
      private List<CoinProductItem> _success;
      private TalkException _e;

      public List<CoinProductItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCoinProductsByPgCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CoinProductItem>();
                  TList _list93 = iprot.ReadListBegin();
                  for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                  {
                    CoinProductItem _elem95 = new CoinProductItem();
                    _elem95 = new CoinProductItem();
                    _elem95.Read(iprot);
                    Success.Add(_elem95);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinProductsByPgCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CoinProductItem _iter96 in Success)
              {
                _iter96.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinProductsByPgCode_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinPurchaseHistory_args : TBase
    {
      private CoinHistoryCondition _request;

      public CoinHistoryCondition Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getCoinPurchaseHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Request = new CoinHistoryCondition();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinPurchaseHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinPurchaseHistory_args(");
        sb.Append("Request: ");
        sb.Append(Request== null ? "<null>" : Request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinPurchaseHistory_result : TBase
    {
      private CoinHistoryResult _success;
      private TalkException _e;

      public CoinHistoryResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCoinPurchaseHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CoinHistoryResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinPurchaseHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinPurchaseHistory_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinUseAndRefundHistory_args : TBase
    {
      private CoinHistoryCondition _request;

      public CoinHistoryCondition Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public getCoinUseAndRefundHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Request = new CoinHistoryCondition();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinUseAndRefundHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinUseAndRefundHistory_args(");
        sb.Append("Request: ");
        sb.Append(Request== null ? "<null>" : Request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCoinUseAndRefundHistory_result : TBase
    {
      private CoinHistoryResult _success;
      private TalkException _e;

      public CoinHistoryResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getCoinUseAndRefundHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CoinHistoryResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getCoinUseAndRefundHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getCoinUseAndRefundHistory_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDownloads_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getDownloads_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDownloads_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDownloads_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDownloads_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getDownloads_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDownloads_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDownloads_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEventPackages_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getEventPackages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEventPackages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEventPackages_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getEventPackages_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getEventPackages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getEventPackages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getEventPackages_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNewlyReleasedPackages_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getNewlyReleasedPackages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNewlyReleasedPackages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNewlyReleasedPackages_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNewlyReleasedPackages_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getNewlyReleasedPackages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNewlyReleasedPackages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNewlyReleasedPackages_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPopularPackages_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getPopularPackages_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPopularPackages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPopularPackages_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPopularPackages_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getPopularPackages_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPopularPackages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPopularPackages_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPresentsReceived_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getPresentsReceived_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPresentsReceived_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPresentsReceived_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPresentsReceived_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getPresentsReceived_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPresentsReceived_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPresentsReceived_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPresentsSent_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getPresentsSent_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPresentsSent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPresentsSent_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPresentsSent_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getPresentsSent_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPresentsSent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPresentsSent_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProduct_args : TBase
    {
      private long _packageID;
      private string _language;
      private string _country;

      public long PackageID
      {
        get
        {
          return _packageID;
        }
        set
        {
          __isset.packageID = true;
          this._packageID = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool packageID;
        public bool language;
        public bool country;
      }

      public getProduct_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                PackageID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProduct_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.packageID) {
          field.Name = "packageID";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PackageID);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProduct_args(");
        sb.Append("PackageID: ");
        sb.Append(PackageID);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProduct_result : TBase
    {
      private Product _success;
      private TalkException _e;

      public Product Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getProduct_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Product();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProduct_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProduct_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductList_args : TBase
    {
      private List<string> _productIdList;
      private string _language;
      private string _country;

      public List<string> ProductIdList
      {
        get
        {
          return _productIdList;
        }
        set
        {
          __isset.productIdList = true;
          this._productIdList = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool productIdList;
        public bool language;
        public bool country;
      }

      public getProductList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  ProductIdList = new List<string>();
                  TList _list97 = iprot.ReadListBegin();
                  for( int _i98 = 0; _i98 < _list97.Count; ++_i98)
                  {
                    string _elem99 = null;
                    _elem99 = iprot.ReadString();
                    ProductIdList.Add(_elem99);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProductIdList != null && __isset.productIdList) {
          field.Name = "productIdList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ProductIdList.Count));
            foreach (string _iter100 in ProductIdList)
            {
              oprot.WriteString(_iter100);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductList_args(");
        sb.Append("ProductIdList: ");
        sb.Append(ProductIdList);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductList_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getProductList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductList_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductListWithCarrier_args : TBase
    {
      private List<string> _productIdList;
      private string _language;
      private string _country;
      private string _carrierCode;

      public List<string> ProductIdList
      {
        get
        {
          return _productIdList;
        }
        set
        {
          __isset.productIdList = true;
          this._productIdList = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }

      public string CarrierCode
      {
        get
        {
          return _carrierCode;
        }
        set
        {
          __isset.carrierCode = true;
          this._carrierCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool productIdList;
        public bool language;
        public bool country;
        public bool carrierCode;
      }

      public getProductListWithCarrier_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  ProductIdList = new List<string>();
                  TList _list101 = iprot.ReadListBegin();
                  for( int _i102 = 0; _i102 < _list101.Count; ++_i102)
                  {
                    string _elem103 = null;
                    _elem103 = iprot.ReadString();
                    ProductIdList.Add(_elem103);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                CarrierCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductListWithCarrier_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProductIdList != null && __isset.productIdList) {
          field.Name = "productIdList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ProductIdList.Count));
            foreach (string _iter104 in ProductIdList)
            {
              oprot.WriteString(_iter104);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (CarrierCode != null && __isset.carrierCode) {
          field.Name = "carrierCode";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CarrierCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductListWithCarrier_args(");
        sb.Append("ProductIdList: ");
        sb.Append(ProductIdList);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(",CarrierCode: ");
        sb.Append(CarrierCode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductListWithCarrier_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getProductListWithCarrier_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductListWithCarrier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductListWithCarrier_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductWithCarrier_args : TBase
    {
      private long _packageID;
      private string _language;
      private string _country;
      private string _carrierCode;

      public long PackageID
      {
        get
        {
          return _packageID;
        }
        set
        {
          __isset.packageID = true;
          this._packageID = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }

      public string CarrierCode
      {
        get
        {
          return _carrierCode;
        }
        set
        {
          __isset.carrierCode = true;
          this._carrierCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool packageID;
        public bool language;
        public bool country;
        public bool carrierCode;
      }

      public getProductWithCarrier_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                PackageID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                CarrierCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductWithCarrier_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.packageID) {
          field.Name = "packageID";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PackageID);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (CarrierCode != null && __isset.carrierCode) {
          field.Name = "carrierCode";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CarrierCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductWithCarrier_args(");
        sb.Append("PackageID: ");
        sb.Append(PackageID);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(",CarrierCode: ");
        sb.Append(CarrierCode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getProductWithCarrier_result : TBase
    {
      private Product _success;
      private TalkException _e;

      public Product Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getProductWithCarrier_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Product();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getProductWithCarrier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getProductWithCarrier_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPurchaseHistory_args : TBase
    {
      private long _start;
      private int _size;
      private string _language;
      private string _country;

      public long Start
      {
        get
        {
          return _start;
        }
        set
        {
          __isset.start = true;
          this._start = value;
        }
      }

      public int Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }

      public string Country
      {
        get
        {
          return _country;
        }
        set
        {
          __isset.country = true;
          this._country = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool start;
        public bool size;
        public bool language;
        public bool country;
      }

      public getPurchaseHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPurchaseHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPurchaseHistory_args(");
        sb.Append("Start: ");
        sb.Append(Start);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(",Country: ");
        sb.Append(Country);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getPurchaseHistory_result : TBase
    {
      private ProductList _success;
      private TalkException _e;

      public ProductList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getPurchaseHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProductList();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getPurchaseHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getPurchaseHistory_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTotalBalance_args : TBase
    {
      private PaymentType _appStoreCode;

      /// <summary>
      /// 
      /// <seealso cref="PaymentType"/>
      /// </summary>
      public PaymentType AppStoreCode
      {
        get
        {
          return _appStoreCode;
        }
        set
        {
          __isset.appStoreCode = true;
          this._appStoreCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool appStoreCode;
      }

      public getTotalBalance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                AppStoreCode = (PaymentType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTotalBalance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.appStoreCode) {
          field.Name = "appStoreCode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)AppStoreCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTotalBalance_args(");
        sb.Append("AppStoreCode: ");
        sb.Append(AppStoreCode);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTotalBalance_result : TBase
    {
      private Coin _success;
      private TalkException _e;

      public Coin Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getTotalBalance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Coin();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTotalBalance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTotalBalance_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyDownloaded_args : TBase
    {
      private long _packageId;
      private string _language;

      public long PackageId
      {
        get
        {
          return _packageId;
        }
        set
        {
          __isset.packageId = true;
          this._packageId = value;
        }
      }

      public string Language
      {
        get
        {
          return _language;
        }
        set
        {
          __isset.language = true;
          this._language = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool packageId;
        public bool language;
      }

      public notifyDownloaded_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                PackageId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyDownloaded_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.packageId) {
          field.Name = "packageId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PackageId);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyDownloaded_args(");
        sb.Append("PackageId: ");
        sb.Append(PackageId);
        sb.Append(",Language: ");
        sb.Append(Language);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyDownloaded_result : TBase
    {
      private long _success;
      private TalkException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public notifyDownloaded_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("notifyDownloaded_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("notifyDownloaded_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reserveCoinPurchase_args : TBase
    {
      private CoinPurchaseReservation _request;

      public CoinPurchaseReservation Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public reserveCoinPurchase_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Request = new CoinPurchaseReservation();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reserveCoinPurchase_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reserveCoinPurchase_args(");
        sb.Append("Request: ");
        sb.Append(Request== null ? "<null>" : Request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reserveCoinPurchase_result : TBase
    {
      private PaymentReservationResult _success;
      private TalkException _e;

      public PaymentReservationResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public reserveCoinPurchase_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaymentReservationResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reserveCoinPurchase_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reserveCoinPurchase_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reservePayment_args : TBase
    {
      private PaymentReservation _paymentReservation;

      public PaymentReservation PaymentReservation
      {
        get
        {
          return _paymentReservation;
        }
        set
        {
          __isset.paymentReservation = true;
          this._paymentReservation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paymentReservation;
      }

      public reservePayment_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                PaymentReservation = new PaymentReservation();
                PaymentReservation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reservePayment_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PaymentReservation != null && __isset.paymentReservation) {
          field.Name = "paymentReservation";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PaymentReservation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reservePayment_args(");
        sb.Append("PaymentReservation: ");
        sb.Append(PaymentReservation== null ? "<null>" : PaymentReservation.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reservePayment_result : TBase
    {
      private PaymentReservationResult _success;
      private TalkException _e;

      public PaymentReservationResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TalkException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public reservePayment_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaymentReservationResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reservePayment_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reservePayment_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
