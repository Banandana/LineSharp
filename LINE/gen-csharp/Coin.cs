/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Coin : TBase
  {
    private int _freeCoinBalance;
    private int _payedCoinBalance;
    private int _totalCoinBalance;
    private int _rewardCoinBalance;

    public int FreeCoinBalance
    {
      get
      {
        return _freeCoinBalance;
      }
      set
      {
        __isset.freeCoinBalance = true;
        this._freeCoinBalance = value;
      }
    }

    public int PayedCoinBalance
    {
      get
      {
        return _payedCoinBalance;
      }
      set
      {
        __isset.payedCoinBalance = true;
        this._payedCoinBalance = value;
      }
    }

    public int TotalCoinBalance
    {
      get
      {
        return _totalCoinBalance;
      }
      set
      {
        __isset.totalCoinBalance = true;
        this._totalCoinBalance = value;
      }
    }

    public int RewardCoinBalance
    {
      get
      {
        return _rewardCoinBalance;
      }
      set
      {
        __isset.rewardCoinBalance = true;
        this._rewardCoinBalance = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool freeCoinBalance;
      public bool payedCoinBalance;
      public bool totalCoinBalance;
      public bool rewardCoinBalance;
    }

    public Coin() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              FreeCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              PayedCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TotalCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RewardCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Coin");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.freeCoinBalance) {
        field.Name = "freeCoinBalance";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FreeCoinBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.payedCoinBalance) {
        field.Name = "payedCoinBalance";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PayedCoinBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalCoinBalance) {
        field.Name = "totalCoinBalance";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalCoinBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.rewardCoinBalance) {
        field.Name = "rewardCoinBalance";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RewardCoinBalance);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Coin(");
      sb.Append("FreeCoinBalance: ");
      sb.Append(FreeCoinBalance);
      sb.Append(",PayedCoinBalance: ");
      sb.Append(PayedCoinBalance);
      sb.Append(",TotalCoinBalance: ");
      sb.Append(TotalCoinBalance);
      sb.Append(",RewardCoinBalance: ");
      sb.Append(RewardCoinBalance);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
