/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LineSharp.Datatypes
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Message : TBase
  {
    private string _from;
    private string _to;
    private MIDType _toType;
    private string _id;
    private long _createdTime;
    private long _deliveredTime;
    private string _text;
    private Location _location;
    private bool _hasContent;
    private ContentType _contentType;
    private byte[] _contentPreview;
    private Dictionary<string, string> _contentMetadata;

    public string From
    {
      get
      {
        return _from;
      }
      set
      {
        __isset.from = true;
        this._from = value;
      }
    }

    public string To
    {
      get
      {
        return _to;
      }
      set
      {
        __isset.to = true;
        this._to = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MIDType"/>
    /// </summary>
    public MIDType ToType
    {
      get
      {
        return _toType;
      }
      set
      {
        __isset.toType = true;
        this._toType = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public long CreatedTime
    {
      get
      {
        return _createdTime;
      }
      set
      {
        __isset.createdTime = true;
        this._createdTime = value;
      }
    }

    public long DeliveredTime
    {
      get
      {
        return _deliveredTime;
      }
      set
      {
        __isset.deliveredTime = true;
        this._deliveredTime = value;
      }
    }

    public string Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }

    public Location Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public bool HasContent
    {
      get
      {
        return _hasContent;
      }
      set
      {
        __isset.hasContent = true;
        this._hasContent = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ContentType"/>
    /// </summary>
    public ContentType ContentType
    {
      get
      {
        return _contentType;
      }
      set
      {
        __isset.contentType = true;
        this._contentType = value;
      }
    }

    public byte[] ContentPreview
    {
      get
      {
        return _contentPreview;
      }
      set
      {
        __isset.contentPreview = true;
        this._contentPreview = value;
      }
    }

    public Dictionary<string, string> ContentMetadata
    {
      get
      {
        return _contentMetadata;
      }
      set
      {
        __isset.contentMetadata = true;
        this._contentMetadata = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool from;
      public bool to;
      public bool toType;
      public bool id;
      public bool createdTime;
      public bool deliveredTime;
      public bool text;
      public bool location;
      public bool hasContent;
      public bool contentType;
      public bool contentPreview;
      public bool contentMetadata;
    }

    public Message() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              From = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              To = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ToType = (MIDType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              CreatedTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              DeliveredTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Location = new Location();
              Location.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              HasContent = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              ContentType = (ContentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              ContentPreview = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Map) {
              {
                ContentMetadata = new Dictionary<string, string>();
                TMap _map24 = iprot.ReadMapBegin();
                for( int _i25 = 0; _i25 < _map24.Count; ++_i25)
                {
                  string _key26;
                  string _val27;
                  _key26 = iprot.ReadString();
                  _val27 = iprot.ReadString();
                  ContentMetadata[_key26] = _val27;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Message");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (From != null && __isset.from) {
        field.Name = "from";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(From);
        oprot.WriteFieldEnd();
      }
      if (To != null && __isset.to) {
        field.Name = "to";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(To);
        oprot.WriteFieldEnd();
      }
      if (__isset.toType) {
        field.Name = "toType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ToType);
        oprot.WriteFieldEnd();
      }
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdTime) {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.deliveredTime) {
        field.Name = "deliveredTime";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DeliveredTime);
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Location.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasContent) {
        field.Name = "hasContent";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasContent);
        oprot.WriteFieldEnd();
      }
      if (__isset.contentType) {
        field.Name = "contentType";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ContentType);
        oprot.WriteFieldEnd();
      }
      if (ContentPreview != null && __isset.contentPreview) {
        field.Name = "contentPreview";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(ContentPreview);
        oprot.WriteFieldEnd();
      }
      if (ContentMetadata != null && __isset.contentMetadata) {
        field.Name = "contentMetadata";
        field.Type = TType.Map;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ContentMetadata.Count));
          foreach (string _iter28 in ContentMetadata.Keys)
          {
            oprot.WriteString(_iter28);
            oprot.WriteString(ContentMetadata[_iter28]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Message(");
      sb.Append("From: ");
      sb.Append(From);
      sb.Append(",To: ");
      sb.Append(To);
      sb.Append(",ToType: ");
      sb.Append(ToType);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(",CreatedTime: ");
      sb.Append(CreatedTime);
      sb.Append(",DeliveredTime: ");
      sb.Append(DeliveredTime);
      sb.Append(",Text: ");
      sb.Append(Text);
      sb.Append(",Location: ");
      sb.Append(Location== null ? "<null>" : Location.ToString());
      sb.Append(",HasContent: ");
      sb.Append(HasContent);
      sb.Append(",ContentType: ");
      sb.Append(ContentType);
      sb.Append(",ContentPreview: ");
      sb.Append(ContentPreview);
      sb.Append(",ContentMetadata: ");
      sb.Append(ContentMetadata);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
